detailsdistribution, posting, or copying of this pdf is strictly prohibited without written permission of the national academies press. (request permission) unless otherwise indicated, all materials in this pdf are copyrighted by the national academy of sciences.copyright © national academy of sciences. all rights reserved.the national academies pressvisit the national academies press at nap.edu and login or register to get:œ œ 10% off the price of print titlesœ special offers and discountsget this bookfind related titlesthis pdf is available at sharecontributorshttp://nap.edu/1788intellectual property issues in software128 pages | 6 x 9 | paperbackisbn 9780309043441 | doi 10.17226/1788steering committee for intellectual property issues in software, nationalresearch councilintellectual property issues in softwarecopyright national academy of sciences. all rights reserved.intellectual propertyissues in softwaresteering committee for intellectual property issues in softwarecomputer science and telecommunications boardcommission on physical sciences, mathematics, and applicationsnational research councilnational academy presswashington, d.c.1991iintellectual property issues in softwarecopyright national academy of sciences. all rights reserved.notice: the project that is the subject of this report was approved by the governing board of thenational research council, whose members are drawn from the councils of the national academyof sciences, the national academy of engineering, and the institute of medicine. the members ofthe committee responsible for the report were chosen for their special competences and with regardfor appropriate balance.this report has been reviewed by a group other than the authors according to proceduresapproved by a report review committee consisting of members of the national academy of sciences, the national academy of engineering, and the institute of medicine.the national academy of sciences is a private, nonprofit, selfperpetuating society of distinguished scholars engaged in scientific and engineering research, dedicated to the furtherance ofscience and technology and to their use for the general welfare. upon the authority of the chartergranted to it by the congress in 1863, the academy has a mandate that requires it to advise the federal government on scientific and technical matters. dr. frank press is president of the nationalacademy of sciences.the national academy of engineering was established in 1964, under the charter of thenational academy of sciences, as a parallel organization of outstanding engineers. it is autonomousin its administration and in the selection of its members, sharing with the national academy of sciences the responsibility for advising the federal government. the national academy of engineeringalso sponsors engineering programs aimed at meeting national needs, encourages education andresearch, and recognizes the superior achievements of engineers. dr. robert m. white is presidentof the national academy of engineering.the institute of medicine was established in 1970 by the national academy of sciences tosecure the services of eminent members of appropriate professions in the examination of policy matters pertaining to the health of the public. the institute acts under the responsibility given to thenational academy of sciences by its congressional charter to be an adviser to the federal government and, upon its own initiative, to identify issues of medical care, research, and education. dr.samuel o. their is president of the institute of medicine.the national research council was organized by the national academy of sciences in 1916 toassociate the broad community of science and technology with the academy's purposes of furthering knowledge and advising the federal government. functioning in accordance with general policies determined by the academy, the council has become the principal operating agency of both thenational academy of sciences and the national academy of engineering in providing services tothe government, the public, and the scientific and engineering communities. the council is administered jointly by both academies and the institute of medicine. dr. frank press and dr. robert m.white are chairman and vice chairman, respectively, of the national research council.support for this project was provided by the following organizations and agencies: air forceoffice of scientific research (grant no. n0001487j1110), apple computer, inc., control datacorporation, cray research, inc., the defense advanced research projects agency (grant no.n0001487j1110), digital equipment corporation, ibm corporation, the national aeronauticsand space administration (grant no. cda860535), the national science foundation (grant no.cda860535), and the office of naval research (grant no. n0001487j1110).library of congress catalog card number 9062783international standard book number 0309043441available for sale from: national academy press 2101 constitution avenue, nwwashington,dc20418s227printed in the united states of americaiiintellectual property issues in softwarecopyright national academy of sciences. all rights reserved.steering committee for intellectualproperty issues in softwarelewis m. branscomb, harvard university, chairmanpaul goldstein, stanford law schoolanita k. jones, university of virginiamitchell d. kapor, on technology, inc.michael o. rabin, harvard universitypeter r. schneider, ibm corporationmarjory s. blumenthal, staff directorc.k. gunsalus, cstb consultantmark bello, cstb consultantdonna f. allen, administrative secretaryiiiintellectual property issues in softwarecopyright national academy of sciences. all rights reserved.computer science and telecommunicationsboardjoseph f. traub, columbia university, chairmanalfred v. aho, at&t bell laboratoriesjohn seely brown, xerox corporation parcfrank p. carrubba, hewlettpackard companydavid j. farber, university of pennsylvaniasamuel h. fuller, digital equipment corporationjames freeman gilbert, university of california at san diegowilliam a. goddard iii, california institute of technologyjohn e. hopcroft, cornell universitymitchell d. kapor, on technology, inc.sidney karin, san diego supercomputer centerleonard kleinrock, university of california at los angelesrobert langridge, university of california at san franciscorobert l. martin, bell communications researchwilliam f. miller, sri internationalabraham peled, ibm t.j. watson research centerray reddy, carnegie mellon universityjerome h. saltzer, massachusetts institute of technologymary shaw, carnegie mellon universityeric e. sumner, institute of electrical and electronics engineersivan e. sutherland, sutherland, sproull & associatesgeorge l. turin, teknekron corporationvictor vyssotsky, digital equipment corporationwillis h. ware, the rand corporationwilliam wulf, university of virginiamarjory s. blumenthal, staff directoranthony m. forte, senior staff officerrenee a. hawkins, staff associateherbert lin, staff officerdamian m. saccocio, staff officerdonna f. allen, administrative secretaryophelia bitangabriceno, project assistantcatherine a. sparks, senior secretaryivintellectual property issues in softwarecopyright national academy of sciences. all rights reserved.commission on physical sciences,mathematics, and applicationsnorman hackerman, robert a. welch foundation, chairmanpeter j. bickel, university of california at berkeleygeorge f. carrier, harvard universityherbert d. doan, the dow chemical company (retired)dean e. eastman, ibm t.j. watson research centermarye anne fox, university of texasphillip a. griffiths, duke universityneal f. lane, rice universityrobert w. lucky, at&t bell laboratorieschristopher f. mckee, university of california at berkeleyrichard s. nicholson, american association for the advancement ofsciencejeremiah p. ostriker, princeton university observatoryalan schriesheim, argonne national laboratoryroy f. schwitters, superconducting super collider laboratorykenneth g. wilson, ohio state universitynorman metzger, executive directorvintellectual property issues in softwarecopyright national academy of sciences. all rights reserved.viintellectual property issues in softwarecopyright national academy of sciences. all rights reserved.prefacecomputer software is a remarkable human achievementšwhethermeasured by its extraordinary power to orchestrate computer hardware to carryout useful tasks; the creativity, talent, and teamwork required for its creation;the rapidity with which it is advancing technically; or the phenomenal growth ofsoftware as an economic activity. nothing in human experience withtechnology is quite like it.twentyfive years ago sales of computer programs in the united statestotaled an estimated $250 million. today several thousand u.s. softwareproducersšranging from individuals to highly organized teams of hundreds oreven thousands of computer scientists, software engineers, and programmersšgenerate revenues in the tens of billions of dollars. the systems and theapplication software they produce enable computers to support an evergrowingnumber of human activities.in the early years of the information age, advances in computer andcommunications hardware drove progress in the computercommunicationsindustry. today it is software that adapts the hardware to the infinite range ofhuman uses that give the computer its personality and exploits its power. themanufacturers of computer hardware and software still gain a majority of theirrevenue from the hardware, but when the software created by users is included,people spend more on software than on hardware. for vertically integratedfirms like ibm, software is, on the average, more profitable, and revenue fromsoftware is growing faster than revenue from hardware, in spite of the fact thatproven software functions are continuously integrated into new hardwaredesigns, and software designers move on to tackle yet newer tasks.prefaceviiintellectual property issues in softwarecopyright national academy of sciences. all rights reserved.thus the software industry is the enabling "complementary asset" for thehardware industry; those who master the challenge of creating good softwarecan expect to be the leaders in the world of information machines and services.no one is prepared to predict that the extraordinary rate of growth and change isabout to stop, or even slow down substantially. both new applications and newcomputer architecture will continue to change the way we work, create, learn,communicate, and play.why then are computer scientists and software entrepreneurs nervousabout the court decisions that guide the arcane legal world of intellectualproperty protection? and why do some intellectual property lawyers becomeeven more nervous when scientists question the rationale underlying the currentstructure of legal protection and even suggest that it may be inadequate or causeserious problems in the future?the world of software has changed dramatically since the emergence ofcommercial software in the 1950s. initially the work of mathematicians andscientists who were intimately involved in building computer hardware,software was the creative expression of gifted individuals. with ibm's decisionto "unbundle" softwarešpricing it separately from the hardwarešand later thedevelopment of highlevel design languages to lower the technical barriers toprogramming, the team approach to software production began to look muchmore like the modus operandi in the more traditional areas of commercialproduct design and testing.today in the largest firms, products comprising millions of lines of "code"are produced in industrial environments against committed plans for function,cost, and date of delivery. but even in these mature commercial environments,the role of the designer who is able to keep the conception of systemleveldesign in mind, and who oversees the integration of hundreds of modules into afunctioning whole, is still the key to product success. an evolving combinationof intuition, prior experience, and expertise in computer and cognitive sciencego into the production of "userfriendly," efficient, errorfree code.but the institutional structure of the industry is maturing. there are largenumbers of firms with market positions to protect, with customers dependent onthe continuous, incremental improvement of their applications. the magnitudeof the upfront investments required to create competitive software products,and of the downstream investments needed to sell and support them, inevitablygives rise to conflicting desires to encourage innovation while preservingstability in a huge, competitive industry.the maturing of the industry is not the result of saturating growth butreflects instead the industry's success in becoming integrated intoprefaceviiiintellectual property issues in softwarecopyright national academy of sciences. all rights reserved.the fabric of modern society. end users want to assemble for their needs thebest of the industry's output. they want familiar, reliable, and predictable waysto do things. they cannot sort through thousands of packages to find the bestones; they are demanding that the industryšthrough strategic alliances,standards development, or simply response to market forcesšprovide moreinteroperability, consistent interfaces, and very high levels of reliability.market entry for new innovators is still wide open, however, as far asindustry structure, the legal environment, and emerging markets are concerned.but the cost of entry is soaring; negotiating compatibility with otherproducts, testing, advertising, and providing customer support and continuousproduct evolution as the hardware and software around the product changešallentail high risks and heavy upfront investment. no wonder those who spendmillions of dollars to develop and bring to market products that cost virtuallynothing to replicate or manufacture want assurances that they will have achance to enjoy the fruits of their labors.three fears seem to be dominant in the minds of industry leaders: of loss of freedom of action, fear of litigation over possible infringement of patents and copyrights,and fear of unfair business practices that deny risktakers the fruits of theircreativity.a fourth fear is voiced by the scientists and entrepreneurs entering themarket: fear that business practices and legal constraints will slow down theprocess of shared learning on which future progress rests.this is the very process that led the framers of the constitution to enshrinecopyright and patent law with constitutional authority. a fifth fear is lessfrequently voiced, perhaps because the public has been so well served bysoftware innovators of the last 40 years, but nevertheless deserves consideration: fear that the public interest in software will be subordinated to theinterests of the industry.from a bystander's perspective, legal protection of software today may notseem very complicated, nor in serious difficulty. relatively few softwarepatents have been issued, and even fewer have been tested in court. copyrightprotection is almost universally available,prefaceixintellectual property issues in softwarecopyright national academy of sciences. all rights reserved.is inexpensive, and little constrains the entry of new firms or the growth of theindustry. contractual commitments by buyers to sellers are generally respected,especially in business environments.freedom of action has been the hallmark of the first 40 years; its attractionfor innovators is the very factor that breeds fear of its loss. larger computerhardware firms extensively crosslicense their patents, preserving freedom toinnovate in the hardware. to the extent that software copyright does not grantexclusivity to ideas or to function, but only to their expression, that freedom ofaction is preserved, for the software industry as well.but for those inclined to worry about the future there are worries enough.at the practical level, software vendors are using multiple levels of protection:trade secret rights, copyright law, publishing only in hardtounderstand "objectcode," binding users by contract, andšincreasinglyšseeking patent protectionas well. on the face of it, this defenseindepth strategy seems to suggest thatthe firms are less than fully confident that the property protection system isrobust.a second concern arises from the tensions of stretching a system designedfor works of art and literature to works of great value for their utility (as well asoccasional intellectual elegance). is a copyright violated by a product whoseform and function emulate another's but whose code is never identical? is itlegitimate to use a reverse compiler to create source code from a copyrightedproduct shipped only in object code, and then recompile to a different machinea restructured version of the original? how will the notion of "copying" beapplied when a user's inquiry for information from distributed databases incommunications networks momentarily touches small parts of dozens ofseparately copyrighted programs? lawyers are perhaps more comfortable withthe need to stretch and adapt legal precedents to changes in technology than arescientists. this happens in every branch of the law. but many scientists andsome legal scholars see the stretching of patent and copyright law to cover therapidly changing field of software property as a source of discomfort, if not ofserious concern.the third concern is seen by some as a little black cloud on the horizon:the resurgence of patent filings on inventions primarily embodied in software.some may see this trend as offering an alternative to the pressure to distortcopyright law to protect the most creative elements of a program rather than justa boring sequence of hexadecimal numbers. but others ask, with the standardsas yet unsettled for software "inventions," what costs will be added to thedevelopment process when software developers must ensure that theprefacexintellectual property issues in softwarecopyright national academy of sciences. all rights reserved.protected ideas of others have not been independently created by their staffs.they fear that software patents, if not strictly managed by the patent andtrademark office, will be a boon to litigators and a nightmare for softwaredevelopers. still others believe that with so many software inventions already inthe public domain, few patents will withstand challenge, but the costs ofchallenging will be high. perhaps these are just "growing pains" of a maturingindustry, and the gains afforded by widespread use of software patents willmore than make up for the costs. but perhaps not.the fourth, and most important, concern is over the ability of the courtsand the congress to keep up with the pace of technical change. althoughcopyright has proved elastic enough to extend from maps and charts in the 18thcentury to books, works of art, movies, and audio and video tapes, none of thesetechnologies has exhibited the pace of change of software. when computerscientists and entrepreneurs try to understand the rationales used by judges toadapt the law to technical change, they get more nervous still. many caseswhose resolution strikes the layman as fair and judicious are explained inopinions that describe the technology (often by analogy) in ways the scientistscannot easily accept. that judges may not think like computer scientists doesnot mean they make bad law. but it may amplify the concerns of technicalpeople trying to guess where the law is going next. and it motivates legalscholars to try to understand the industry's technical destiny as the referenceframe for evaluating the legal structure on which future decisions will rest.that lawyers and scientists approach this subject differently will surpriseno one. technical people set their sights on the future, probing the limits oftoday's technology and laying the groundwork for tomorrow's innovations.change, surprise, even disruption are not the enemies of science, but rather itspurpose. the law values coherence with the past, predictability, and a broadconsensus. judges and attorneys build on precedent to deal with questionsarising from new technology. in so doing they build an architecture ofreasoning on which the framework for resolving future issues must rest.scientists, engineers, and software designers sometimes question theappropriateness of that architecture for what they see coming in the technology.it is not just legal and technical experts who sometimes have differingviews. the perspectives of academic computer scientists sometimes differ fromthose of software entrepreneurs; legal scholars tend to be more critical of theexisting protection regime than do the litigators and corporate counsel.prefacexiintellectual property issues in softwarecopyright national academy of sciences. all rights reserved.nature of this projectwould a wideranging discussion between computer and legal experts helpto clarify the basic issues that set directions for the future in the field ofintellectual property protection for software?that is the basic question that motivated a workshop held on september12œ13, 1989 (appendix a), and a forum discussion in december 1989(appendix b) sponsored by the computer science and technology board(since renamed the computer science and telecommunications board) of thenational research council. about 100 legal scholars, attorneys, computerscientists, software designers and entrepreneurs, and business and governmentexecutives aired the views that are summarized (with updates as appropriate) inthis report.the forum discussion did not seek to find a consensus, nor did it entertaincollective recommendations. rather, the goal was to foster a commonunderstanding among individuals and groups who have a stake in the issues butwho have had few opportunities to share their points of view. the discussiondid not seek to deal with current controversies, and certainly not with currentlitigation. instead the forum sought to take a step back from the debate andexplore basic conceptsšboth technical and legalšthat are too often obscuredby polemics.the success of the forum, and of the twoday workshop that preceded it,lies in the often expressed view at the end of the meetings that a number ofimportant issues explored there deserved to be engaged by a mixed group oflegal and technical experts in much greater depth. this reflection of confidencethat differing perceptions could be bridged provides a basis for considerableoptimism about the value of this kind of exchange.organization of the reportthis publication is based primarily on discussions at the twoday forumand at the preceding twoday planning workshop attended by many of thespeakers at the forum. it also draws on articles and reports distributed to forumand workshop participants, as well as on other informational materials. theseadditional sources are identified within the text.the following chapters describe the spectrum of legal and technicalperspectives on intellectual property protection for software. chapter 1discusses some of the changing technical, economic, and legal circumstancesthat underlie the debate over the adequacy of intellectual property protection forsoftware. in chapter 2, the underlyingprefacexiiintellectual property issues in softwarecopyright national academy of sciences. all rights reserved.tenets of u.s. copyright, patent, and trade secret laws are described, as areissues that have arisen in the application of these laws to software. chapter 2also discusses international treatment of software as intellectual property. theattributes of software, the nature of the process for designing and developingsoftware, and the relevance of both to determining which elements of softwaremerit protection are examined in chapter 3. chapter 4 takes a closer look atlegal uncertainties, how software firms are responding to these uncertainties,and how intellectual property protection can influence standardization,including ongoing efforts to increase the interoperability of softwareapplications. the final chapter, chapter 5, presents some forum participants'views on how to improve the fit between software and intellectual property law.the primary authors of this report are c.k. gunsalus, associate vicechancellor for research at the university of illinois at urbanachampaign andconsultant to the computer science and telecommunications board (cstb),and mark bello, also a consultant to the cstb. the project was organized byc.k. gunsalus in conjunction with marjory blumenthal, cstb staff director.their authorship was performed under the supervision of the steeringcommittee, which was responsible for the conduct of the workshop and theforum and which expresses its deep appreciation for the work of the staff andconsultants. while the authors and the steering committee members have donetheir best to make this account faithful to the views expressed at the meetingand in other sources, we request that readers not use this document to attributethe views of forum participants who are quoted. please contact them directly forfull and incontext accounts of their views.lewis m. branscomb, chairmansteering committee for intellectual property issues in softwareprefacexiiiintellectual property issues in softwarecopyright national academy of sciences. all rights reserved.prefacexivintellectual property issues in softwarecopyright national academy of sciences. all rights reserved.contents1 changing contexts for the software industry 3 a maturing industry 6 changing technology 9 changing legal context 12 unpredictable future 14 conclusion 16 notes 182 background to basic legal issues 21 copyright 22 expressions, ideas, and functions 24 what constitutes copyright infringement? 27 trade secret 29 patent 31 characteristics of patents 32 what is patentable? 34 test for patentability 35 coherent or incoherent? 37 the international situation 38 notes 413 is software a special case? 43 the process 43 software as a creative medium 48 the influence of the market 49contentsxvintellectual property issues in softwarecopyright national academy of sciences. all rights reserved. symbiosis in the market 50 the case of interfaces 51 evolution of user interfaces 54 where does innovation lie? 55 summary 57 notes 574 a closer look at current issues 59 protected or unprotected? 60 the patentcopyright interface 62 patent problems: structural or legal? 63 compatibility and interoperability 66 open interfaces, a controversial suggestion 68 immediate declaration of rights 69 standardization 70 the influence of intellectual property law 73 withholding of source code 75 reverse engineering 77 conclusion 78 notes 795 the open agenda 81 defining a concept of value 83 legislative ''solutions"? 84 hybrid system for hybrid technologies? 87 incremental improvements to patent system? 89 next steps 90 notes 936 bibliography 95appendix a intellectual property challenges in softwarešworkshop program and participants 101appendix b intellectual property issues in softwarešforumprogram and participants 107contentsxviintellectual property issues in softwarecopyright national academy of sciences. all rights reserved.intellectual property issues in software1intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.the question is whether, as to copyright protection for computersoftware, "the sky is falling." – i submit, "it just ain't so."šmorton david goldberg, partner, schwab, goldberg, price, & dannay[m]y answer to that is, the truth is the sky is falling all around you. itjust hasn't hit you yet.šjerome h. reichman, professor of law, vanderbilt universityi don't think the sky is falling. i think it is sagging in a few places, andprimarily because the law hasn't been properly applied.šronald s. laurie, partner, irell & manellamarketmediated innovation is definitely the way to go, and mybottom line on the intellectual property front is let us not screw it up. theagonizing thing is, i cannot tell whether that means do nothing or dosomething radical.šmitchell d. kapor, chairman, on technology, inc.i thought of concluding today with the adage, "if it ain't broke, don'tfix it." but that does not truly reflect my views, which are stronger thanthat. so, i will conclude with a new adage, "if it ain't broke, don't break it."šhoward g. figueroa, vice president, commercial and industry relations,ibm corp.2intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.1changing contexts for the softwareindustryan idea and a computer. those two items, it has often been said, are allthat is needed to enter the software industry. although this characterization failsto convey the enormous range in the size of software firms, as well as in thecomplexity of computer programs and the underlying design and developmentefforts, it is accurate insofar as it captures the industry's vitality and itspropensity for innovation.indeed, the software industry possesses all the attributes of a vigorouseconomic sector: stiff competition, a diverse mixture of firms, rapid salesgrowth, high rates of commercial innovation, strong performance ininternational markets, and, as the "idea and a computer" adage suggests, lowbarriers to entry. market statistics vary, but they suggest that over the pasttwentyfive years the number of u.s. software firms has quadrupled, and thesize of the product market has been doubling about every five years. in 1990,sales of packaged software alone by u.s. software firms totaled nearly $20billion and accounted for more than 40 percent of the world market(international data corporation estimate cited in u.s. department ofcommerce, 1991); u.s. purchases of "software products" (excluding customdeveloped software) amounted to $35 billion in 1990 according to anotherestimate (personal communication, input, march 6, 1991).given this enviable track record and the outlook for continued rapid salesgrowth, it would seem that the industry faces a bright future. but some see thepath to that future obstructed by uncerchanging contexts for the software industry3intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.tainty over intellectual property protection for software and by the adversarialbehavior that has arisen in this climate of uncertainty. the result, said robertspinrad, director of corporate technology at xerox corp., is confusion, which ishaving a "stultifying, dulling effect" and "slowing down the activity" of firmsbig and small.there are clear signs that legal concerns have become matters ofparamount importance in an industry that, for most of its history, was unfetteredby such concerns. one sign is the recent spate of copyright and patentinfringement cases, in which firms are charging that the commercial fruits oftheir innovative efforts have been unfairly usurped by others. another is theflurry of filings for patents on softwarerelated innovations. until only a fewyears ago, it was widely believed that patents were largely unavailable forsoftware. the result, according to critics of patent protection for software, is afundamental change in the rules that have governed the behavior of softwarefirms. a third sign is in evidence in europe. there, software firms have dividedinto two camps and squared off over a european commission proposal thatwould codify the application of copyright law to software (verity, 1990).diagnoses of the current state of affairs vary widely, as do prognoses ofhow intellectual property concerns will affect the pace of innovation in softwareand the health of the industry. the quotations presented at the beginning of thischapter are representative of the diversity of opinion. most notable about thisspectrum of perspectives, perhaps, is not the viewpoints themselves, but ratherthe fact that in every quarter of softwarerelated activityšbusiness,government, and academiašpeople have strongly held opinions on what andhow rights of ownership should be applied to software.until only recently, intellectual property concerns were limited almostentirely to piracy, or the direct copying of software. independent softwaredevelopers and firms had wide latitude of action, and many software inventionswere believed to be in the public domain, available for all to use and to buildupon. some new software productsšfor example, the first databasemanagement systems, the first fortran compiler, or the first timesharingoperation systemšrepresented major advances. most, however, offeredincremental improvements, such as support for new hardware models,adaptation to a new market niche, or greater ease of use.this environment accommodated independent innovation, in whichdifferent developers created separate products to accomplish the same task. oneneed only peruse the variety of offerings for two of the most common softwareapplicationsšword processing and spreadsheetsšto find evidence of thisphenomenon. the freewheeling atmosphere alsochanging contexts for the software industry4intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.fostered successive rounds of improvement in products with establishedmarkets. for a firm to be satisfied with the performance and functionality of anexisting product was to risk losing market share to a competitor that targeted thesame market niche. the nature of competition in the industry has been suchthat, if there is a perceived market for a particular software product, "someonewill build it, and someone else will, as well," said harry c. reinstein, chairmanand chief executive officer of the aion corp.while many software firms were aware of what intellectual propertyprotection applied to softwarešprimarily trade secret law and copyright lawšthe actions of most firms suggested that legal concerns rarely entered intoproductdevelopment decisions. the collective behavior of firms served toachieve the constitutional aim on which intellectual property law is based: "topromote the progress of science and the useful arts." more specifically, thesoftware industry achieved the intent of intellectual property law, that is, toadvance the public good, an objective widely interpreted to mean the generationand wide dissemination of ideas and innovations.today's legal ferment indicates that software firms are much more attunedto intellectual property issues. and why not? copyright law and patent law existto encourage innovation. both award limited monopolies to those who investtheir resources, effort, and ingenuity in developing products that society maydeem useful. thus intellectual property law offers the potential for privatefinancial gain as an incentive for undertaking the risks of innovation.to francis d. fisher, adviser to the educational technology group at theharvard law school, concerns that innovation in software will diminishwithout strong intellectual property protection seem at odds with the industry'shistorically high rate of innovation. "it is not enough to suggest that theincentives of monopoly are needed," fisher maintained. "we need evidence.we need to shift the burden of proof, so that those who believe that the publicinterest gains from extending property rights to software must prove their case."among those who believe this case is unproven is richard stallman, whosefree software foundation and league for programming freedom provide a testof his conviction that innovation is best served absent prices based oncommercial monopoly.1while fisher may be unconvinced of the need to accord strict intellectualproperty rights to software, the perception that software is vulnerable to abusesby competitors market to earn returns on their investment often devoteconsiderable and users is widespread. firms trying to position themselves in thethought to protection strategies. but in the end, said peter r. schneider, ibmcorp. vice presichanging contexts for the software industry5intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.dent for systems and programming, "this is a crap shoot–. i cannot depend onmy lawyers or the legal system" to identify a single measure that, on its own,will provide adequate protection. as a result, a firm may take advantage of allthe available protections.2 "[i]t is like there is a disease out there," schneiderexplained, "and massive doses of mixed antibiotics are best, because i am notsure which one of them is going to be the silver bullet."the uncertainty that schneider expresses stems from doubts about thescope of intellectual property law and, in particular, how patent and copyrightlaws apply to the innovative elements embodied in a software product. "thecurrent environment is such that you don't know the right thing to do," saidanita k. jones, head of the university of virginia computer sciencedepartment and cofounder of a small software firm. "so, you act in a veryprotective fashion."assertions like those made by jones and schneider raise two fundamentalquestions. why do firmsševen large ones with access to the best legal advicešperceive the need to act so protectively, and why are they unsure of theapplicability of the 200yearold body of intellectual property law to software?some insight into these questions can be gained by examining the changing andoften unpredictable economic, technical, legal, and social influences that areshaping the industry.a maturing industrysoftware is big business, and if forecasts of continued rates of sales growthexceeding 10 percent are accurate, it will become a much bigger businessduring the next decade. japan, the nations of western europe, and othercountries have taken steps to foster the development of internationallycompetitive software industries. not coincidentally, many of these nations arealso wrestling with questions concerning intellectual property protection forsoftware.the economic importance of software has risen dramatically over the lastthree decades. during the 1960s, computer manufacturers provided littlesoftware beyond the operating system, which was necessary to the functioningof the machine. in the mid to late1960s, ibm began "unbundling" softwarefrom its hardware products, and other computer makers followed the exampleof the industry leader. in addition, the service bureaus of computermanufacturers and independent automated data processing firms were majorsources of leased software, as were computer users who developed their ownprograms. the best of the userdeveloped software was marketed and supportedby computer manufacturers.changing contexts for the software industry6intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.these changes sowed the seeds of the software industry. in 1970 u.s.expenditures for software products totaled an estimated $500 million. thatnumber grew to an estimated $1 billion in 1975 and approached $3 billion in1980 (cbema, 1990). in succeeding years, as noted above, sales, the numberof firms, and the number of software applications mushroomed.at some point in the evolution of most industries, annual increases in salesbegin to taper off, and product niches become crowded with competitors. in thesoftware industry, the growing tide of litigation may mark the early stages ofthis maturation process, when firms devote less time to prospecting, begin tostake out their territories, and start prosecuting trespassers. the competitivelandscape fills up.such a scenario is, of course, highly speculative. the general expectationis that innovation and new product development will proceed at a rapid clip. asbruce tognazzini, designer of dozens of programs for apple computer, inc.,said in regard to human interfaces, "you ain't seen nuthin' yet," and hereminded that "little companies are the major innovators out there, still."tognazzini's outlook, with which many software industry analysts wouldconcur, suggests that there is still much new territory for software firms toexplore.nonetheless, the steadily growing number of software firms, both in theunited states and abroad, means that the population of prospectors combing theterrain for new commercial opportunities is also increasing. moreover,established firms have already made substantial investments in developingproducts and building a customer base for those products. for these firms,innovation can have some negative consequences. if an innovation by acompetitor has the potential to supplant existing products, it jeopardizes theestablished firm's revenue stream and, thus, its return on past investments. andfor the established firm to stay competitive, it will have to make newinvestments in research, development, and marketing. even if the innovation isthe established firm's own creation, it may not translate into substantial newrevenue growth. rather, it may help the firm maintain its customer base andavert a loss in sales.startup firms, in contrast, are not constrained by past investments, normust they worry about carving up an existing customer base. in relative terms,startup firms may realize greater returns on innovation than do firms withestablished product lines.compared with the early days of the software industry, explained lewism. branscomb, director of the science, technology, and public policy programat harvard university's john f. kennedy school of government, "there aremore stakeholders, and the stakeholders are generally more heavily investedthan before. large investments prochanging contexts for the software industry7intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.duce new inelasticities in the system. technological changes create conflictbecause they are harder to accommodate."to protect their investments and maintain their position in the market,firms will take advantage of whatever tools are available, including intellectualproperty law. although the law is not intended to guarantee profits, ownershiprights accorded through the law do provide innovators the opportunity to earn areturn on their creative efforts in the market, the ultimate judge of thecommercial value of a particular innovation.eliminate the financial incentive for making software, suggested john f.shoch, general partner at the asset management co., and today's intellectualproperty disputes would disappear, but so would the pipeline of products thatadd new capability after new capability to the computer. "if software had novalue and nobody wanted to buy it, this would be a very academic discussion,"shoch maintained. "it would be a wonderful hobby. it wouldn't be a business,and nobody would care where intellectual property boundaries are drawnbecause no one would be making any money, and no one would bother filing alawsuit."economic analyses provide support for shoch's contention. schumpeter,scherer (1984), and other economists, branscomb explained, have clearlyshown that without some form of temporary protection for inventions, themarket, by itself, "will not support the risks and costs of technical progress."this may be especially true for software, which can require large expendituresfor development but costs virtually nothing to manufacturešor to copy.software's inherent vulnerability to copying seems to underscore the needfor protection that encourages individuals and businesses to pursue new ideasand new computer applications, producing benefits for the larger society. butthe prospect of private gain, intellectual property law's incentive for innovation,spawns vested interests and the inclination for firms to act according to theirown needs, which may not coincide with the public's or even the industry's bestinterests. thus there is also the inclination for firms to wield intellectualproperty protection as a tactical weapon against competitors.there are some indicationsšand even more allegationsšof such behaviorin the software industry. in a recent law suit, one firm claimed that a competitorwas "using its copyrights to hold the computer industry hostage by its licensingand litigation practices" (pollack, 1990). at issue in several pending law suits isretroactive declaration of ownership rights. according to some industryobservers, firms that initially promoted widespread use of particular innovationsto cultivate the market for their own commercial implementations, laterchanging contexts for the software industry8intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.have declared the innovations proprietary and demanded royalties for their use.thus questions about the applicability of intellectual property protection tosoftware must be considered in the context of how firms are likely to use theavailable protection to advance their position in the market.changing technologyas the power and speed of computers have increased, so have the utility,complexity, and, ultimately, the importance of software. advances in hardwarestimulate new rounds of software innovation, resulting in new applications thatexpand the role of software and move the computer toward its projectedincarnation as the universal machine."in every new generation of hardware," branscomb said, "function thatwas previously provided in software is often incorporated in the hardware,where it can be more efficiently executed. nevertheless, as the technologyevolves, new layers of software are developed, which bring new functions to thehardware, and this evergrowing bubble of capability seems not only to beadding new function, but an even larger fraction of the function is deliveredthrough layers of software."one consequence of this evolution is software's growing share of theexpense associated with computer systems. another is difficult questions aboutwhere value, or the intellectual property, lies in software and how best toprotect those elements that surpass a certain threshold of creativity. while onceproscriptions against outright copying of program code might have beenaccepted as sufficient means to address abuses that undermine intellectualproperty rights, today the concepts of value and sufficient creativity requireclarification to guide the application of the law to issues that go well beyond thecopying of code.although these concepts are subject to interpretation, a recognizedcriterion of value is the nature of the interaction between a software applicationand the user. "as time has moved on," explained schneider of ibm, "more andmore of the creative output has been focused on interfaces, and that is simply areflection of the fact that in order to grow in our industry we are spending lessenergy figuring out how to do task dispatching and memory management andmore energy focusing on how to interface with the end user and how to expandthe marketplace."the emphasis on developing software that mimics and complechanging contexts for the software industry9intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.ments the behavior of the human user makes ergonomic factors importantdeterminants of value in software. many in the industry believe that limitingintellectual property protection solely to the copying of code is an inadequatesafeguard for the creativity, as well as the underlying financial investment,embodied in software that, in effect, meshes with the intuitions, needs, andpredilections of the user. while charges of verbatim copying have notdisappeared, software firms are now asking the courts to determine whethercompetitors copied the "look and feel" or "structure, sequence, andorganization" of a software product, despite substantial differences in the codeof the original and competing products. while all courts agree that a program'sfunctionality is not copyrightable, courts disagree on the extent to whichparticular elements of a computer program constitute functional subject matter.interfaces, generally defined as the boundary between two environments,are critical to satisfying user demand for achieving the compatibility andinteroperability of independent software applications. as the web of computersand related information technologies grows, the value and utility of software arelargely defined by its role in some larger systemšby its ability to interface andwork with other applications. as a result, users are objecting to obstacles tointeroperability imposed by the idiosyncrasies of proprietary system interfaces.computer manufacturers and software developers are responding to thisdemand, as the rapid growth of networking attests and the momentum for socalled open systems also grows. but, again, these technological changes arealtering the identity of software and generating new questions, including how toprice software.software applications, according to esther dyson, publisher of thesoftware industry newsletter "release 1.0," are evolving from discrete packagesof functionality into collections of functions that users can invoke individually."software is going to be much more fluid," she said. "you won't know whatcomputer it runs on. you are going to sit at a terminal and ask for a service.where that service gets executed you probably won't know." and during theexecution of that service, dyson continued, functions performed by manydifferent pieces of softwarešresiding perhaps on many different machinesšmay participate in accomplishing a specific task. in essence carrying out a userrequest will create the software equivalent of "going to a prime contractor whouses a variety of subcontractors." such fluidity and interoperability amongsoftware applications will undermine existing pricing systems. ''if i use threepieces of software but only a small part of the functionality of each," dysonasked, "whom do i pay? how do i get charged?"the answers are not clear. "we are not at all sure we know how tochanging contexts for the software industry10intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.control the assets"šsoftwarešonce they are available in a distributedcomputing network, said schneider of ibm. "the free flow through lans[local area networks] says we have gotten to the point where we are not surehow to bill for software anymore." one potential pricing mechanism is anenterprisewide contract, in which software suppliers receive a fraction of clientrevenues. if software pricing is troublesome, so too will be the allocation ofroyalties for its use.even more problematic are questions about the rights of ownershipaccorded to each of the application components that are combined andrecombined to create a customized work of software at the user's behest. today,questions about what constitutes fair use of software elements and whatdistinguishes a derivative work from an original one focus primarily on thebehavior of designers and program implementors. tomorrow, dyson noted,users who create software as a byproduct of running a business (and potentiallya product or source of competitive advantage) will become part of theconundrum.in this fluid environment, the corollary to the question of what elements ofsoftware warrant protection becomes a critical issue. that is, if the goal ofinteroperability is to be fully realized, then the software industry will have todetermine what elements should not be protected, and therefore freely licensed.for example, several forum participants advocated "open" programtoprograminterfaces. objectors to this proposal argued that the decision of whether todeclare an interface proprietary or open should rest with the innovator. thepopularity of a widely used interface should be incentive enough to make itgenerally available. however, software vendors want to be reassured that theydo not lose the rights to the underlying code when they publish the interfaces,and users want reassurances that a royalty for the interface will not be imposedonce its popularity is established and its use becomes a necessity.yet another technological developmentšautomated reverse engineeringtechnologyšhas the potential to complicate the application of intellectualproperty law to software. already available technology can in certaincircumstances decompile, or translate, computer code into a higherlevellanguage, mechanically restructure the program, and generate new computercode that, by appearance, is substantially different from the original. someforum participants minimized the potential for abuses posed by this technology,at least in its current form. branscomb, for example, noted that the technology"works only on clean, wellstructured object [machinereadable] code." therecompiled code, he added, "is still undocumented and will be very hard tomaintain." but if abuses do arise, several legal experts pointed out, intellectualproperty law may not be an effective means of rechanging contexts for the software industry11intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.dress. if the copied version and the original are substantially dissimilar andthere is no evidence of reverse compilation, they said, judges and juries will behard pressed to find infringement.changing legal contextthe constitutional foundation of intellectual property law precedes bynearly two centuries the introduction of computers and software. obviously, theframers of this body of law never anticipated computer software. nor, however,did they foresee such developments as motion pictures, record albums, compactdisks, and numerous other technologies and expressions now protected bycopyright law. to some, the demonstrated flexibility of intellectual property lawstrongly indicates that the legal system can continue to adapt to newtechnologies and to handle questions related to software. unlike most othertechnologies, however, software may be eligible for both patent and copyrightprotection, which introduces a significant source of uncertainty."[p]atent and copyright law have survived as long as they have survived,"maintained frank ingari, head of marketing and development in the spreadsheetdivision of lotus development corp., "because they have shown a remarkablecapability to deal with wave upon wave of technology and wave upon wave ofinnovation and industrial development."those who are confident in the providence of the legal system see today'sintellectual property disputes as the consequence of an inevitable gap betweenthe rate of technological progress and the pace of the law. confusion anduncertainty will diminish, according to this view, as courts resolve today'sissues. ideally, the decisions will yield predictable rules for firms to follow andguideposts for addressing unforeseen issues that are certain to arise with newdevelopments in the rapidly changing field.computer scientists respond, however, with "what about tomorrow'sissues?" many technical and legal experts are not convinced that today'sdisputes are the manifestations of transient legal problems. they are lessconfident in the ability of existing intellectual property law to be stretched toaccommodate features of software that, they contend, are illserved by thetraditional models of legal protection. vanderbilt university law professorjerome h. reichman went so far as to predict that continuing to stretchcopyright and patent laws beyond their traditional scope will lead to"unsupportable restraints of trade and a breakdown of the world's intellectualproperty system."others troubled by the current state of affairs in the software industrycalled for a reassessment. "we need to think again and we need tochanging contexts for the software industry12intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.be willing to question some of the most fundamental assumptions" ofintellectual property law, said randall davis, associate director of the artificialintelligence laboratory at the massachusetts institute of technology.branscomb of harvard suggested that the technical community'sdiscomfort with the law may stem from a seeming incongruity between law andscience. therefore one might question the validity of applying legal precedentsto what many technical experts believe is an unprecedented technology. "it isentirely possible," branscomb said, "speaking from the scientist's point of view,that judges make correct and just findings in each case, while the opinions thatgive the rationale may look to the scientist as though they are stretchingparadigms of early technologies to fit the frame of new ones, perhaps in anawkward way. thus it is not unreasonable to ask, if the courts give us the rightšthat is, fair and justšanswers, based on illfitting models: does that matter?"it does matter, according to stanford university law professor paulgoldstein, if the decisions do not clarify the law. "one of the law's roles insociety is to reduce uncertainty," he said, distinguishing legal risks from theuncertainties of the marketplace, which are inherent to all forms of business. tosoftware industry commentator dyson, clarity and consistency may be asimportant as legal content. "i don't think anyone really cares what the rules areas long as it is clear what they are," she said. "the market can adjust."so far, however, judicial decisions in softwarerelated copyrightinfringement cases have not been consistent, maintained ronald s. laurie, headof the computer law group in irell & manella's northern california office. thissame problem, laurie predicted, is likely to emerge in the application of patentlaw to software."i submit," he said, "that all of the issues that we are familiar with and thathave caused such controversy and emotion in the copyright area concerning'structure, sequence, and organization' and levels of abstraction are going to bereenacted in the patent context of the doctrine of equivalents." (see chapter 2for a discussion of this doctrine.)patent protection, itself, exemplifies how the application of intellectualproperty law to software has changed. following a 1972 supreme courtdecision, gottschalk, acting commissioner of patents v. benson et al. (409 u.s.63, 93 s. ct. 253 [1972]), widely interpreted as rendering software asunpatentable subject matter separate from novel hardware, producers werediscouraged from filing patent claims for their inventions. a 1981 supremecourt decision, diamond v. diehr (450 u.s. 175), however, has beeninterpreted as restoring the protection for software that meets the stringentstandards of patent law. since then,changing contexts for the software industry13intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.the u.s. patent and trademark office has been awarding patents for softwarerelated inventions, and the number of claims filed for patents has beenincreasing steadily.many in the software industry welcome the protection, believing thatpatent law is the proper legal context in which to address some issues that,because of the presumed unavailability of patent protection, were forced intothe domain of copyright law. critics argue, however, that making patentprotection available now amounts to changing the rules in the middle of thegame. some of these critics predict that patent protection will lead to arestructuring of the software industry."we don't have right now a clear notion about the boundaries of eitherpatent or copyright [law]," said pamela samuelson, law professor at theuniversity of pittsburgh. "and we don't have a sense of the relationshipbetween those two laws–. the lawyers out there have radically different viewsabout that, and since they will give advice based on those very different views,we are in for some litigation in the future."unpredictable futurequestions concerning intellectual property protection are a wedge thatopens the door to an even larger and perhaps more complex set of issues thatarise as society proceeds in the information revolution. "we still are in a stageof implementing the obvious in new ways," said ernest e. keet, partner atvanguard atlantic ltd., the connecticutbased merchant banking firm. "wereally still have a long way to go to apply this new technologyšthe computerand software–."today's debate focuses primarily on software as a tool for storing,processing, and presenting textual information in alphanumerical or graphicalform. but tomorrow, the debate will almost certainly be expanded to includequestions about rights of ownership to information itself and to the ideasembodied in that information. and that information will not only be blocks oftext and tables of numbers, but also sounds and images combined and packagedin digital form. the possibilities for new products and service created by freeinginformation from the constraints of analog mediašfor example, sound fromvinyl and tape, and images from photographs, tape, and filmšare seeminglyendless, barely hinted at by such terms as multimedia, hypermedia,infotainment, and edutainment."in the 30 years i have been in this business," said harry reinstein ofaion, "i know of no time that i could have accurately predicted where wewould be in 5 years."changing contexts for the software industry14intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.reinstein is hardly alone. consider a prediction made in the wall streetjournal in a series of futurelooking articles appearing during the mid1960s:by the year 2000, the united states would have about 220,000 computers.compare the reality: in 1990, an estimated 50 million computers were in u.s.homes and businesses. wholly unanticipated by virtually everyone was theemergence of the personal computer, as well as a host of other informationrelated technologies. the more than 200fold difference between projection andreality at the start of the decade leading into the next century is testimony, thewall street journal said 25 years later, that the "electronic revolution hasexploded beyond the dreams of even the most breathless early enthusiasts'visions of the future" (miller, 1989).to a great degree, prospects for realizing the possibilities now germinatingin the minds of scientists, engineers, designers, and investors hinge on advancesin software. if computers are truly to become the universal machine in theglobal informationbased economy that is now evolving, it is software that willmatch the everincreasing computational power of hardware with evermoresophisticated human needs and expectations.for example, many experts believe that the next great leap in the problemsolving capabilities of computers will spring from parallel computing, in whichinterconnected machines, from two to tens of thousands, work on separatepieces of the same problem. although embryonic versions of parallel computersalready exist, the utility of such machines is constrained. "we do not have thealgorithms that allow us to take some dataprocessing problem or transactionprocessing problem and effectively break it up into small pieces and bring 1,000or even 5,000 processors to bear on the problem," explained michael o. rabin,professor of computer science at harvard university and hebrew university.what is needed, he added, are "completely new algorithms." in rabin's view,one potent incentive would be to provide stronger intellectual propertyprotection. he expressed concern that without the incentive of exclusive rightsof ownership, innovators might ignore the need for algorithms, and progresstoward effective parallel computing and its numerous anticipated benefits mightbe impeded. others do not share this view, citing the healthy growth of theresearch community in this area.but a corollary to rabin's assertion, one often raised as an objection to thepatenting of algorithms and socalled softwarerelated inventions, is thatexclusive ownership of innovations grants monopoly power to inventors.monopoly control, goes the argument, may cordon off the rest of the industryfrom building on fundamental breakthroughs. the public, in turn, might notreap the full commercialchanging contexts for the software industry15intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.benefits of major advances until after the 17year period of patent protectionexpires.other issues lurking on the horizon stem from the differing legal treatmentgiven to different manifestations of information. unlike numbers and words,noted francis fisher, images, under existing law, can be subject to rights. yet,property rights in images may be inconsistent with the degree of freedom wewant in communicating ideas that are incorporated in images.images are just the beginning. observed fisher, "we can even foresee thenot distant day when the stuff of communications will include expressions andideas that themselves are intelligent. that is, they will incorporate some sort ofcomputer program. there may then be little distinction between what is a pieceof software program and what is a piece of information on which that programoperates."in business and other realms of human activity where information is thefundamental item of value, notions of what software is will become allencompassing, predicted esther dyson. "the software business is virtuallyeverybody," she said; "it is not a type of intellectual property. it is therepresentation of most intellectual property." increasingly, software defines andembodies business practices, she said. for example, tax accounting and otherprocedures are represented and embodied not just in manuals but also in theapplications that perform them.conclusionthe path into the information age is not well marked, but innovation insoftware is necessary to pave the way and to ensure a steady rate of progress.indeed, software not only sets the pace but also limits it. while the speed andpower of computers double about every two years, software applications thatharness this power for human uses evolve at a much slower rate, creating aneverwidening gap between expectation and reality."[c]ompared to computer hardware," said harvard's branscomb, "softwareis still the achilles heel of the computer and communications industries,responsible for more shipment delays, cost overruns, and user frustrationsšbya mile."branscomb later warned against the complacency that can arise when thesoftware industry's past is used as the basis for projecting its futureperformance. "there is plenty of need," he said, "for new creative ideas, for theskills, tools, and effort to realize software ideas in code that is elegantly andreliably expressed. it is, in other words, not sufficient, in my opinion, to simplysay that because softwarechanging contexts for the software industry16intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.revenue doubles every five years and the united states has a preponderantlyfavorable position in world markets, then everything is therefore as good as iteither could be or should be."intellectual property law figures prominently in the industry's future,setting the rules that guide the behavior of firms and individual inventors.although optima are rarely achieved in real life, the law helps set the coursetoward achieving the goals that are deemed to be in the public interest. amongthese goals, according to branscomb, are encouraging the creation and diffusionof new concepts and ideas, as well as the dissemination of useful innovationsbased on these new ideas; encouraging the development of interoperability andconnectivity in the interest of equitable public access to the fruits of informationtechnology; generating the investments needed to advance the industry and theknowledge infrastructure on which the industry's technological progress isbased; and assuring equitable allocation of the benefits of investment, creativegenius, and hard work in an efficiently functioning marketplace."all of that needs to be accomplished on a worldwide level," branscombsaid, "because software is, of course, a major element in international trade,having not only the feature that it is cheap to replicate but also that it is cheap tocommunicate."at this juncture, wellintentioned people disagree strongly on what legalenvironment is best for the technology, the industry, and, most important, forthe publicštoday and tomorrow. what is clearly needed is balance: balancebetween private and public interest, balance between the need to protect theessence of innovation and the need to share for the sake of compatibility andinteroperability, and balance between the need to foster leaps in the technologyand the need to allow incremental improvements in the existing base oftechnology.the legal uncertainties that cloud the software industry today indicate thatthe proper balance has yet to be achieved. determining where to position thefulcrum of intellectual property law will not be easy. "i can see how tooprotectionist a view could hurt our company," said ingari of lotus, "and,obviously, i can see how not enough protection could hurt our company."added on technology, inc.'s chairman mitchell kapor: "the digitalrevolution has just started. i cannot tell you how it is going to come out. i cansee some of the dynamics. marketmediated innovation is definitely the way togo, and my bottom line on the intellectual property front is let us not screw itup. the agonizing thing is, i cannot tell whether that means do nothing or dosomething radical. so, i am here to sort that out, but i know that the stakes arelarge."changing contexts for the software industry17intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.notes1. indeed, the free software foundation (fsf) uses copyright in the form of a licensing agreementstallman calls "copyleft," but for an opposite purpose: to prevent its software from beingincorporated into a priced. product. fsf work revolves around products labeled gnu, for gnu'snot unix. gnu software can run on unix without being unix and therefore without being subjectto unix licensing constraints (garfinkel, 1991).2. use of multiple forms of protection may also stem from other causes. after all, a homeowner whoinstalls strong locks and a burglar alarm does not do so because of uncertainty about the lawsregarding burglary. however, the uncertainty that prevails in the software industry adds to themotivation for seeking multiple legal protections.changing contexts for the software industry18intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.changing contexts for the software industry19intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.how do you get innovation to happen faster? do you allow peoplereally strong protection of their ideas so that it is worth the effort to takegiant leaps? or do you make protection weak so that innovation can bedone all incrementally?šbruce tognazzini, evangelist, apple computer, inc.we have few phenomena more harmful to technological progress than[legal] uncertainty.špaul goldstein, stella w. and ira s. lillick professor of law, stanforduniversitycopyright does not protect function. it does protect form, and if thetwo are bound together, we have a heck of a problem.šdennis s. karjala, director, center for the study of law, science, andtechnology, arizona state universityuntil we have a clearer picture about the patentcopyright interface, ithink we are going to be in some trouble–. copyright is not supposed topick up for what is to some extent the bad business of the patent system.špamela samuelson, professor of law, university of pittsburghif we continue to stretch these paradigms [patent and copyright law]too far in order to accommodate the subject matters, – i'm afraid we aregoing to have a breakdown and a lot more problems than we think we aresolving.šjerome h. reichman, professor of law, vanderbilt universityif you think you are getting inconsistent and irrational decisions in thecourts now, create a new statute with no precedents and watch whathappens.šronald s. laurie, partner, irell & manella20intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.2background to basic legal issueslike other industries, the software industry operates within a large legalframework of which intellectual property laws are only a part, albeit a crucialone. tax laws, the uniform commercial code, and antitrust laws, amongothers, also regulate the behavior of software firms, and they too can influencethe scope of inventive activity and the dissemination of innovations to the public.most legal debate in the software industry, however, is confined tocopyright, patent, and trade secret laws. that the debate encompasses both thecopyright and patent domains of intellectual property law seems to providesome support for the contention of software developers that their technology isunique. "software is perhaps the first patentable subject matter which is alsocopyrightable," writes duncan davidson (davidson, 1986, p. 1055). "no oneyet knows what this means, if anything." but vanderbilt university lawprofessor jerome reichman questions the historical accuracy of this assertion."industrial designs," reichman said, "are, to varying degrees, covered by bothcopyright and patent laws in all industrialized countries. indeed, efforts tobroaden copyright protection of industrial designs in the period 1900 to 1950and the corresponding tensions this generated seem to anticipate the presenttensions concerning software in almost every respect."under the three major domains of intellectual property law, protection isawarded to software not as a class, explained ronald laurie, head of irell &manella's computer law group, but on the basis of whether a program, language,interface, or other software elementbackground to basic legal issues21intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.''possesses attributes or characteristics that fall into one or more of thestatutorily prescribed categories of protectable subject matter." for copyrightlaw these hallmarks are expressions of ideas embodied in original works ofauthorship. patent protection is awarded for products and processes that arenovel, nonobvious, and useful. trade secret law can be invoked to protect secretinformation that is used by a business and contributes to its commercialadvantage. the extent to which software products satisfy these criteria is, ofcourse, a matter of interpretation, which is where much of the uncertaintyarises. failure to satisfy the criteria means a work is available for all to use.within copyright law and, to some extent, patent law, these broad definingcharacteristics of protectable subject matter may have finer gradations.particularly relevant to software are subcategories of copyrightable literaryworks, such as works of fiction, works of history, manuals, and telephonedirectories. the scope of protection varies according to the range of creativeexpression found in each type of work. (see box 2.1.)copyrightcopyright has been advanced as the preferred intellectual propertyprotection for software in the united states and, with this nation's strongencouragement, internationally. in the 1980 amendments to the copyright actof 1976 (p.l. 94œ553), congress confirmed its intention that copyrightprotection applies to computer programs, but the 1976 revision of the federalcopyright law did not stipulate the manner in which the protection applied.through the 1980 software amendments, and acting on the recommendationsof the national commission on new technological uses of copyrighted works(contu), congress placed software more squarely within the embrace ofcopyright by providing a definition of computer programs. in so doing,congress continued a long tradition of extending copyright protection to newmedia of expression. only books, maps, and charts were singled out in the firstcopyright law, passed in may 1790. subsequent additions to the law includedprotection for musical compositions, photographs, drawings, statuary, paintings,motion pictures, and sound recordings. reichman pointed out, however, thatstatutory authority to protect industrial designsša category that, he believes,corresponds closely to softwarešwas never implemented until 1954, and from1958 to the present, the separability doctrine put forward by the u.s. copyrightoffice "has effectively denied copyright protection to functional 'hightech'designs of useful articles of high technology that have threedimensionalembodiments."background to basic legal issues22intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.box 2.1šlegal protections as islands in theseaof free competitionto give forum participants the lay of the intellectual property lawlandscape, attorney ronald s. laurie of irell & manella used a metaphorbased model to describe the conceptual underpinnings of copyright andpatent laws and their application.intellectual property protections are like islands in a sea of freecompetition– [i]f one is not able to place the fruits of one's investment,ingenuity, or creativity on one or more of the islands, then one is in thesea, and we all know what lives in the sea.the model is, of course, simplistic and imperfect because it assumesthat one can always tell when one is on dry land and one is in the water ofunrestricted competition. in fact, the copyright island, which is low andsandy, has a gradual sloping beach called the merger of idea andexpression. thus, opinion may differ on how far out one has to wadebefore the boundary is crossed; that is, when the water is up to your neck,are you still on the island? this is especially true where the tide (read:inconsistent judicial decisions) varies with the time of day.the patent island is a volcanic island with sheer cliffs rising to acommanding view of the surroundings. but the patent island also has asandy beach, tucked away in a corner. it is called the doctrineofequivalents beach. i think we are going to hear a lot more about this areawith the rising tide of software patents that are being issued and, ofcourse, the consequent flood of software patent litigation.one of the oftencited differences between patents and copyrights isthat patents offer a much more predictable rightšthat patents have claimsand, within certain limits, adverse parties can look at claims and decidewhether they are on the right side or wrong side of the infringement rule.whereas, as we all know, no one knows the scope of a copyright until ajudge tells us what it is, and different judges will tell us different thingsabout the same copyright.i suggest that this reassuring element of predictability in the case ofpatent law is not as sure as you might think.indeed, laurie predicted that interpretation of the doctrine ofequivalents is likely to spawn controversies and appeal to levels ofabstraction akin to those encountered in arguments of substantialsimilarity invoked in copyright infringement cases involving the structure,sequence, and organization of programs."i suggest," laurie continued, "that as we discuss some of the difficultlegal and technical issues, such as the protection of interfaces,communication protocols, and languages, the relevant question is notwhether these areas are generally protectable as a class, but whetherthey may possess attributes or characteristics that fall into one or more ofthe statutorily prescribed categories of protectable subject matter."background to basic legal issues23intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.owners of copyrighted software are awarded exclusive rights to theirworks for varying periods, but typically with a 75year maximum. procedurally,copyright is an automatic protection, conferred as soon as an expression is fixedin a tangible medium, even if the work is never published. registration with thecopyright office is not required, nor is full disclosure necessary. to secure aregistered copyright, the creator of a program need only submit descriptivematerials on the first and last 25 written pages of the work, which usually do notconstitute the entire program.copyright gives the creator control over several activities, includingreproduction, distribution, and adaptation or translation into derivative works.several recent and ongoing lawsuits1 are testing the limits of these rights byraising the issue of what constitutes "substantial similarity," the basis fordetermining copyright infringement.expressions, ideas, and functionscopyright protection is extended only to expressions of ideas, not to theunderlying ideas themselves. this distinction is especially critical for thesoftware industry, where independent invention is common. two designers mayset out to tackle the same problem, each one creating different programs thataccomplish essentially the same task. there are no grounds for copyrightinfringement if neither competitor copied the other's work. the situation is akinto one that might exist for two writers of romance novels, both of whom havethe same general idea for a plot but whose finished works, although comparableat an abstract level, differ greatly in style, character development, and otherliterary aspects.allowance for independent invention distinguishes copyright law frompatent law, which, as is described below, provides protection for ideas at somelevel. thus copyright protection is said to be narrow, or "thin," because itpermits duplication of function, a feature that becomes apparent when oneshops for a wordprocessing program.not all copyrightable works are accorded the same extent of copyrightprotection. artistic or fanciful works are considered to have a broad scope ofprotection by copyright because they are predominantly expressive in character.factual works have a somewhat narrower scope of protection, because the factsand theories they contain are not protected by copyright. works of a morefunctional character, such as architectural plans, recipe books, rule books, andthe like, have traditionally been considered to contain little expression.copyright law has regarded the functional content of such works to be amongtheir unprotectable features, and hence the scope of protection forbackground to basic legal issues24intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.such works has been quite narrow, requiring exact or nearexact copying of theexpressive aspects of the work for infringement to be found.some commentators on software copyright law would compare thecomplex structure of a computer program to the complex structure of novels,and would argue that just as the complex structure of a novel might beprotectable expression under copyright law, so too should the complex structureof a program be protectable. others would argue that the functional character ofcomputer programs would suggest that a narrower scope of protection isappropriate under copyright law on the theory that the design of software ismore akin to the engineering design for a bridge (which a copyright on adrawing would not protect) than to the design of a novel.software's peculiarities have spawned uneasiness in some quarters aboutthe ability of copyright law to provide effective protection , a term with manyinterpretations. indeed, paul goldstein, stella w. and ira s. lillick professor oflaw at stanford university, reflecting on the many changes in the industry,speculated that if contu had had the benefit of today's understanding ofsoftware, that body's recommendations would have been markedly differentfrom those actually made a decade ago.one source of vexation, at least for some, is the dissimilarity betweensoftware and its copyright analogue, literary works. only rarely, for example,are computer programs sold or licensed in a written form even remotelyunderstandable to people other than expert computer programmers. mostsoftware is distributed as machinereadable object code, written as sequences ofnumbers. except for the user interface, softwarešunlike literary worksšdoesnot reveal its expression to the consumer. not all find this objection compelling."the fact that it requires a certain competence to read a computer program withappreciation," anthony l. clapes, ibm's senior corporate counsel, has written,"merely puts computer programs in company with foreign language texts andother specialized literature: the ideas in them are not unintelligible; they simplydo not yield themselves up to those untrained in the language in which the ideasare expressed" (clapes, 1989, p. 143).also grounds for debate is the functionality of software, a property thatfurther blurs copyright law's already fuzzy line between idea and expression.for practical purposes, idea and function are virtually synonymous, fallingwithin the realm of patent law. thus, in theory, copyright law does not protectthe functionality of programs, but rather the expressions that result in theaccomplishment of a given task. but the question of the extent to whichcopyright protects the functional elements software possesses, such as thecommand sequence for footnoting text, the arrangement of graphical symbolsbackground to basic legal issues25intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.on a display, or other behavioral components of a program, will turn on thecourts' judgments as to whether nonfunctional elements have been copied.goldstein attributed the legal uncertainty besetting the software industry tothe "tension between the essential functionality of computer programs andcopyright law's historic refusal to protect functional elements of otherwisequalifying works." morton david goldberg, of the new york law firm schwab,goldberg, price, & dannay, disagreed with this contention. he noted thatcopyright applies to several types of utilitarian works, including maps andcharts. pamela samuelson of the university of pittsburgh contended, however,that copyright law has traditionally not considered maps and charts to be"utilitarian" in character, for they merely convey information or display anappearance. "works that have functionsšin addition to conveying informationor displaying an appearancešhave been utilitarian in a copyright sense, andhence unprotectable by copyright," she said. "computer programs are the firsttruly utilitarian work to be protectable by copyright."copyright law recognizes the "merger of expression and idea," anargument raised in many copyrightinfringement cases but one that seems tohave particular relevance for software. the merger doctrine holds that if an ideais inseparable from its expression, then only one or a few options exist foraccomplishing a specific function. therefore the expression is not protected,and copying is permissible. to do otherwise would grant monopoly control overan idea. here, the machine side of software's dual nature becomes the focalpoint. the ability to do work, it is often argued, entangles idea and expression.if two programs are designed to perform the same function, will not the rangeof expression be limited, dictated by the task? after all, other machinesšcars,for examplešvary in style and detail, but their form is constrained by theirfunction, necessitating many shared features.the validity of the argument that expression is idea in software hinges oncircumstances and, thus, judicial interpretation. in one case, for example, thecourt ruled that duplication of the sequence of datainput formats for astructuralanalysis program did not constitute infringement, finding that thesequence was not expression, but an idea. the merger of idea and expressionalso was found to underlie the similarities in the "sequence and organization" ofcompeting marketing information programs for cotton farmers. in this case,synercom technology, inc. v. unni computing co. (462 f. supp. 1003 [n.d.tex. 1978]), the need to conform with the conventions of the cotton market wasthought to constrain the range of expression. the "merger"background to basic legal issues26intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.argument has also been rejected in many software cases, including those inwhich the issue was not literal copying but nonliteral similarity.what constitutes copyright infringement?until only recently, intellectual property concerns in software were limitedlargely to literal copying. in the 1980s, new issues arose and, with them, adiversity of views on the scope of copyright protection. one boundary on thiswide spectrum of opinion, the minimalist argument, posits that extendingprotection beyond the computer code and perhaps some audiovisual and tutorialfeatures of the user interface will encourage monopoly and stifle competition.maximalists, who reside at the opposite boundary, counter that such limitedprotection will remove the incentive to innovate.although some may align themselves with one view or the other, mostsoftware firms are not likely to endorse either one, preferring a practical viewconsistent with the realities and behavior of the industry. they recognize theneed for programs to work with other programs, as demanded by users. meetingthis need will require using parts of others' software, as has been the industry'spractice for much of its history. overly broad protection would present a majorobstacle, with each effort to create compatibility carrying the risk of a lawsuit. ,however, could create a paradise for free riders, producers of "knockoff," orcloned, programs.some lawyers see the law as steadily evolving to workable compromisethat will accommodate software. in a review of decisions on the protectabilityof the "structure, sequence, and organization" of programs, goldberg contendsthat the "developing body of case law in this area does provide helpfulguidance, and will do so increasingly as more cases are decided" (goldberg andburleigh, 1989, p. 296). in her review of the situation, samuelson draws theopposite conclusion, finding consensus extending only to copyright ability ofcomputer programs. "almost all of the important questions about whatcopyright protection means for software have yet to be answered definitively,"she has written (samuelson, 1988, p. 61).not surprisingly, these two legal experts also disagree on theappropriateness of, arguably, the most influential decision handed down thus faron the scope of copyright protection for software, that of the third circuit courtof appeals in whelan associates, inc. v. jaslow dental laboratory, inc., et al.(u.s. district court for the eastern district of pennsylvania, 797 f. supp. 1222[1985]). goldberg's and samuelson's differences are explored below, with theaim of elucidating some ofbackground to basic legal issues27intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.the disagreements in assessments of the applicability of copyright law tosoftware.at issue in whelan was whether a businessmanagement system developedfor a dental laboratory and written for an ibm pc computer was a copy of apredecessor system that operated on an ibm series 1 computer. the court heldthat "copyright protection of computer programs may extend beyond theprograms' literal code to their structure, sequence, and organization." by thecourt's parsing of the dichotomy between idea and expression, an idea in aprogram is its "purpose or function"; the expression of the idea is "everythingthat is not necessary to that purpose or function." file and data structures, dataflow, and the structure and sequence of screen displays that manifested programroutines were construed as protectable expression.in endorsing the appellate court's ruling that "substantial similarity" ofnonliteral elements of programs can be proof of infringement, goldbergsuggests that limiting protection only to code "would be equivalent topermitting one freely to publish a copyrighted englishlanguage novel in anunauthorized french translation, or to dramatize it or make it into a motionpicture without authorization" (goldberg and burleigh, 1989, p. 301). he alsodismisses arguments that the whelan decision confers protection on all elementsof a program except its underlying idea. goldberg notes that the court based itsfinding of comprehensive nonliteral similarity on its review of data structures,screen outputs, and five subroutines or modules. the court considered thepossibility of "merger of idea and expression" but dismissed it, pointing toevidence cited by the district court that competing, commercially availableprograms had different structures and designs and yet had the same purpose. asevidence that the whelan decision does not imply blanket protection toprograms, goldberg points out that a number of plaintiffs have lost "structure,sequence, and organization" cases decided after whelan.goldberg also concurs with the court's rejection of the view that theincremental nature of progress in software development necessitates somecopying. the court did not see any qualitative difference between progress inthe development of software and progress in other areas of science and the artswhere copyright law applies.samuelson, in contrast, contends that the whelan decision not only takesthe "radical step" of regarding the overall structure of a program, which sheregards as a functional design, to be protectable expression under copyright law,but more radically than that, adopts a test for software copyright infringementthat would recognize everything about a program except its general function orpurpose as copyrightable "expression." samuelson points out that the appellatecourt quotedbackground to basic legal issues28intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.with approval a passage from the trial court decision that described asprotectable expression "the manner in which the program operates, controls, andregulates the computer in receiving, assembling, calculating, retaining,correlating, and producing useful information." such wording, she adds, wouldmake the functionality of a program into protectable expression, ignoringcopyright law's exclusion from protection of processes, procedures, methods ofoperation, and systems that might be described in a copyrighted work.functional processes and designs have traditionally been within the domain ofpatent law, not copyright.finally, samuelson suggests that applying the whelan decision's test fordifferentiating between idea and expression seems to have "swept" algorithms"into the fold of 'expression.'" within recent years, the u.s. patent andtrademark office has begun awarding patents for "method algorithms"embodied in softwarerelated inventions, providing protection for 17 years.however, if the whelan decision is to be taken seriously, copyright protectionand its 75 years of coverage could be extended to algorithms, samuelsonmaintains, "particularly if a software copyright plaintiff's lawyer is astuteenough not to call the algorithm an algorithm, but rather the structural backboneof the software."to samuelson, copyright law's aversion to technology is manifested in theway the courts have chosen to address softwarerelated issues. virtually allcourts have treated software entirely by analogy to literary works, ignoring itsstatus as technology. while acknowledging that certain aspects of software fallclearly within the province of copyright law, samuelson advises that, for thelaw to embrace the technological aspects of software, fundamental changes inthe copyright system would be required. "judges have been blind to the fact thatsoftware is a technology and that progress in the field of technological arts maymore easily be impeded by strong copyright protection than might be the case inthe field of the literary arts," she maintains.trade secreta commonly used protection, trade secrets are often used in conjunctionwith copyright, which serves as a first line of defense in the event that aprogram is "reverse engineered" by a competitor. indeed, the copyright officeaccommodates the software industry's heavy reliance on trade secrets byallowing registration with descriptive, identifying materials that do not revealconfidential information.under state trade secret laws, firms use licensing contracts that stipulateconditions under which software can be used, copied, modibackground to basic legal issues29intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.fied, translated, or transferred. such contractual prohibitions can becircumvented, however, and enforcement problems are magnified by thegrowing prevalence of distributed computing, which makes licensed programseasily accessible to nonlicensed users. the reverseengineering proscriptionsare not necessarily binding on nonlicensed users, a problem with potentiallydisastrous consequences for innovators who rely on this form of protectionalone. unlike machines and other technologies that have a materialmanifestation, software, as already noted, can be disassembled and reassembledinto a form that bears little resemblance to the copied work, thus defeating thetrade secret protection. in addition, a competitor could independently developand then patent a softwarerelated process that a company had protectedthrough trade secret. since patent law does not recognize trade secrets as priorart, the original innovator would be forced either to stop selling the softwareproduct or to license the process from the competitor that holds the patent.sellers of offtheshelf software often attempt to impose agreementsš"shrinkwrap licenses"šupon purchasers opening the plastic wrapper thatencases the disk on which the program is stored.2 buyers are allowed to makearchival copies, but selfexecuting shrinkwrap licensing agreements mayprevent them from copying the program and distributing it to others. to treatprograms sold in volumes of hundreds of thousands and even millions as tradesecrets, according to one commentator, "offends common sensešthe fact thatso much copying takes place indicates how few users take the agreementseriously" (branscomb, 1988, p. 43).software firms are becoming increasingly concerned about the viability ofcontracts applied to large numbers of users. on the one hand, widescaledistribution may render the claim of trade secret meaningless. on the other,there are fears that the "first sale doctrine" will undermine licensing agreements.under the doctrine, the purchaser of a copyrighted work is free to disseminatethat work, although copying is limited to certain prescribed circumstances. suchcircumstances include those cited in the copyright law's "fair use doctrine,"which allows copying for the purposes of research and criticism. bothdoctrines, some observers speculate, could serve as the means to erode thescope of tradesecret protection, as well as copyright protection. anotherconcern is that federal copyright law will preempt state trade secret laws.indeed, in a closely related area, a federal appellate court in louisiana ruled in1988 that portions of that state's shrinkwrap enforcement law are preempted bycopyright law (samuelson, 1988).uncertainty over the legitimacy of shrink wrap licenses hangs over theentire industry, said charles m. geschke, president and chiefbackground to basic legal issues30intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.operating officer of adobe systems, inc. he warned of the potential danger thatcompetitors could "take what i have licensed to them and use it as a weapon tocome back and compete with me by [automated] reverse engineering. that isvery hard, from a developer's point of view, to accept as a really fair form ofcompetition."patentin the 1972 case gottschalk v. benson, the u.s. supreme court ruled thatmathematical algorithms were not patentable, spawning the view that softwarerelated inventions, the essence of which is often an algorithm, were not eligiblefor patent protection. in fact, contu, in its analysis of potential intellectualproperty protections for software, shared this perception and dismissed patentsas an option (samuelson, 1988). a year after congress enacted contu'scopyright recommendations, however, the supreme court opened the patentdoor to software, ruling in diamond, commissioner of patents and trademarksv. diehr et al. (supreme court of the united states, 450 u.s. 175 [1981]) thatthe use of an algorithm does not render unpatentable an invention that wouldotherwise be eligible for the protection (kahin, 1989).the decision in diamond v. diehr, which concerned the patentability of arubbercuring process directed with the aid of a computer program, was hardlyan unequivocal endorsement of the patenting of software. some commentatorssuggest that the wording in the 5 to 4 decision allows the court sufficient roomto reassess the issue in the future. but in the nearly 10 years since diamond v.diehr, the high court has chosen not to revisit the matter. meanwhile, thenumber of softwarerelated patents awarded by the patent and trademarkoffice rose from none in 1980 to about 200 annually in recent years, accordingto estimates prepared for the computer law committee of the state bar oftexas (cited in brian kahin, "the case against software patents," unpublishedpaper, 1989, p. 1).as is true for the copyright ability of software, the patentability ofsoftwarerelated inventions may be viewed as a boon or a bane, depending onone's perspective. a simplified propatent argument holds that the protection ismost appropriate for addressing the technological aspects of software, whileproviding a powerful incentive for innovation. the contrary argument viewspatents as anticompetitive because, unlike copyrights, they do not allow forindependent invention, and as increasing the risk of litigation because of thesecrecy of the patentapproval process.background to basic legal issues31intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.characteristics of patentsa patent provides 17 years of protection to owners of inventionsšworksthat are nonobvious, novel, and usefulšin exchange for full disclosure of theinventions at the time of application. because it precludes independentinvention, patent law is said to provide ''thicker" protection than does copyrightlaw, forcing competitors to "invent their way around" a patented innovation.donald s. chisum, professor of law at the university of washington,maintained that, compared to copyrights, patents are a "nobler" form ofprotection. by "dangling out a reward, the right to exclude others from usinguseful processes and products," he said, the firsttofile requirement and itswinnertakeall result hasten the pace of innovation. even companies with largemarket shares cannot be content to rest on past accomplishments because,according to chisum, they run the risk of being "completely knocked out of themarket by a technological innovation that is developed and patented" by acompetitor. moreover, the disclosure requirement provides competitors with aclear understanding of the inventive hurdle they must leap to compete with thepatent holder, thereby setting the stage for the next round of innovation.unlike the protection provided by copyright law, patent protection extendsto functionality. different implementations of an idea or incrementalimprovements to a patented invention are not eligible for protection becausethey do not satisfy the patent law's requirement for nonobviousness. indeed,such implementations or improvements, if undertaken by a competitor,constitute infringement of the patented innovation. in theory, the monopolygrant awarded to the patent holder fosters more efficient development withinindustry by discouraging duplication of effort.the scope of patent protection is subject to uncertainty, however, in theguise of the doctrine of equivalents, patent law's counterpart to copyright'sdoctrine of substantial similarity. determining whether two inventions aresubstantially similar is a matter for judicial interpretation, and the reasoningapplied in the few softwarerelated cases that have reached the courts thus farhas not always been consistent."courts are essentially schizophrenic about patents," chisum explained."on the one hand, we say that it is the function of the patent claim to delineatewhat is covered. if you don't claim it, you don't have any exclusive rights overit, and yet on the other hand, they [the courts] apply – the doctrine ofequivalents. in some circumstances, something that literally does not conformto the verbal statement in the patent is nevertheless found to be an infringement,and as you can imagine, that is a great source of ambiguity."added ronald laurie, of irell & manella, "i think we are going tobackground to basic legal issues32intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.be hearing a lot more about this area [doctrine of equivalents] with the risingtide of software patents that are being issued and, of course, the consequentflood of softwarepatent litigation."proponents of patent protection for software suggest that some of theissues now being contested in copyright cases stem from the presumedunavailability of the protection following the supreme court decision ingottschalk v. benson. people have tried to "stretch the boundaries of copyrightprotection to fill in for the fact that no one [had] patent protection," said johnshoch, general partner at the asset management co. he cited the current spateof "look and feel" cases as symptomatic of the problems that arise whencopyright law is used to address issues that belong in the domain of patent law."[w]e find ourselves in this tremendous fight about look and feel, andfunction, and interfaces in the copyright domain, which is absolutely the wrongplace to have much of this fight," shoch contended. the proper legal arena forthese issue, he added, is patent law. in his view, the software industry willbenefit if patent protection is made fully available, alongside copyright andtrade secret protection.not everybody sees the emergencešor reemergencešof patent protectionas a positive development. brian kahin, adjunct research fellow at harvarduniversity, argued that the late arrival of patent protection is potentiallydisruptive, suggesting that the virtual absence of patenting until recent yearsmay undermine the highly decentralized structure of the software industry."if software had clearly been protectable from the outset, there would beno surprise, no defeated expectations," kahin has written (brian kahin, "thecase against software patents," unpublished paper, 1989, pp. 8œ9). "but now itappears that the industry may have to be reshaped to fit the patent system andthat the rapid development of software products may have to be slowed to fitthe review, processing, and publication cycle of the patent and trademarkoffice."yet, the nature of software is such that many of its components satisfypatent law's eligibility criteria, laurie maintained, noting the interchangeabilityof function between software and hardware. "if you say that hardware ispatentable and software isn't," he said, "then you are saying to developers and toengineers that depending – on how they resolve the design tradeoff, they mayget protection or they won't get protection" even though they are solvingidentical problems in virtually identical ways. "that is injecting, in my opinion,too many legal considerations." adds ibm vice president for systems andprogramming peter schneider, ''the most disturbing part about patentprotection as it relates to software is that it is an indicator of how fast the legalcommunity changes its mind."background to basic legal issues33intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.what is patentable?what is eligible for patent protection? according to the u.s. supremecourt decision in diamond, commissioner of patents and trademarks v.chakrabarty (447 u.s. 303, 100 s. ct. 2204 [1980]), congress intended patentlaw to embrace "anything under the sun that is made by man"šanything, thatis, falling into any one of the four categories of statutory subject matter:process, machine, manufacture, or composition of matter. among the items notsheltered by the broad umbrella of patentable subject matter are laws of nature,physical phenomena, abstract ideas, "mental steps," and methods of doingbusiness.software clearly qualifies as a humanmade artifact. but the technology'scritical dependency on mathematical algorithms, which patent law views asakin to laws of nature, positions software right at the drip line of the umbrella ofpatentable subject matter. thus the supreme court ruling in gottschalk v.benson, holding that "an algorithm, or mathematical formula, is like a law ofnature, which cannot be the subject of a patent," was widely interpreted asexcluding software from patent protection. in diamond v. diehr, the high courtdid not reverse its 1972 decision, but rather it said the mere presence of analgorithm did not automatically render a process or machine ineligible for apatent. it did not say categorically, however, that computer programs arepatentable. nevertheless, the highest specialized court in the domain of patentlaw, the court of customs and patent appeals (ccpa; the predecessor to thecourt of appeals for the federal circuit), "has held that computer processes arestatutory unless they fall within a judicially determined exception" (u.s. patentand trademark office, 1989, p. 6).using the somewhat equivocal guidance provided by the courts, the patentand trademark office has developed an operational concept of what softwareelements are eligible for patents, giving rise to such terms as softwarerelatedinventions, computer processes, and computer algorithmsša classificationdistinct from unpatentable mathematical algorithms. the upshot, according tomichael s. keplinger, an attorney advisor in the office of legislation andinternational affairs at the patent and trademark office, is that patents are notawarded for computer software. "we grant patents," he explained, "on computerprocesses, processes that may be implemented in a computer, just as they mightbe implemented in a productionline machine or in any other hardwareembodiment." abstract descriptions of computer processes do not qualify,keplinger added. only specific implementations of processes in hardware areeligible.nor does the patent and trademark office's parsing render mathbackground to basic legal issues34intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.ematical algorithms patentable. "we used to say that we didn't issue patents onalgorithms," keplinger explained, "but you can't say that, because any processis an algorithm. it is a difficult line to [draw]šfor a patent examiner todetermine where you draw the dividing line between a purely mathematicalalgorithm, which we won't issue a patent for, and a process that may beexpressed in mathematical terms," which will receive a patent if it is sufficientlyuseful, novel, and nonobvious.to help inventors and their attorneys, the patent and trademark officerecently published a legal analysis that describes a twopart test to determinewhether a product or process containing an algorithm is eligible for patentprotection. the test is the evolutionary product of decisions made by thesupreme court and the ccpa (u.s. patent and trademark office, 1989).test for patentabilitythe first step, determining the presence of a "mathematical algorithm," isrelatively straightforward, although, on occasion, ascertaining whether analgorithm is included in a claim may require some interpretation. thedescription of a mathematical algorithm, defined as a procedure for solving agiven type of mathematical problem, is inconsequential. it may be in the formof a mathematical equation or it may be described in prose. more significant isthe nature of the claim, whether it is for a process or a machine. by themselves,algorithms are considered processes that are ineligible for patents. to enhancetheir chances for securing a patent, some innovators have filed machine, orapparatus, claims that typically describe an algorithm as a means foraccomplishing a task. the label is often not convincing. the applicant mustdemonstrate that functions described in the claim can be performed with aspecific apparatus only. most applicants fail to prove this specificity, and somost machine claims embodying algorithms are treated as process claims.the second step in the test, distinguishing "between patentable process andunpatentable principle," is not free of ambiguity, as the supreme court noted inthe 1978 case parker v. flook (437 u.s. 584, 593; 198 u.s.p.q. 193, 198œ99[1978]). lacking definitive tests for making the distinction, the patent andtrademark office's analysis offers several guidelines that it "synthesized" fromcourt decisions. apparently key to the final determination, however, is thespecificity with which an algorithm is applied to steps in a physical process or,in the case of a machine claim, to physical elements. this implied penchant forspecificity stems from the desire to prevent preempting the use of anbackground to basic legal issues35intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.algorithm in other applications. that is precisely the result the supreme courtsought to avoid in gottschalk v. benson and in parker v. flook, noting in theformer case that "the practical effect" of excluding broad areas of use "would bea patent on the algorithm itself."especially influential here is a ccpa decision in an appeal of a claimdenied by the patent and trademark office, lever brothers company v. thriftdlux cleaners, inc. (u.s. court of customs and patent appeals, 46 ccpa798, 263 f.2d 842 [1959]). in in re abele (684 f.2d 902, 214 u.s.p.q. (bna)682 [ccpa 1982]), the ccpa suggested reviewing a claim without thealgorithm. if the remaining process or machine qualifies as patentable subjectmatter, according to the court, then inclusion of an algorithm should not alterthat determination. this procedure does not suggest, the patent and trademarkoffice stresses, that the inventive merits of the claim be assessed in this manner,since the entire process or machine must be evaluated to determine novelty andnonobviousness.a computer process is not patentable if the claim merely lists potentialapplications. the patent and trademark office, referring to the decision inparker v. flook, classifies such a listing as "insignificant or nonessential postsolution activity." similarly, a process is not eligible if the end product issimply the recording of the results of a calculation, nor is a process that isconfined to assembling data for assigning values to variables in an algorithm. if,however, data gathering is dictated by steps other than the algorithm, then theprocess may be eligible. less ambiguous are processes that transform"something physical into a different form," as compared with those that, bymeans of computation, transform one set of numbers into a different set. thusthe court has ruled as patentable a process that transforms "spherical seismicsignals" into a ''form representing the earth's response to cylindrical or planewaves" (mehmet turhan taner, fulton koehler, nigel a. anstey and michael j.castelberg, u.s. court of customs and patent appeals, 681 f.2d 787 [1982]).such processes have been deemed analogous to the conversion of sound intoelectrical signals or other transformations of signals accomplished withelectrical circuitry.once one leaves the fairly well defined domain of signal transformationand other discretely defined processes, uncertainty begins to intrude. forexample, the patent and trademark office notes that claims can be rejected asnonstatutory if the process represents business methods and mental steps, and"not a true computer process." amplifying this point, the analysis cites a 1977appeal (gaetan de coye de castelet , u.s. court of customs and patentappeals, 562 f.2d 1236 [1977]): "claims to nonstatutory processes do notautomatically and invariably become patentable upon incorporation of referenceto apbackground to basic legal issues36intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.paratus." but closer examination may determine such machineimplementedprocesses to be eligible. indeed, the analysis goes on to say that several casesdecided during the 1970s indicate that "machine or computer implementation ofmental steps is statutory subject matter." thus the ccpa deemed a computerprocess translating natural languages as patentable. indeed, a substantialnumber of people in the software industry would probably concur with thatopinion.grounds for greater debate may be a federal district court's decisionregarding the patentability of a cash management system. if carried outmanually, the system would not be eligible, but in its incarnation as a computerprocess, the system was found to qualify for protection. the court concludedthat the process was not a business method but rather a "method of operation ona computer to effectuate a business activity" (paine, webber v. merrill lynch,564 f. supp. 1369, 218 u.s.p.q. 220 [1983]). this distinction has mystifiedsome in the industry.coherent or incoherent?meanwhile, despite the great effort expended by the courts and the patentand trademark office to elucidate the nature of computer processes, some legalexperts believe that the system can be manipulated to secure patent protectionfor mathematical algorithms. "as long as you don't call it an algorithm," saidchisum, "it is probably going to be patentable as a method, even though itreally is an algorithm." the supreme court decision in gottschalk v. benson, hemaintained, remains as a source of lingering confusion and incoherence, makingsuch behavior necessary. to avoid invoking that decision, chisum explained,patent attorneys "dress up" algorithms ''with language that makes it into amethod or process."mitchell d. kapor of on technology, inc., questioned the "intellectualcoherence" of the patent system as characterized by chisum. "[o]ne's businessstrategy may hinge on legal subtleties that are apparently disconnected fromanything that makes sense to us," he said.another technical expert who fails to see conceptual clarity in the law'sand the patent and trademark office's treatment of algorithms is allen newell,a professor of computer science at carnegie mellon university. in an oftcitedarticle, newell maintains, "the models we have for understanding the entirearena of the patentability of algorithms are inadequatešnot just somewhatinadequate, but fundamentally so. they are broken" (newell, 1986). many ofnewell's numerous criticisms center on the practical utility of most discoverbackground to basic legal issues37intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.ies of computer science, an attribute that distinguishes the field from otherresearch areas. "with rare exceptions," he writes, "scientific knowledge incomputer science is in the form of meansend relationshipsšwhat to do toobtain something of value. indeed this is just the essence of algorithms: what todo to perform a task. but algorithms, far from being an applied part of computerscience, are at the center of its basic theoretical structure."therein lies a problem. it is plausible, newell maintains, that for anyprocess a limited number of reasonably efficient algorithms may exist. to grantmonopoly over these efficient processes would impose a "stranglehold" onadditive inventive activity that would otherwise build on important algorithms.in some technological domains, newell speculates, all inventive activity mayinvolve algorithms, and the entire realm of invention "would come to reside in acomputer.""if methods and processes over large technological domains become anexercise in algorithms," newell explains, "then it is extraordinarily dangerousnot to patent algorithms." therefore, patents for algorithms may indeed benecessary, but that determination cannot be made with existing legal models ofalgorithms, he argues.at the forum, michael o. rabin, a professor of mathematics and computerscience at harvard university and hebrew university, strongly endorsed patentprotection for mathematical algorithms because of their increasingly influentialrole in technology development. algorithms, he said, are human inventions, notdiscoveries, which are unpatentable. incentives and, therefore, protection arerequired to encourage people to aspire to tackle important problems whosesolutions require new algorithms.if algorithms are viewed from this perspective, rabin said, patent criteriathat necessitate linking an algorithm to a specific process or a specific devicewill be found to be too confining. "i have a feeling," he said, "that this is goingto be too narrow," reflecting, perhaps, the time lag between technologicaladvance and legal response. "we do understand devices, linkages, values, anddifferentials, and so on, but we are moving to the edge of information and to theedge where the tools – are mathematical," he continued. "yes –, they areephemeral, but they are all powerful, and i think these innovations –, thesetools, deserve at least as much protection as – the protection afforded to thecap on a softdrink bottle, and so, this is my proposition and my plea."the international situationwith the strong urging of the united states, many foreign nationsšmorethan 40 as of late 1989šhave adopted copyright or roughlybackground to basic legal issues38intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.equivalent protection for software. although a smaller number of countries,including japan, also allow patenting of software, there is growing internationalconsensus that copyright should be the primary means of protection and thatsoftware should be treated like other copyrighted works, according tokeplinger, of the u.s. patent and trademark office.two treaties, the paris convention for the protection of industrial propertyand the berne convention for the protection of literary and artistic property,serve as the basis for international treatment of copyrighted and patented worksand are administered primarily by the un's world intellectual propertyorganization (wipo). most relevant to software is the berne convention,which the united states signed in 1988, thereby supplanting most, but not all, ofthe bilateral copyright agreements it had negotiated with other nations.signatories to the berne convention agree to meet a minimum set of legalrequirements and, more important, to afford "national treatment" to worksproduced by authors in member nations. thus french authors of computerprograms imported into the united states, for example, are awarded the sameexclusive rights of ownership as u.s. software publishers who market theirprograms domestically. conversely, u.s. software exported to france would beaccorded full copyright protection under that nation's laws.keplinger noted that the international conventions do not explicitlymention software. rather, protection for the technology stems from treatywording that applies comprehensively to works of authorship. although awipo initiative to develop a model law specific to the protection of softwarehas not advanced, keplinger said, one can "make a credible argument that theberne convention already requires its members to protect computer programsunder copyright law, because they are generally regarded as protectable subjectmatter by countries that have addressed the problem." (see box 2.2.)nevertheless, copyright laws do vary among nations, creating someuncertainty. keplinger explained that a german supreme court ruling seems torequire "a relatively high degree of originality for computer programs, with theresult that some german lawyers feel that many programs will be ineligible forprotection under this high standard–." france has chosen to classify softwareas an applied artšrather than a literary artšand provides protection for a termof 25 years, compared with 50 years for most other treaty nations. however, theeuropean economic community (eec), of which france is a member, ispreparing a directive on intellectual property protection for software that may(based on the content of drafts) propose full copyright coverage for software,including protection for 50 years.background to basic legal issues39intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.box 2.2šunfair competition lawin many countries, slavish imitation of intangible creations is stillregardedšovertly or covertlyšas a wrongful act in its own right,according to jerome h. reichman of vanderbilt university. thiscontroversial business tort, known as misappropriation, is widelyrecognized in state unfair competition laws, but these laws often conflictwith federal intellectual property protections. as a result, the u.s.supreme court has on several occasions reduced the scope of statelaws. recently, switzerland enacted a new misappropriation lawdeliberately aimed at preventing theft of new technology. this use ofunfair competition law in this capacity has greatly influenced foreignintellectual property law, reichman said, but so far, it has attracted littleattention in the united states.reichman suggested that it might be easier and more effective to addan antipiracy clause to the paris convention (to which more than 90countries adhere) than to "stuff" computer programs into the berneconvention, which governs literary and artistic works. (see text.) thiswould be feasible, he said, if a gatt agreement on intellectual propertyultimately strengthened international arrangements covered by the parisconvention, which covers industrial property.the proposed eec directive, which specifies how copyright protectionapplies to software, contains a controversial measure that, opponents contend,would "drastically limit rivals' ability to decipher software interfaces and buildcompatible products" (verity, 1990, pp. 138 and 140). proponents argue that themeasure would be an effective deterrent to "commercial copying" of software.in december 1990, the council of ministers of the european communityadopted a "common position" on the directive on the legal protection ofcomputer programs, which permits more extensive reverse analysis than earlierdrafts of the directive. the common position would permit decompilation tothe extent necessary to develop competitivešbut themselves noninfringingšinteroperable products. a final directive is expected to be adopted by latesummer or early fall, 1991, after it is reviewed again by the europeanparliament, the council of ministers, and possibly the commission of theeuropean community.meanwhile, japan has excluded algorithms, rules, and programminglanguages from copyright protection, a revision that observers inside andoutside of japan speculate will abet widespread copying. a 1989 decision bythe japanese high court, the first ruling under the amended copyright law, foundthat copying a program's "processingbackground to basic legal issues40intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.flow"šthe court's interpretation of an algorithšdid not constituteinfringement, according to dennis s. karjala, director of arizona stateuniversity's center for the study of law, science, and technology. comparedwith the ruling in the u.s. case of whelan v. jaslow, however, the japanesecourt's decision "did not go nearly as for in protecting nonliteral features ofprograms," karjala said.to assure reasonable levels of protection for software and other forms ofintellectual property worldwide, the united states and other nations haveproposed including an intellectual property code in the general agreement ontariffs and trade (gatt), which has about 100 nations as signatories.incorporated into this proposal are clarifications of the rights accorded toowners of software under copyright law, as well as mechanisms forenforcement, which are lacking in the berne convention. a benefit ofaddressing intellectual property issues through the gatt, keplinger said, is thetreaty's disputeresolution process, which entails convening a panel to determinewhether a member state is living up to its obligations. in contrast, disputes thatarise under the paris and berne conventions are referred to the world court,which does not have enforcement powers. while keplinger said thatinconsistencies and other deficiencies in international conventions forprotecting intellectual property need to be improved, he strongly advisedagainst measures that would deviate from international norms of copyright andpatent protection. abandoning these norms, rather than "finetuning" them, hewarned, would jeopardize past progress in "getting meaningful levels ofprotection for our works and our technology abroad."notes1. lotus development corpporation v. paperback software international and stephenson software,limited (civil action no. 8776k, u.s. district court for the district of massachusetts, 740 f.supp. 37 [june 28, 1990]), for example, addressed this issue in considerable deatil. in october 1990,paperback agreed not to appeal the decision (keefe, 1991).2. the legal status of shrinkwrap licenses is quite uncertain. one school of legal analysts believesthey are clearly unenforceable without the consent of the buyer. others belive this is still an openquestion.background to basic legal issues41intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.what is it that we want to protect? first – is the brilliant invention,the idea, the notion that makes a new product and the insight that makes awhole new industry–.[t]he second thing we want to protect is theinvestment and the hard work. this is the grunt work. this is the pickandshovel engineering that turns the idea, the prototype, into a reliable,distributable, maintainable, documented, supportable product.šrobert spinrad, director, corporate technology, xerox corp.since the industrial revolution we have had copyright to protectprinted works and patent to protect machines made out of iron and steel.the problem is that software is really some of both. it is the firsttechnology that has content.šmitchell d. kapor, chairman, on technology, inc.we have managed to lay down the flooring, so we don't have to standin the mud. but the problem is we are trying to build cathedrals and theceiling is still a ways up there–. every time the floor comes up a little bit,the ceiling shoots up higher because aspirations keep getting higher.šrandall davis, associate director, artificial intelligence laboratory,massachusetts institute of technologywe have some wonderful arrogance in thinking that the world ofsoftware is so much different from mechanical engineering or the newbiological and pharmaceutical disciplines. i, in fact, don't believe that is thecase.šjohn f. shoch, general partner, asset management co.42intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.3is software a special case?for the purposes of the law, the relevant question is not whether softwareis different from other technologies and creative works that now come under theprotective umbrellašit clearly is. rather, the issue is whether software is sodifferent that extensions or modifications of existing legal constructs areneeded. opinions abound on this question. said stanford university lawprofessor paul goldstein, "any time you are dealing with creative artistsšandthat, to an extent, is what you are talking about herešyou are talking aboutpeople who genetically believe their work is different–. [t]he history ofcopyright suggests that those differences will be taken account of." someexperts in patent law echoed that reasoning.not all legal and technical experts attending the forum, however, were asconfident in the providence of the legal system. for example, mitchell kapor,chairman of on technology, suggested that software is so "fundamentallydifferent" from works on paper, the traditional realm of copyright law, that a"firstprinciple reconsideration" of the law may be more appropriate thandetermining "how to stretch copyright." added pamela samuelson, lawprofessor at the university of pittsburgh, confusion about the expressive andfunctional elements of software contributes to the blurring of boundariesbetween copyright law and patent law.the processdepending on whom you ask, software is either written, engineered, built,or grownšeach term capturing some aspect of the process. peris software a special case?43intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.haps the most distinguishing feature of the process, however, is theinsignificance of manufacturing as a component, a factor that underliessoftware's inherent vulnerability to copying."it is all design and no manufacture," explained randall davis, associatedirector of the massachusetts institute of technology's artificial intelligencelaboratory. "reproducing it is trivial. building it – is the hard part. there is nosignificant added effort in building [a multitude of identical products] once youhave built the first one."the process is so different from that in other fields of engineering, duncanm. davidson has written, that it warrants revising thomas edison's famouscharacterization of invention as "one percent inspiration and ninetynine percentperspiration." for software, according to davidson, the proper equation may be"fifty percent inspiration and fifty percent perspiration" (davidson, 1986, p.1062).while those in the field may quibble about the exact proportions of thecreativity and toil that go into a successful software product, they do agree thatboth elements are essential. a "brilliant idea" gives birth to a new product and,perhaps, even an entire industry, xerox's robert spinrad explained, but itspotential cannot be realized without the "pickandshovel engineering that turnsthe idea, the prototype, into a reliable, distributable, maintainable, documented,supportable product."to kapor, design is an underappreciated element of software development,even though it is the primary determinant of a product's value. "i believe moreand more of the economic fortunes of computer companies–[will] depend onhow well designed the programs are, not merely on how well they areimplemented," he said. "[w]e had better worry seriously, if that is the crucialeconomic element, about what we want to do about protecting the design ofsoftware, independent of all the other factors."jerome reichman agreed with kapor and predicted that no longtermsolution to the legal problems associated with protecting software will emergeuntil lessons drawn from the 200year history of design protection law arebrought to bear on this new subject matter, which he calls "industrial literature."yet, the importance of those other factors should not be diminished. anidea, no matter how brilliant, will not reach commercial fruition, spinrad said,without the "detailed work" that goes into making a practical marketableproduct. design and implementation, however, are not separate spheres ofsoftware development. the two activities are interactive.the path that leads from idea to product is usually circuitous, and progresscan be painstakingly slow, as evidenced by the field's apis software a special case?44intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.parent resistance to major enhancements in productivity. in fact, softwaredevelopment entails going down many paths simultaneously, retracing one'ssteps, and starting out anew with a slightly revised objective in mind. danbricklin, codeveloper of visicalc, the first spreadsheet program for a personalcomputer, broke the process down into eight stages, as described in box 3.1."this is a constant iterative process," he said, and testing is nearly continuous."every time you test, you end up changing your design, your constraints [suchas the amount of memory required or the speed of executing an operation], oryour statement of the problem." each cycle results, bricklin explained, in"greater understanding of what you are trying to do.""you can't just specify [a product], give it to a coder, and say it will work,"he added. "you will end up with lousy programs."the seeming circularity of software development stems from a difficultythat exists from the outsetšthe difficulty of clearly defining the problem thatthe product is intended to solve. studies of the process suggest that at least 50percent of the errors that arise during development stem not from codingmistakes, according to mit's davis, but rather from inadequate formulation ofthe problem and incomplete understanding of human behavior."we try to build things," he said, "and we really don't know what they areuntil we start to build them. so, one punch line here is, it isn't the programmingthat is hard; it is figuring out what we're trying to do that is hard."consequently, the problem that motivated the development effort may not befully specified until the final code is written. and even then, future changes areinevitable because customers are bound to discover errors that were not exposedduring testing and debugging, no matter how rigorous the testing. "what we cantest," davis said, "is the match between the program and the specification,which is not at all the same thing as the specifications and what the world is."software development is often likened to architecture, another designintensive activity. kapor noted that both activities are devoted toaccommodating human needs and motivations, as well as to satisfying aesthetictastes. davis pointed to a fundamental difference, however. software does nothave a physical embodiment that can be represented pictorially, as in blueprintsor architectural diagrams. details often cannot be pinned down in advance."there is almost no way to visualize software," davis explained. "sure, wehave flow charts, we have dataflow diagrams, we have controlflow diagrams,and everybody knows how basically useless those are. flow charts aredocumentation you write afterwardšbecause management requires them, notbecause they are a useful tool."is software a special case?45intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.box 3.1šconstant iteration: steps in developingsoftware*specify the problem and define the constraints.the process begins with a general description of the intendedapplication, which then must be evaluated and reevaluated in light of suchconstraints as memory requirements, speed of execution, ease of use,and desired completion date.design externals.determine how the program will interact with the outside worldšusers, input devices, other programs, output devices. will the programinputs, for example, be entered by keyboard or voice commands? howwill data on disk files be handled?design internals.set up the data structure, organize movement and processing of thedata, and identify the critical points of data control, as well as thelanguages and algorithms to be used.transform the design into code.use own existing code or license it from others, when feasible; writenew code. assemble these elements into a prototype program for testing.respecify the problem on the basis of new understanding, and changethe design accordingly.test, retest, and test again.evaluate the prototype's performance with real users and real data.identify bugs and performance tradeoffs. as needed, change the code,design, constraints, and problem description.document for the user.explain how to use the program, how it works, and how to modify it.change the program to improve the documentation, if necessary.package and market.adapt the product, if necessary, to fit the distribution medium, such asa floppy disk or compact disk. prepare manuals. advertise and positionthe product in the market. change the product to accommodate newhardware or to adjust to new market conditions.support the product.as appropriate, create user groups and provide onsite training,telephone help lines, and informational publications. track user feedback,correct bugs, identify incompatibilities, and begin evaluating features toinclude in the next product version.*abstracted from a talk given by dan bricklin, software garden, inc., at cstb'sdecember 1989 forum.is software a special case?46intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.taken together, two attributes ascribed to softwarešthe uniqueness ofeach product and the incremental, additive nature of the development processšappear to be contradictory. ''you use code that worked beforešbags of tricks,"bricklin explained. "you license code from others or use stuff that is built intothe operating system–. you write new code. you tie it all together with allsorts of different types of glue."if the code underlying a specific function, such as methods for searchingdatabases, can be used in many applications, then where does the uniqueness, ororiginality, in a product lie? often, bricklin and others maintained, reusablecomponents require very specific tailoring to be incorporated into newapplications. if cars were built in the same manner, davis explained, the size ofeach screw used in their construction would be different.more important, however, is the composite nature of the product. "mostsoftware is an accretion of pieces of software that have been previouslydeveloped, used in ways the original innovator never contemplated," explainedfrancis fisher, adviser to the educational technology group at the harvardlaw school. "this reassembling of bits and pieces is greatly in the publicinterest. that is how software progresses."thus each new development project begins at a "higher jumpingoffpoint," kapor added, "because there are more layers" to integrate. "but onceyou actually sit down to write your piece, your program, it is still grinding code,and testing and debugging."this peculiarity of software poses a quandary for intellectual property law.a large number of companies are in the business of producing reusable softwarecomponents. this market illustrates the problem of balance: on the one hand,overly rigid protections could undermine a slowly growing foundation ofreusable components. on the other hand, without intellectual propertyprotections, these companies could not exist. although those in the fielddisagree on the depth and breadth of the foundation, software developers wouldlike to exploit whatever experience is accumulating. "you have to be carefulabout protecting [code] that can be used all over the placešvery careful,"bricklin warned. the law, he added, should encourage developers to pursuesuccessively higher levels of innovation, but without preventing them fromexploring and implementing new iterations of existing ideas and methods. ifprotection confers monopoly at too high a level in bricklin's treelike scheme ofsoftware innovation, access to branches leading to new designs and applicationswould be blocked, he said.is software a special case?47intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.software as a creative mediumat its most abstract, software is "the ultimate creative medium," said mit'sdavis. it is, according to davis, "a tangible form of dreams and imagination."yet in software, abstraction and metaphor are embodied within theproduct. the popularity of apple's macintosh computer, for example, isattributed to a graphical user interface that mimics the desktop workenvironmentšin visual imagery, in the behavior of the file folders, trash cans,and other objects depicted on the screen, and in the interaction between the userand these objects. indeed, a major aim of software development is to create userinterfaces in which "electronic reality and actual reality completely overlap andreinforce each other," said bruce tognazzini, who started the human interfacegroup at apple computer. thus software seeks to simulate reality and toachieve cognitive compatibility with computer users, a combination of featuresthat, many software designers maintain, distinguishes it from other technologies.reichman of vanderbilt disagreed with this claim. industrial designers, hesuggested during the forum, would argue that software design is merely oneapplication of advanced techniques that are routinely applied to other innovativeproducts.another hallmark of software is its malleability as a creative tool and,consequently, its nearly unlimited utility. in a technical sense, said mit's davis,"software is the universal machine–. we can really do anything with themachine, and as a consequence, we, in fact, try to do everything with it." theresults are products that enable a computer user to perform given tasks, notunlike, as kapor pointed out, conventional machines made of iron, steel, orplastic. yet, for the purposes of copyright law, software is treated as analogousto a literary work.several software attributes, according to kapor, strain the analogy toliterary works. books and other works on paper, he said, are fixed in form,sequential, noninteractive, uncoupled from the real world, and nonfunctional inthe sense of performing work. in contrast, software is a dynamic compositešanassembly of many different programsšthat, unlike pages in a book, can changeits working order at the beckoning of the user. software, therefore, has achameleonlike identity, as "literary expression that does useful work," kaporsaid. he added, however, that identity cannot be ascribed on the basis offunction, because the tasks performed by a particular piece of software areinvoked at the direction of the user.because of software's underlying fluidity, however, definitionalis software a special case?48intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.schemes can quickly become meaningless, esther dyson cautioned. forexample, she said, the popular spreadsheet program lotus 1œ2œ3 was initiallyviewed as a user application for performing accounting operations. but usershave discovered the broader utility of the software. "it isn't just interactive; it's acreative tool. if you perform a sequence of actions in 1œ2œ3," she explained,"you may end up creating [a new] application. you define the sequence ofapplication actions, give it a namešcall it a macrošand you are suddenlyusing an application as a language, and you have createdšpotentiallyša newpiece of intellectual property within the old one."so, the stuff is very fluid. you can't say this is an application; this is alanguage." therefore, she said, "[y]ou don't want to make rules that apply toapplications versus language versus interfaces without understanding that in theend these might be the very same things."similarly, particular functions can be embodied in either software orhardware, and "in most cases the preferred embodiment will change over time,"said john shoch, general partner at the asset management co. still, eachadvance in hardware has the direct effect of expanding the role of software.because of this continuing evolution, harry reinstein of aion prefers toconceptualize software as componentry incorporated into a neverfinishedproduct. he suggested that very few software products, even the largest ones,are fully independent entities. "we no longer build complete systems–,"reinstein said. "we build components that must, to be useful, work with othercomponents, and that is why the issue of interfaces is absolutely critical to thisindustry." restricting access to software components, he maintained, wouldsuppress innovation, hamper the entry of new firms into the industry, and limitthe utility of software. again, the issue is one of balance. protections shouldprohibit copying of components, he said, but they should not dampencompetitive activity that builds on existing software to develop new applications.the influence of the marketalthough they confer ownership rights that vary in nature, copyrights,patents, and trade secrets are, in part, measures that help ensure the leadtimeadvantage. exclusivity, however, carries a risk, especially if it results in aproduct whose functionality is isolated from that of other offerings on themarket. interoperability, achieved by licensing or by allowing the free use ofprogramtoprogram interfaces, protocols, languages, and other types ofinterfaces, can enhance the value of an individual software offering. it increasesutility for computeris software a special case?49intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.owners who may use the products of several vendors and who, for example,may want one program to generate data that will be processed by anotherapplication. in contrast, a product that is an entity unto itself limits user choicesand, consequently, restricts the size of the product's potential market.therefore the marketplace sometimes provides incentives thatcounterbalance inclinations to be overly protective and to regard all "homegrown" innovations as proprietary. a firm that deems an interface as proprietaryto safeguard against the copying of the application behind the interface may bemaking a tactical business error. instead of protecting the "corporate jewels,"said scott g. davis, senior consulting engineer at the digital equipment corp.,a proprietary stance on interfaces may be "protecting the corporate fool's gold."yet, understandably, the more money, time, and personnel a firm has devoted todeveloping an interface, or the more effectively it has established a dominantmarket position, the stronger its urge to protect the interface for exclusive use.in common with other industries, the software industry can find especiallyprecarious the footing on the tightrope between the need to guard proprietaryinterests and the desire to cultivate a large product market. in the softwareindustry, however, the lack of common understanding of what constitutes aninterface can escalate "normal" problems of contract interpretation when firmsdisagree on whether an interface is open or on the nature of the rights of useaccorded in licensing contracts. in the view of some industry observers, firmshave promoted widespread use of particular innovations to cultivate the marketfor their commercial implementations, but then have reversed themselves bydeclaring the innovations proprietary and demanding royalties for their use.these and other misunderstandings arise, according to a position paper issuedby the association of data processing service organizations (adapso),because of "assumptions that are founded on differing views regarding theextent of intellectual property claims."symbiosis in the marketin the personal computer side of the software industry, the competitiveenvironment has given rise to a new form of business behavior that, accordingto kapor of on technology, should not be jeopardized by legal concerns.when apple and then ibm disclosed the architectures of their personalcomputers, they provided independent software developers with the opportunityto write applications for the machines without entering into a contractualrelationship withis software a special case?50intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.the manufacturers. thousands of software applications were written by thirdparty developers, motivated by the prospect of market success. in turn, thosewho succeeded by writing highquality programs benefited the hardwaremanufacturers by increasing the utility and value of their computers."the economic cost of trying to achieve the same resultšif each and everyrelationship between the software company and hardware company had had tobe negotiatedšwould have been so high that, as a practical matter, it wouldhave been completely impossible," kapor said. all of this innovative, valueadding activity, he added, is mediated through open interfaces, creating a "newindustrial ecology." this style of business relationshipškapor calls it a"nonrelationship relationship"šis a "very good way for pushing the wholesystem forward."this symbiosis is also reflected in the composition of personalcomputersoftware. "if you are running an application–," kapor explained, "you areactually using software that is made by about four or five different companies,each of which is calling the other's interface." but as in all segments of theindustry, developers of applications for personal computers are becomingincreasingly aware of the risk of copyright and patent infringement, whichcould undermine this form of business relationship and reduce the flow ofbenefits it generates for users.the case of interfacesfrom single routines to large compilations of many programs, elements ofsoftware owe their value to their role in some larger system. within a singleprogram, for example, individual routines are interdependent, each one's taskshaped by the functions performed by others. in software systems,interdependency is magnified, as the number of interacting entities multiplies toinclude many different users, many different pieces of hardware, and manydifferent programs, remote and internal.interfaces account for much of the utility and behavioršthe valuešofsoftware and hardware. points of interaction between otherwise independentcomponents, interfaces link machine to machine, software to machine,application to application, and user to computer. as the complexity of hardwareand software has grown and as the push for interoperability has gainedmomentum, the number of interfaces of all types has multiplied, as havequestions about the appropriateness of available intellectual property protections.by design, external interfaces (as opposed to internal interfacesis software a special case?51intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.that interconnect modules within a single software product) facilitatecooperation with the outside world. from the perspective of users, morecooperation, or compatibility, translates into greater value by enhancing thecapability of computers and by expanding access to the software offerings ofmany different vendors. for vendors that have invested in defining interfacesbetween proprietary applications, evolving compatibility poses a quandary.software interfaces are often the product of significant investment, creativeactivity, and engineering effort. to make an interface public is to share thefruits of this work with the entire industry. and to the extent that functions arebound up within an interface, they become vulnerable to copying. however,companies that designate an interface as proprietary run the risk of restrictingthe size of the market for their products.the debate over proprietary interests in program code that expressesexternal interfaces is intense and often divides the industry. those firmsoffering integrated systems solutions to computer communicationsenvironments see component interfaces as crucial elements of proprietary valueadded. those who produce software and hardware components that must attachto and work with complex information systems see proprietary interfaces as abarrier to market entry. thus, even if intellectual property law providesreasonable protection for interfacesšthe subject of a wide spectrum of opinionšbusiness strategies dictate whether a firm will deem an interface as open orproprietary.complicating the situation is the slippery identity of the various classes ofinterfaces (see box 3.2). peter schneider, ibm's vice president for systems andprogramming, joked that interfaces are as difficult to define as pornography."we all know what an interface is," he said, "but none of us will have the samedefinition." what to the original designer is a selfcontained subroutinešandnot an interfacešmay be a convenient point of attachment to the designer ofanother product, who may also want to exploit some of the functions performedby the original.the issue of whether a specific interface should be viewed as proprietaryor, because of its utility to users, as open and appropriate for public use hasmany facets. for example, computer languages function as interfaces in thatthey are used to interpret electronic input and to formulate messages that directa computer to carry out a sequence of actions. obviously, languages have greatutility, but opinion is divided on whether they can be protected by copyrightlaw. a related issue concerns the protectability of specific language phrases, orsequences of keystrokes, that direct a computer to perform a specific function.1for users, copyrighting of keystroke sequences might meanis software a special case?52intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.that commands for the same function will vary from program to program.box 3.2šinterfaces and specificationsan interface is the boundary between two environments. an interfacespecification describes what happens on the "other side" of the interfacewhen certain specified information is moved through the interface; thespecification also describes what the responses might be to theenvironment from which the stimulus came.the specification of a human interface might tell you what themeaning is of what you see on a screen and what will happen whencertain actions are taken. the specification might also describe the kindsof information that can be dispatched from the environment on the otherside of the interface. similarly, the specification of a networking interfacemight describe the format of messages required for sending and receivinginformation through the interface.the key is the specification of the form of information that crosses aninterface, plus a description of the meaning of the information crossing theinterface. the specification says nothing about implementation, onlyinformation and behavior.šscott g. davis, senior consulting engineer, digital equipment corp.issues such as these, said ingari of lotus, have made interfaces "one of thenastiest and most difficult areas" for the software industry to reckon with. andnowhere do the issues become more problematic and more contentious than inthe visual and behavioral domain where machine and human interact, the userinterface. increasingly, the "look and feel" of the user interface is becoming thedefinitive attribute of software: the more intuitive an application's method ofoperation and the more appealing and the more informative its graphicaldisplay, then the better the working relationship between user and software andthe more powerful a tool the computer becomes.user interfaces are also emerging as the primary asset of firms thatspecialize in software development and of those that offer entire informationsystems. "increasingly, the economic value is absolutely inseparable from thatpart of the program that the user directly interacts with and experiences," kaporsaid.debate over what is and what is not protectable in user interfaces hasspawned a rash of "look and feel" lawsuits. the central challenge to judges inthese cases (who will vary in their technical sophistication) is distinguishing theelements of interfaces that are protectableis software a special case?53intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.expressions from their underlying ideas, which should reside in the publicdomain. but some software designers doubt whether the distinction can be made."there is something funny about interfaces in which idea is bound withexpression," aion's reinstein said. added kapor, "the problem is that ourtraditional distinctions between idea and expression, as far as i can tell, alwayswind up tripping all over themselves when it comes to software." and in userinterfaces all of the peculiarities of software as a technological entity aremagnified.the sections that follow provide a brief overview of the evolution of userinterfaces and discuss some of the factors that underlie innovation in thisimportant area of software.evolution of user interfacesuser interfaces have been called the last frontier in software design (foley,1987). as they improve, so does our adroitness in wielding the computer as atool. simply put, each generation of improvements in the graphical display andthe behavior of programs has made computers easier to use.these advances stem from the ability of designers, artists, and engineers toencapsulate useful metaphors in electronic form. perhaps today's best knownmetaphorbased interface is the desktop, as embodied in apple's macintoshcomputer and in several other systems. another successful interface is theelectronic spreadsheet's twodimensional field of rows and columns and itsinternal logic that meshes with the user's natural way of thinking and working.both examples demonstrate the benefits that result when appearance andbehavior are successfully mated in a welldesigned interface. the firstelectronic displays, in contrast, did not achieve this match. according to apple'stognazzini, these early interfaces resembled mechanical teletype machines, butwith an important difference that frustrated more than a few users. "thingscame 'kerchunking' up from the bottom of the display," he recalled, "andeventually kerchunked off into infinity at the top of the display forever–.when somebody wrote a routine that would allow you to scroll downwards, wewere all blown away. by slavishly adhering to a limited metaphor, the originaldesigners had lost a new power that an electronic display could have providedšnamely, downward review and scrolling."although today's interfaces mark a significant advance over the "stoneage" of interactive computing, they too will be deemed primitive by thestandards of the nottoodistant future. the most ambitious developmentalefforts seek to create artificial, or virtual, realities,is software a special case?54intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.threedimensional renderings that simulate actual environments and areresponsive not only to keyboard commands, but also to speech, touch, and eveneye contact. advanced flight simulators, which produce the imagery and"orchestrate the sound, force, and motion that approximate the aerodynamicbehavior of an airborne plane" (foley, 1987, p. 127), serve as an example.industry visionaries predict advances that will enable personal computer usersto make their own animated movies and, in essence, their own artificialrealities. "so, 'you ain't seen nuthin' yet," said tognazzini.where does innovation lie?while creativity, superior design, and sweatofthebrow programmingeffort underlie all good software, highquality user interfaces may rank as thesuperlative example. an embodiment of art, human intuition, and elements ofvarious science and engineering disciplines, interfaces are the products of aprocess that stands out because of the intensiveness and complexity of thedesign effort required to produce what some call "aesthetic functionality."compared with software applications alone, said spinrad of xerox, "thereis a different kind of invention and a different kind of creativity required" todevelop a user interface that complements the way people think. interfacedesigners, he continued, must have the skills of cognitive scientists and a "gutunderstanding of what you can or cannot achieve computationally."tognazzini characterized interface designers as illusionists who,unconstrained by their medium, create their own natural laws. the goal, he said,is to "create an illusion that doesn't break down." that is, the behavior and thevisual appearance of the objects in the illusion created on a computer screen, beit a spreadsheet display or a flight simulation, must mesh perceptually with allapplications that use the interface. "there is a paradox," tognazzini said. "thesimpler the system that you sit down to use, probably the more complex thedesign process that went into it. the more obvious the feature, the moredifficult or creative it was to generate that feature. for example, pulldownmenus and overlapping windows seem like obvious solutions, but they requiredyears and years of careful experimentation and playing before we hit upon them."iteration, experimentation, and research on user behavior and psychologyare involved in the selection of graphical symbols that best represent functions,objects, or ideas on the screen, according to ingari of lotus, who likened theprocess to the evolution of written language from hieroglyphic figures. butefforts devoted to achieving a visualis software a special case?55intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.connection with the user constitute only one element of the process. in tandem,the design team must also work on the "back side" of the interface, conceiving,structuring, and implementing the data structures and other software layers thatunderlie the behavior of the interface and complete the cognitive link to theuser. if successful, the development effort results in an organic work, a mergerof form and function."the original version of [lotus] 1œ2œ3 and its interface required a greatdeal of hard workšhundreds of hours, multiple iterations," explained kapor, codeveloper of the popular spreadsheet program. "it was very nonobvious, and itwas tested on users–. it would certainly require a lot less effort to design aspreadsheet that used the same menu tree because you wouldn't have to gothrough that."ingari maintained that understanding the complexity of the design anddevelopment process will give a "very clear sense of the difference between thepieces of interfaces that should be and will be in the public sphere and thepieces of the interface that must be protected because they represent the essenceof the work that is done to create value." but others were less certain that theinnovation within a user interface can be dissected from the entirety of thework. "we have this problem," said davis of mit, "that the innovation is theexpression, is the value, and they become inseparable."under copyright law, however, some courts have split user interfaces intotwo componentsšthe screen display, which is viewed as a pictorial or anaudiovisual work, and the underlying program, which is deemed a literary work.even though they are embodied in a single technical product, the two copyrightcategories are accorded different rights under the law, explained goldstein ofthe stanford law school. the copyright office has taken the position that "–all copyrightable expression owned by the same claimant and embodied in acomputer program, or first published as a unit with a computer program,including computer screen displays, is considered a single work and should beregistered on a single application form."to kapor, this legal parsing ignores the "organicity" of the user interface,akin to describing the human senses of touch, vision, and speech withoutrecognizing the role of the brain. the user interfacešboth its appearance andits behaviorš"is not separable from the program. it has roots potentially inevery single line of code, in every algorithm–." yet, said reichman, "amerger of form and function is precisely why copyright laws everywhere tendto reject industrial designs. in the united states, this rejection is accomplishedby a doctrine of separability that was applied to industrial art, but not tois software a special case?56intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.industrial literature. this distinction is totally incoherent and ultimatelyindefensible.''the unitary nature of user interfaces notwithstanding, the issues at theheart of pending "look and feel" suits entail disentangling the innovativeelements of products from those elements that do not merit protection because,for example, they are more appropriately viewed as ideas or they do not reachthe legal threshold for originality. for now, these issues seem to lack conceptualclarity. yet, as dyson explained, resolving the legal ferment that surroundssoftware in general and user interfaces in particular requires assigning value tothe elements or combination of elements spawned by creativity and superiorengineering. "this," she said, "is what we want to provide incentives for."summaryis software a special case, different from other technologies in the ways itis designed, made, and used? or, as reichman contended, is it another subset ofadvanced industrial design whose uncertain status in systems of intellectualproperty law has never been effectively addressed?software's characteristicsšboth positive and negativešare relevant toassessments of the adequacy of intellectual property protections for thetechnology. some familiarity with the distinguishing features of software isessential for assessing how well law and technology mesh. likewise,appreciation for the process of creating softwarešfrom idea to marketableproductšaids understanding of how the law can foster or hinder innovation.note1. the lotus development corporation v. paperback software international and stephensonsoftware, limited (civil action no. 8786k, u.s. district court for the district of masssachusetts,740 f. supp. 37 [june 28, 1990]) case addressed this issue at length.is software a special case?57intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.even the possibility that the legal basis for a stable, functionalmarketplace for computer software might be threatened is enough tocreate alarm in the industry, – one of the few hightech industries inwhich u.s. firms still enjoy a commanding position in international trade.šlewis branscomb, director, science, technology and public policyprogram, harvard universityas an attorney, i want to make it possible for him [the businessman] tobe able to get back something on the r&d investment, which today can runmillions and millions of dollars.šj. jancin, jr., counsel, ibm corp.the purpose of the constitution is to protect originality and usefuloriginality. so, if you spend $3 billion doing something fundamentallyuseless, the constitution doesn't really care.šesther dyson, publisher, "release 1.0"[t]here is a stultifying, dulling effectšin some cases subtle, [in others]not so subtleš[resulting from] the confusion that has arisen in this field,which is slowing down activity. it is slowing down the small companies, –and it is slowing down the large companies.šrobert spinrad, director, corporate technology, xerox corp.copyright is procompetitive. it allows the competitor to enter amarket by independently creating, via his own r&d, a competing product.šhoward g. figueroa, vice president, commercial and industry relations,ibm corp.we can be hurt in our company by too much protection or too littleprotection.šfrank ingari, vice president, spreadsheet division, lotus development corp.58intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.4a closer look at current issueslegal uncertainty can take many forms: is a particular software element"prior art" and thus freely available, or is it wending its way through the patentprocess, emerging months from now as exclusively owned intellectualproperty? what protectionšpatent or copyrightšis most appropriate for aparticular innovation? will either one provide adequate protection, or shouldthe innovation remain a trade secret? is the specification of a softwareapplication an idea or is it expression? what constitutes "comprehensivenonliteral similarity"? is the goal of compatibility a legally valid argument foradopting others' ideas and even parts of their implementation? this litany ofquestions could go on and on. the lack of clear answers to most underlies the"stultifying, dulling effect" that xerox's robert spinrad complained intellectualproperty concerns are imposing on the industry.because so many questions are unresolved, according to francis fisher,adviser to the harvard law school's educational technology group, thesoftware industry often cannot predict how intellectual property law applies tospecific types of behavior shown by firms in the marketplace, to concerns aboutspecific elements of software, or industrywide issues, such as compatibility andinteroperability. as a result, fisher said, developers are forced to "gamble onunpredictable judicial interpretation."while the hope is that decisions in pending litigation and in cases yet tocome will eventually yield predictable guides, another outcome might beinconsistent decisions, which could generate in their aftera closer look at current issues59intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.math greater uncertainty and more law suits. a single decision can have farreaching effects, perhaps changing the behavior of the entire industry, and ahasty search for legislative remedies would likely ensue, advised michael j.remington, chief counsel for the subcommittee on intellectual property in theu.s. house of representatives. "if disaster strikes," he said, "bills will beintroduced in the congress that will not be thought through, and we may end upwith another statutory scheme that we may live to regret in the long run."this scenario is, of course, speculative. indeed, one could argue, as didhoward g. figueroa, ibm corp. vice president for commercial and industrialrelations, that such speculation should not obscure evidence indicating that thesoftware industry has prospered under the current intellectual property system.statistical measures show, he said, that the software industry is an increasinglyimportant segment of the u.s. economy, contributing as a "wealth producer andas a tradebalance enhancer.""industrywide in the united states," figueroa added, "the copyrightsystem has worked well, inspiring the authorship of original programs" andengendering "headon competition."yet another perspective suggests it is precisely because of the industry'sstrong performance, as well as because of the growing utility and value ofsoftware, that today's legal issues are regarded with urgency by many. "eventhe possibility that the legal basis for a stable, functional marketplace isthreatened," noted lewis branscomb of harvard university, "is enough tocreate alarm in the industry, – one of the few hightech industries in whichu.s. firms still enjoy a commanding position in international trade."point and counterpoint largely characterize discussions of the adequacy ofintellectual property protection. in the remainder of this chapter, some of theissues fueling this debate are examined in more detail.protected or unprotected?the software industry consists of followers and leaders. the mostinnovative firms open new product areas, creating applications that add newdimensions of utility and value to computers. follower firms, recognizing theopportunity to increase revenues by moving into a new market, respond tocommercially promising innovation by developing products that embodyvariations of the original inventor's idea. sometimes the products of followerfirms are better embodiments of the ideašsuperior, perhaps, in performanceand function or lower in pricešthan those of the pioneering firm. occasionally,a followera closer look at current issues60intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.might introduce a product that is a "knock off" of the original, a mere copy thatmight be altered to avoid the suspicion of duplication.between the extremes of "knock offs" and products that are the result ofmajor leaps in innovation is a vast middle ground where some of the mostdifficult business and legal decisions lie. as discussed in chapter 3, softwaredesigners and programmers often use techniques, data structures, algorithms,and even lines of code developed by others, but for entirely differentapplications. some of these bits and pieces reside in the public domain or, in theterms of patent law, would be recognized as prior art. but the status of otherborrowed elements may not be clear. software designer dan bricklin noted thatdesigners may use elements that they believe are prior art only to find later thatthose elements have been patented. the designers may prevail in aninfringement case, but the cost of pursuing those objections in court can beprohibitive.frank ingari, who oversees software development in lotus's spreadsheetdivision, described the dilemma. he said he has "concerns on both sides ofprotection, as in, 'are my guys using something they shouldn't be using?' whichi have to worry about as much as the other side of the discussionš'am iprotecting what i am developing?'"often the answers to these questions are not clear because of grey areas inintellectual property law. under patent law's doctrine of equivalents orcopyright law's concept of substantial similarity, for example, an independentlydeveloped and arguably dissimilar software component might be deemedsimilar enough to constitute infringement. thus far, developers have littleguidance to help them assess, before investing creative effort and financialresources, the likelihood of such an outcome.without adequate direction on the scope, durability, and application ofpatent and copyright protections, firms may operate on the presumption thattheir products and innovations are vulnerable to theft by a competitor. thetendency may be to rely on trade secrets, and the result, warned esther dyson,will be a "world of stagnation. remember, too, we're talking not just aboutvendors, but about users creating and either sharing or hiding valuabletechnology. without an assumption of protection, we probably won't have, say,shared airline reservation systems, efficient money markets, and so forth."whether lack of sharing and interaction will occur is yet to be seen; in someaspects of the market, a steadily increasing proportion of software sales hasbeen of nontrade secret software.one indication that firms are either wary or uninformed of the protectionaccorded by patents and copyrights can be seen in thea closer look at current issues61intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.results of a survey sponsored by the massachusetts software council.1 about75 percent of the respondents said that they relied on trade secret law, and only25 percent relied on copyright, even though this latter protection applies toworks of authorship, published and unpublished, and can be used in conjunctionwith trade secrets. only 8 percent of the software vendors said they usedpatents. heavy reliance on trade secret law can pose considerable risk sinceinnovations protected in this manner do not qualify as prior art and, therefore,may be eligible for patenting, perhaps by a competing firm.the patentcopyright interfaceif for no other reason, the status of software as both patentable andcopyrightable intellectual property makes the technology unusual. as has longbeen true of some industrial designs in developed countries, explained jeromereichman of vanderbilt university, treatment in both legal domains poses thepotential for a conflict between two conceptually separate branches of the lawšcopyright and patentšat both the domestic and the international levels.stressing the need for a "holistic approach" to the different forms of intellectualproperty protection, john shoch of the asset management co. said that theseeming division of legal perspectives frustrates those within the industry. "[w]e can have a wonderful discourse on the impact and limits of copyright law," hesaid, "and we can have another wonderful discourse on the limits of patent law,and it is right at the edge where things get interesting." treatises on copyright,shoch added, focus on distinguishing between protectable expression and idea,the point at which patent lawyers are likely "to pick up the gaunlet."yet software seems amenable to both protections, sometimessimultaneously. for example, copyright attorneys can argue cogently thatdisputes over the ownership of graphical displays and the sequencing ofcommandsšthat is the look and feel of user interfacesšshould be resolved inthe copyright arena because the issues center on creative expression. objectingto the subjectivity of copyright concepts, such as "look and feel" and "structure,sequence, and organization," patent attorneys argue just as persuasively that theissues can be addressed more concretely by assessing the novelty andnonobviousness of useful processes incorporated into interfaces.a major challenge, according to branscomb of harvard university, is todifferentiate between the "elements of the technology that seem to take you, onthe one hand, to copyright and, on the other hand, to patent." moreover, someelements seem to be "inexorably linked" to both laws, "so that you have tofigure out a way to invoke both sets of principles," he said.a closer look at current issues62intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.patent problems: structural or legal?even the most ardent advocates of patent protection for software find thecurrent patent system to be deficient in some structural and administrative areas.those who question the appropriateness of patents for softwarerelatedinventions include these shortcomings in their appraisals, but only as a startingpoint that leads to more fundamental concerns.university of washington law professor donald chisum, a strongproponent of patents for software, listed six problems in the procurement andenforcement of patents, none of them peculiar to software. the first is theexpense of searching for previously patented inventions as a precautionary stepto avoid infringement and then of preparing, filing, negotiating, and maintaininga patent. estimates of these costs range from about $15,000 to more than$25,000 (kahin, 1989). second is the length of the patent review and approvalprocess, averaging about 30 months, or nearly a year longer than the average forother inventions. during this period, the patent application remains confidential,undisclosed to other inventors who may also wish to patent a similarinnovation. except for the united states, said chisum, every industrial nation"has a procedure for publishing patent applications 18 months after they arefiled." he added, however, that firms compound the delay by waiting too longbefore applying for a patent.the third problem chisum cited is "inadequate examination by the patentand trademark office," contributing to delays and the issuance of patents forambiguous claims. additional training for patent examiners and creation ofadvisory boards composed of representatives from industry and academia couldremedy this deficiency, he suggested. imprecise claims, at the heart of chisum'sfourth concern, ambiguity in the scope of issued patents, in turn spawn lawsuits.chisum said there can constitute a fifth problem, "arguably groundless suits, insome instances financed either by attorneys on a contingencyfee basis or bysimply going out and openly raising money from investors to speculate on theoutcome of a patent suit against a major company." completing his list ofshortcomings, chisum noted that patent enforcement is country specific, aproblem for companies selling products in international markets. not only mustfirms seek patents in each nation where they sell their product, but they alsomust conform to procedures and requirements that vary among countries. forsoftware firms this variability is especially problematic, because not all nationsextend patent protection to software.while chisum sees these problems as affecting all technologies, othersview the consequences as more severe for software. an overa closer look at current issues63intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.riding concern is the danger of being blindsidedšof pursuing an innovationthat may already be patented or that may be in the patentreview pipeline. thefirst difficulty, according to dyson, publisher of "release 1.0," could beassuaged with a "meaningful, automatically updating electronic database thatcontains information on patented technologies." currently, searches of patentliterature are errorprone exercises, incurring a high risk of overlooking relevantsubject matter because of the fragmented, disorganized state of patentinformation. the second issue, that of losing out to a competitor whoseapplication was submitted earlier, is more problematic because of the short lifecycle of software products. thus the competitor who loses out on a patent hasthe option of licensing the innovation from the patent holder, if that optionexists, or of foregoing the next generation of the productdevelopment cycle.eventually, claims brian kahin, the rapid rate of innovation in thesoftware industry will be slowed to conform with the pace of the patent reviewand approval process. more worrisome to kahin and others are the combinedeffects of the approval of overly broad claims and the scope of patentprotection. software innovator bricklin, creator of the original spreadsheetprogram, visicalc, believes that the combination could be "very bad for theindustry," antithetical to the industry's propensity for "frequent independentinnovation." had patents been available when he and his collaborator developedvisicalc, bricklin speculated, their company, software arts, would have soughtthe protection. the consequences of such a decision, he further speculated,would have been to prevent other innovators from exploring differentexpressions of the spreadsheet idea and to handicap the competition, blockingthe development of today's successful spreadsheet programs, such as excel andlotus 1œ2œ3. the consequence of foregoing a patent in this hypotheticalsituation, however, would be to eliminate a sizable source of revenues. "thereare not many," chisum said, "who will say, 'i knew i could get a patent worth$200 million, but i think i will pass it up this time'"; in fact, chisum added, thepotential for such a loss strikes fear in the heart of most companies and shouldmotivate them to file for patents promptly, thereby resulting in timely disclosureand hastening the pace of development.several forum participants were unwilling to dismiss the awarding ofpatents for overly broad claims as simply a structural problem that will diminishas the patent office becomes more experienced with softwarerelatedinventions and as rulings by the district courts and court of appeals for thefederal circuit (cafc) clarify issues pertaining to the patenting of software.to them, such patents have the potential to inflict longterm damage if they areupheld by the courts.a closer look at current issues64intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.the evidence, though limited and often circumstantial, suggests that thecourts will look favorably on at least some of these claims. for example, in acase cited by fisher (magnavox co. v. activision, inc., 848 f.2d 1244 [fed. cir.1988], the courts held that activision, the maker of a video game in which ananimated track runner fails to clear a hurdle and knocks it down, infringed on apatent (licensed exclusively to magnavox) on the idea in software of having oneobject hit another, causing it to move.patents have been granted for products or softwaredirected processes thatsome believe do not satisfy the patent law's criterion of nonobviousness, eitherbecause they are too abstract or are merely descriptions of ideas that are alreadyin the public domain. such objections have been raised over patents issued forfootnoting, redlining (text comparison), merging of documents, and otherprocesses. extrapolating from these instances, kahin anticipates that patentswill eventually be awarded for automated methods of performing commonbusiness practices and for interactive learning techniques. it remains to be seen,however, whether the courts will uphold patents based on broad claims. as arule of thumb, patent attorneys estimate that the cafc, which has jurisdictionover appeals of patent decisions made by the district courts, upholds about halfof all patents. even if the courts to find an ambiguous software patent to bevalid, however, it is not certain whether they will rule that a competitor'sspecific implementation of ideas expressed in a patent constitutes infringement.to mitchell kapor of on technology, this waitandsee attitude isunsatisfactory, inserting more uncertainty into an already uncertain legalsituation. waiting for rulings on the validity of broad claims, he said, creates asituation akin to the "greenhouse effect," the controversial projection of globalwarming due to growing atmospheric concentrations of carbon dioxide andother heatabsorbing gases. "the sense that i have now," kapor said,acknowledging opinions to the contrary, "is that we face, potentially, somedisasters from inappropriate software patents."if the software industry's "greenhouse effect is real," he continued, "thenwe have a very, very, very serious problem, disrupting the activities of large andsmall companies. [d]oing nothing and letting matters work themselves out inthe courts seem to be unwise." at this stage, according to chisum, only a fewgeneral trends that have unfolded under the relatively recent influence ofsoftwarerelated patents are discernible. "we will see more procuring ofpatents," he said. "we will see more licensing and then eventually litigation."chisum's scenario is suggestive of conditions that already exist in thehardware industry, where patents and licensing are a regulara closer look at current issues65intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.part of doing business. most manufacturers of computer hardware maintain aportfolio of patents, which are crosslicensed with the portfolios of majorcompetitors. typically, a manufacturer will require access to other firms'innovations to make a product, and yet that same manufacturer will hold patentsessential to competitors' products. in making an integrated circuit, for example,a semiconductor manufacturer may use technologies patented by 20 companies.because of this interdependency, patents on hardware only occasionally impedethe productdevelopment efforts of established firms. but startup firms, lackinga patent portfolio of sufficient size and, therefore, the associated leverage forbargaining with competitors, are likely to be at a disadvantage.2if patenting becomes as pervasive in software as it is in hardware, kahinpredicts that the software industry will undergo rapid consolidation. "althoughcrosslicensing allows efficient, competitive exploitation of patents in industrieswhere there are relatively few firms of roughly similar size," he has written,"crosslicensing will not work for the many thousands of small firms and tens ofthousands of individuals in the software industry, because these small playershave little or nothing to bring to the table. the vision of crosslicensing as asolution to the problem of software patents implicitly assumes a wholesaleshakeout and restructuring of the industry" (kahin, 1989, pp. 9œ10).not all small software producers agree with this prognosis. indeed,presidents of six californiabased software firms painted quite a differentpicture in a letter to the new york times: "by making an invention thetemporary property of its inventor, patents become the lifeblood of smallinnovative technology companies. it [patents] lets them attract investors andgives incentive to improve the property, educate the market, and market theproduct. without patents, an entrenched competitor can merely wait for othersto innovate and incorporate innovations into its products only when inventionsare proved and market share is threatened" (gaspar et al., 1989).compatibility and interoperabilitywhile it is clear that the public interest is served by industry behavior thatyields a wide variety of highquality, reasonably priced software, it is also clearthat consumers want to be freed of the constraints of incompatible proprietarysystems, which prevent them from realizing the full fruits of the diversity ofsoftware offerings. after purchasing a vendor's system, users often discover thata particular set of needs would be best served by applications designed to run ona closer look at current issues66intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.another proprietary system. precisely because of this variability in the utilityand quality of software applications, organizations may purchase hardware fromseveral different vendors. incompatibilities, however, prevent users fromexchanging the results of applications between unlike machines or from usingthe same graphical display on different machines or with different softwarešunless they make a hefty investment in systems integration.underlying the crescendo of user demand for compatibility is a facet ofsoftware use that, apart from its technological and design underpinnings,distinguishes it from other media, such as paintings and literary works. oncethey become accustomed to the look and feel of an interface, users would ratherstick with the same interface than use a different one for each new application.for works of art, in contrast, such imitation would be regarded as offensive, aswell as make for dull art museums. in addition, aion's harry reinstein pointedout that once users have selected a computer operating system or a databasemanagement system, they are, by analogy, committing themselves to oneartistic genre, a specific user interface.a parallel situation in book buying was hypothesized by reinstein. ''if ibuy a mystery story," he said, "i will forever limit myself to buying mysterystories with that set of characters, that major detective, and, therefore,presumably that author. that is exactly the situation in which we find ourselvesin commercial software. by and large, if you buy an operating system you don'ttrivially change it."demand for interoperability arises from the usefulness, or machinelikenature, of software, rather than its aesthetics. for machines, compatibility is awellrecognized virtue. "it is in the public interest that the brakes and clutch ofan automobile be in the same relative position on every car we drive," fisherexplained. "yet under existing law, one who holds the rights to a computerinterface may find it in his interest not to share that interface with others onreasonable terms. not sharing interface designs will be particularly appealing toa rights holder that already has a substantial share of the market."recognizing the importance of compatibility and interoperability as aselling feature, most vendors now participate in standardssetting organizations,seeking to foster the agreement on standards that complement their productsand their development and marketing strategies. the process of settingstandards, however, is a delicate one, as described below. while nurturingcompatibility, standards also present the risk of freezing technology at apremature stage. once in place, standardsševen bad onesšare hard to change,perhaps resulting in costs that exceed the benefits of interoperability. thus,factored into the complex calculus of protections for software musta closer look at current issues67intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.be considerations of how the law accommodates or inhibits interoperability, aswell as flexibility in changing standards in tandem with technological advances.open interfaces, a controversial suggestionbuilding on the notion that software is unfinished componentry, part of alarger system. aion's reinstein advocated that all interfaces be classified as"open." noting that ideas are often an inseparable part of the interfacedefinition, reinstein said, "the simplest, most disentangling position i can takeis let us just not protect interfaces. let us invest in the expression of themunderneath, and have that be the protected part" of the software product."interfaces are legitimate points of competitive entry," and ''openness" is a"critical element of software competitiveness," he said.copying of interface code, including automated reverse engineering,should not be allowed, he explained. rather, the implementation should belicensable, and the specification of an interface should be available for others toimplement independently. third parties would avoid the cost of developmentincurred by the innovator, reinstein acknowledged, but they would have toinvest in writing the code to support the interface.those opposed to a flat declaration that all interfaces should be openmaintain that the decision of whether to make the specification publiclyavailable is a choice for firms to make. in addition, objectors contend thatnearly all elements of a program, including those that connect subroutines andother internal parts of the program, can be construed as interfaces.consequently, an openinterface rule would render all expressions within aprogram vulnerable to copying and to misappropriation of the program'sfunctionality. copyright protection, say those who object to the notion of openinterfaces, would become meaningless. it is therefore not surprising thatindustry views on this issue are very strongly held, because the commercialinterests at stake are perceived as vital by many firms.addressing these latter concerns, reinstein defined three categories of"public" interfaces. the first category, and least controversial one, includesinterfaces that innovators, perhaps motivated by marketing considerations, havedeclared to be open. in his second category, reinstein places interfaces that are"clearly discernible through normal use," a characterization most relevant touser interfaces. this is a determination for the industry to make, he said, but ifthere is "general agreement" that a user interface, particularly its appearance,fits in this category, then it should be available for others to use or emua closer look at current issues68intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.late. finally, interfaces that are "separately priced, separately distributed, orseparately packaged" (a language or database management program, forexample) are legitimate points of competitive entry, and they should beclassified as public, reinstein said.open interfaces, concurred scott davis of digital equipment corp., wouldfocus competition on providing "better implementations of standards. that iswhere the competition can be, and a better implementation may meansomething like improved performance, or it might mean security features" thatare not offered with other implementations.vanguard atlantic's lee keet was among those who faulted the proposal."i generally agree," he said, "that the utilitarian aspect of the interface should beopen for all to use, but i do point out that, in many cases, interfaces have –artistic aspects," which warrant protection.immediate declaration of rightsthe association of data processing service organizations (adapso) hasbeen considering a proposed sevenpoint set of guidelines to clarify whetherinterfaces and languages are public or proprietary. "declarations or waivers ofproprietary interest in an external interface or language," the proposedguidelines recommend, "should be made specifically and separately, and on atimely basis." among the problems that would be eliminated with industrywideadherence to this general rule would be disputes that arise when claims ofownership are delayed and, in the interim, firms presume that use is condoned.esther dyson, while stressing that protection should be accorded only tosoftware elements that meet "high standards of originality," also endorsedimmediate declaration of ownership rights. "[t]he job of the vendor is to definehis product, to define what he considers to be original, and to sell that. thechanges you are seeing in software mean that specification is almostindistinguishable from the implementation. that is why you need [a highstandard of] originality, because if anything you specify ends up beingprotectable, you have a mess. but you can't just protect the implementation –[when specification and implementation are] transformable into each other."uncertain of the practicality of such an approach, pamela samuelson of theuniversity of pittsburgh explained that firminitiated declarations of originalityand ownership would be inimical to the procedures required for securing apatent. patent law, she pointed out, requires owners to show that an innovationsatisfies the conditions necessary for protection. particularly for softwareelementsa closer look at current issues69intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.that have features that seem to fall in the gap between copyright and patent law,"i don't think the right solution is – just to say it is your property, and theneverything will work out," samuelson said. "in the angloamerican tradition,the government, through its patent and copyright laws, defines the kinds ofinnovations that are eligible for protection, the criteria that must be met toqualify for protection, and the extent of protection the law will give to theinnovation (both as to duration and as to scope). if you don't follow theprocedures, you don't qualify under the criteria, or the thing you want to protectis considered by the law to be unprotectable; in general, the innovation can befreely copied by competitors, whether the innovator likes it or not."concerns about the lenght of protection afforded by patents (17 years) andcopyrights (50 years or more) were expressed by several forum participants,who preferred terms that reflected the rapid pace of development in theindustry. to assure that important innovations are available for others to buildon, a few suggested that mandatory licensing of patented and copyrighted worksbe required after an initial oneor twoyear period of exclusive use. and to spurdissemination of innovations and to encourage firms to offer their besttechnologies as industry standards, some participants recommended thatstandards bodies allow the innovators of standards to receive royalties in returnfor use of their technology. some of these bodies now make no or lowcostlicensing a condition for adopting a technology as a standard.standardizationby one estimate, more than 1,000 standards pertaining to computerrelatedtechnology have either been adopted or are pending before national andinternational standardssetting bodies (gantz, 1989). this high level of acitivityis symptomatic of snowballing consumer demand not only for compatibility ofinformationrelated equipment, but also for interoperability of software,allowing independent, perhaps geographically isolated applications to workcooperatively.unsatisfied with the computer sector's progress toward these ideals, groupsof users are nudging vendors toward standardizationšsometimes forcefully.general motors and other manufacturing concerns organized to develop themanufacturing automation protocol, or map, which specifies the standards thatvendors of software and informationrelated equipment must conform to if theywish to sell their products to consortium members and other firms that arefollowing the map lead. another large customer, the u.s. department ofa closer look at current issues70intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.defense, continues to forge ahead with its 16yearold effort to impose auniversal computer languagešadašon its suppliers.given the intensity of user wants, companies face a "real risk of beingbypassed by the marketplace by being too restrictive in authorizing the use ofthe expression in [their] protocols," ibm's figueroa explained.yet standardization can be a contentious affair, influenced to some degreeby the nature of intellectual property protection. companies jockey to have theirway of doing things accepted, formally or informally, as the industry standard.losing a standards "battle" means either that a firm will be forced to jettisonpart or all of its particular approach and to begin anew, or that it can proceedwith its proprietary technology, hoping to convince users that the merits of itsapproach exceed the benefits of compatibility. moreover, as already mentioned,a firm that has invested heavily in developing a new technology may balk at theprospect of making freely available an innovation that, if made a standard,could make other companies more competitive.in the international arena, national interests can undermine formalstandardization efforts. with each participating country accorded an equal vote,members of international standardssetting bodies may endorseimplementations that are perceived to be most beneficial to regional businessinterests. compromise is difficult, and if it is reached, the resultant standardsmay be based on inferior technology. this danger, however, is also present innational standardization efforts.users tend to favor standardization because it allows them to choose fromamong the offerings of different vendors, freeing them from the idiosyncrasiesand, thus, incompatibilities of proprietary systems. in turn, compatibility fostersthe growth of computer networks that, at the beckoning of the user, canintegrate applications unhampered by worries about which vendors made thevarious software elements needed to solve a specific problem and whether thenecessary elements can work together. from the vantage point of individualsoftware products, compatibility greatly increases value because of socallednetwork externalitiesšthe benefits that accrue to being part of a larger system.therefore small companies are also likely to be proponents of standardizationbecause their product lines rarely attain the critical mass of offerings necessaryto address the majority of user needs. compatibility affords the opportunity tocompete by adding value in areas neglected by dominant firms. large firms, incontrast, provide a diversity of products that, in effect, already compose anetwork. thus the benefits that accrue with compatibilityšprincipally,expanded marketsšare likely to be smaller for compaa closer look at current issues71intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.nies that already have significant shares of the market. "the gains you get frommaking your market a little bigger," explained stanley m. besen, senioreconomist at the rand corporation, "may be relatively small compared to thelosses you get by making your market more competitive."in theory, standardization reduces redundant variety and inefficiency. "wemight be better off with fewer things created if they were more widelydisseminated," besen said. "the idea is not to maximize the number of things,but to maximize the value of the things that are created, and that might, in fact,involve fewer things that are more widely disseminated." without standards,firms may engage in strategies that result in spurious differentiation of products;innovation may be devoted less to adding value and more to creating differencefor difference's sake.once an industry agrees on a standard, firms can focus their research anddevelopment efforts on areas that are said to be "on top" of the standard, whereinnovation is likely to produce greater functional benefits. in other words,standards are like a foundation upon which innovation can build. "what youwant to do," said scott davis, senior consulting engineer at the digitalequipment corp., ''is build on what somebody else has built and not reinventwhat was on the bottom."but variety also has positive attributes that can be erased bystandardization. the primary argument against standardization posits that it mayfreeze technology at a premature stage of development. standards should not beregarded as the final "best solution, but as temporary rigidity," advised estherdyson, publisher of "release 1.0." "they are like the san andreas fault. theyhold things together for a while, but underneath and around and ahead of thestandards, things are changing. you don't want to ratify standards so stronglythat they prevent progress–. so, standards are not forever. standards getsuperseded."in fact, added davis, standards are rarely the best solution to a particularneed, even when they are new. "standards tend to be leastcommondenominator kinds of solutions," he said, "so that you are not able to take fulladvantage of the underlying system, the underlying implementation." in thecase of de jure standardization, part of the reason why standards fall short of thetechnological optimum stems from the need for compromise among the manyparticipants in the process. in the case of de facto standardization, the candidatethat prevails may be the product of chance occurences, or the decision may bedictated by the actions of a dominant firm. in either situation, the resultantstandard is not necessarily the best of the options available.a closer look at current issues72intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.the influence of intellectual property lawalthough easy access to innovations and widespread dissemination ofideas are generally recognized goals of intellectual property law, it does notnecessarily follow that compatibility, a means to achieving these goals, is alsoan aim of the law. indeed, the courts have been somewhat equivocal in theirhandling of the issue. in apple computer, inc. v. franklin computer co. (545f. supp. 812 [e.d. pa. 1982], aff'd. 714 f.2d 1240 [3rd cir. 1983]), in whichfranklin was found to have copied apple's operating system, the court ofappeals for the third circuit found the copyright infringer's compatibilityargument less than compelling."franklin," it said, "may wish to achieve total compatibility withindependently developed applications programs written for the apple ii, butthat is a commercial and competitive objective which does not enter into thesomewhat metaphysical issue of whether particular ideas and expression havemerged."in another case, e.f. johnson co. v. uniden corp. (623 f. supp. 1485 [d.minn. 1985]), the federal district court in minnesota was more sympathetic tocompatibility concerns. at issue was whether the uniden corporation copiedthe software in the e.f. johnson company's mobile radio system and, in sodoing, infringed johnson's copyright. uniden contended that it copied onlythose elements necessary to achieve compatibility. duplication of one elementof johnson's software was necessary to achieve compatibility, the court found,but "virtually all other aspects of the defendant's [uniden's] program could havebeen independently created, however, without violence to defendant'scompatibility objective." the court ruled that uniden did violate johnson'scopyright, but the decision suggests that copying is permissible when it is the"only and essential means of creating" compatible software."the issue of whether the mergerofideasandexpression defense shouldprevail in cases involving the need for compatibility is an important one," besensaid, "especially for software."not everyone agrees, however, that software compatibility is an overridingneed, dismissing this claim as a guise for abetting widespread copying ofsuccessful products. john shoch said he regarded as "specious, even pernicious"the argument that an innovator whose product holds sizable market share mustsurrender his intellectual property to competitors. for a competitor to assert thathis program must be compatible with the market leader, who, therefore, "mustlose some of his protection – ," he said, "is the silliest thing i have ever heardof. the fact that you have been successful does not, by definition, expose you tothat loss of your rights."a closer look at current issues73intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.promoting compatibility may make business sense, shoch said, but thedecision of whether to pursue this strategy should rest with companies, not withthe law.intellectual property law, however, does influence the pace at whichsoftware compatibility and interoperability evolve in the industry, as well as thenature of the standards that are adopted. "standards are a strategic tool [that]can be used to [a firm's] advantage or disadvantage," besen said. themagnitude of either one is determined in large part by the scope of protectionfor the standardized technology.with weaker protection, which makes it easier to adopt parts of another'sinvention, "participants' interests are more closely aligned," access to thestandardized technology is not impeded, and competition is more likely to bewithin the standard, joseph farrell, a professor of economics at the universityof california, berkeley, has written (farrell, 1989, p. 16). strong protection forthe standardized technology, in contrast, would force competition intoincompatible channels. such a situation could either foster spuriousdifferentiation of products, or it could push product development into newdirections, resulting in socially useful innovations. in his paper, farrell furtherelaborates on how intellectual property protection influences standardization,suggesting that copyright may impede the process because of its presumedaversion to function:[s]ince copyright protection is broadest where the expression is mostarbitrary, useful innovations may go unprotected while arbitrary choices ofuser interface, for instance, may be held to be protected and may generate largerents if they become de facto market standards.in the case of traditional creative works, such as novels, protection of anarbitrary creation does not constrain later innovators. if the first innovator'schoice of expression is "arbitrary," she could equally well have made any of anumber of other choices, and it might seem to follow logically that a laterinnovator's options are not unduly constrained: he need only avoid consciouslydoing the same as the first innovator, and this might not seem undulyburdensome. indeed, in a traditional "decreasingreturns" economy, he willprefer to avoid direct competition with the first innovator, and would have nomotive to imitate except for the wish to save costs by slavish copying ratherthan performing independent work.but this argument fails to hold in a market characterized by dynamicincreasing returns, such as market externalities. then, the mere fact that aprevious innovator used a certain arbitrary expression, and customers havegrown used to it, makes that arbitrary expression an important and no longerarbitrary aspect of design. although, ex ante, english could just as well havebeen written righttoleft as lefttoright, a publisher who tried to introduce thatconvention now would surely fail.left unanswered in this analysis, however, is the recurring question of howto distinguish between useful innovations, ideas, anda closer look at current issues74intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.creative expression. in the copyright area, for example, controversy surroundsthe granting of protection for the "look and feel" and the "structure, sequence,and organization" of programs. critics of the decision in whelan v. jaslow, forexample, argue that the decision awarded protection for an idea, not theexpression of the idea. because of the presumed unavailability of patentprotection for software, say others, the court was forced to rely on copyrightlaw to address a matter of software functionalityš"structure, sequence, andorganization"šthat is more appropriately an issue for patent law. meanwhile,as the number of softwarerelated patents mounts, there are fears that broadideas, rather than useful innovations or embodiments of ideas, are being grantedmonopolylike protection. making the waters even murkier is the lack of clarityin court rulings on whether firms can adopt elements of competitors' software toachieve compatibility.withholding of source codein his book the mythical manmonth, frederick p. brooks, jr., a professorof computer science at the university of north carolina at chapel hill andformer ibm project manager who directed the development of the operatingsystem for the ibm system/360 line of mainframe computers, extols the virtuesof comprehensive, easily understood documentation of computer programs.such documentation, brooks writes, tells the program's "story to the humanuser" (brooks, 1975, p. 164). moreover, "the intimate availability of the sourceprogram, line by line, to the reader of the documentation makes possible newtechniques" (p. 169).brook's essay preceded by nearly a decade his former employer's decisionto adopt what was becoming the standard practice of shipping software productswithout source code. it was a difficult decision, according to ibm's peterschneider, and not only because of its perceived negative impact on users.schneider noted that many of the improvements ibm had made in its softwareand some commercially successful products were, in effect, developed by thecompany's field force and its customers. "the opportunity to do that is nowprecluded," he explained, "because to build those products they had to haveaccess to our source code, and we no longer allow source code out of ourlaboratories."these costs notwithstanding, ibm perceived the need for a "safety netšnamely, going to object code only and more restrictive contract terms andconditions"šas more compelling, schneider said. "the reaction to becomemore secretive because of the uncertainty of the legal system was a prudentbusiness decision."a closer look at current issues75intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.the fallout from this nearly industrywide decision has materialized inseveral forms. for example, advocates of no or, at most, weak intellectualproperty protection for software have argued that the withholding of sourcecode vitiates the analogy between literary works and computer programs, thebasis for extending copyright protection to software. if software products arenot delivered in a humanreadable form, the argument goes, the expression isnot revealed to users, and copyright protection is not warranted.users most affected by the denial of source code are those who would liketo adapt or customize vendorsupplied software to their own peculiarcircumstances or to changing organizational needs. in some instances, vendorswill acquiesce to those needs and supply the source code, but only after they areconvinced of the integrity of clients' security measures and restricted conditionsof use are stipulated in a contract. this compromise solution, however, does notwork for all customers, including one of the largest, the federal government.as part of its "data rights" requirement, the federal government generallyrequires software vendors to relinquish the source code along with the productsthey sell to the government. unconvinced that, in using the source code for itsown purposes, the government would not jeopardize their trade secrets, manycompanies have refrained from doing business with federal agencies, accordingto anita jones of the university of virginia, who was one of the founders of asmall software firm that made such a decision. other firms have taken adifferent tack in addressing this concern. they withhold their most advancedtechnology and sell to the government only hardware and software that are notthe state of the art and therefore are cause for less concern if inadvertentlyrevealed to competitors.this practice is not limited to small business, jones asserted. "some verylarge companies that sell both hardware and software," she said, "have separatedivisions to do business with the government –. [these firms] do not givethose divisions access to their best technology–. they phase their commercialdivisions into the government divisions as the technology and themanufacturing plants age. i submit to you that that is not in the public's interestand a major reason for that is the government's stance on data rights."universities are also hampered by the withholding of source code, jonesmaintained, contending that distributing object code only "inhibits the flow ofideas in the university research community. without source code, and barringreverse engineering of programs," she said, researchers cannot "get themaximum benefit out of new ideas that are in the form of software. that is theonly form that is maximally useful."a closer look at current issues76intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.through contractual arrangements, some companies will supply sourcecode to scientists, allowing them to make alterations and to experiment withnew applications. but contractimposed restrictions often prevent researchersfrom sharing this altered code and the resultant innovations with their peers,jones said. as a consequence of these actions, the industry is handicapping theability of universities to contribute to software research and development, sheclaimed. "the universities have fed the hightechnology software business to avery large and rich extent, and i don't like to see any constraints on that," jonessaid.the introduction of trade secret law into the academic environment inconnection with software and other new technologies can have seriousconsequences for the traditional academic mission, reichman maintains."university professors are habitually slow to consider that they may haveillicitly borrowed software solutions covered by proprietary rights," he said."copyright law can magnify the ensuing difficulties because it is a field inwhich innovation occurs through sequential and cumulative improvements, andevery researcher making use of another researcher's prior art can expose himselfto potential liability for infringement or at least to litigation, absent explicitauthorization for use."others at the forum questioned whether rigid restrictions on thedistribution of source code were inimical to copyright law's fair use doctrine,which permits copying and, perhaps, reverse compilation for research and othernoncommercial purposes. contractual stipulations, however, might block therights normally afforded by the fair use exception.reverse engineeringcopyright's allowance for independent development provides a safe havenfor follower firms. for some firms, this safe haven takes the form of a "cleanroom,"3 a means of avoiding charges of infringement or at least improving thechances of prevailing against such charges. a firm that desires to copy the ideabut not the expression of a competitor's program can isolate its programmers,providing these workers only with a description of the software application theyare to emulate. outside the clean room, other workers may study the manualand other documentation provided with legally obtained software, and they mayobserve and test the original program while it is running on a computer. thesebenchmark test results and observations are used to assess the performance andfunctionality of code written in the clean room. code that does not achieve thedesired level ofa closer look at current issues77intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.functionality may be returned to the clean room, perhaps with a more detaileddescription of the problem, for modification.this description applies to the purest form of the clean room concept, andit is the software industry counterpart to reverse engineering in industries thatmanufacture machinery, including computers. in hardware industries, reverseengineering is a common practice, but makers of machinery must not onlyfigure out how the targeted product works, but they must also determine how tomanufacture it and develop the necessary assembly process, all of which cantake substantial amounts of time and money. similar investments inmanufacturing and technology are not required to reproduce software products.the "purity" of the software clean room is determined by the level of detail inthe information that is passed into the room: the more detailed the informationš"chunks" of code from the target program, for examplešthe more suspectthe process may become and the more likely the clean room program will besimilar to the original.the great temptation in developing software, of course, is to use reversecompilation technology, which, as ibm's figueroa explained, "facilitates thelowcost adaptation of the protected expression in the original program,resulting in the quick and cheap generation of a competing program. thus, theprogram creator has his lead time erased, his price undercut, and his marketreduced for the very thing he created."according to schneider, also of ibm, reverse compilation and subsequentchanges in code, data structure, or other components can yield a program that,although the product of illegal copying, bears little, if any, provableresemblance to the original. if the designers and programmers of the originalwork find it difficult to determine whether a program is a copy, as schneidermaintained is often the case, then judges, who are not schooled in thetechnology, may have an especially hard time assessing whether a program is aderivative work and, therefore, infringes on the original.conclusionideally, explained francis fisher, incentives, or the monopoly rights thatserve as the "carrot" to induce innovation, will yield "access to goods andservices, including ideas and expressions, for a price that is as close to cost aspossible–. monopoly profits beyond those needed to cover costs are not in thepublic interest." thus an effective intellectual property system should contributeto efficiently operating national and international markets, and at the same timefairly reward investment, creative genius, and hard work and drive firms to pura closer look at current issues78intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.sue successive rounds of innovation. but it cannot do so unless the costsassociated with unsuccessful risks are included. it is the risk in creation, not thecost of production, that intellectual property protection must reward.yet in the real world, optima are rarely achieved, forcing a pragmaticconsideration that recognizes that a productive balance between protection anddissemination is a shifting target. "what bad behavior will be tolerated," askedbricklin, "so as not to throw out the baby with the bath water?" measurescrafted to address one wrong, such as automatic cloning of programs, couldhave the unintended, negative consequences of inhibiting independentinnovationša common occurrence, according to bricklin, in softwaredevelopmentšor of discouraging other desirable aspects of the behavior ofinnovators and investors.even if the existing framework of intellectual property law is eventuallydeemed satisfactory, clarification of the scope and applicability of both patentand copyright law was described by forum participants as a critical need. "whatwe are looking for," said john shoch, "is a consistent and unified way to dealwith the issues of software and intellectual property." because such a holisticperspective, one that provides a comprehensible set of guidelines for investorsand software developers, does not now exist, more litigation is a prospect forthe software industry. according to several legal experts at the forum, that is analmost absolute certainty. but the likelihood of more legal disputes should notbe surprising, given the inevitable lag between the rate of technological advanceand the slower pace at which the law responds.notes1. results of the survey were reported in "release 1.0," august 21, 1989, 898, p. 3.2. paraphrase of comments made by gordon moore, chairman, intel corp., at the may 1989 cstbcolloquium on competitiveness.3. in this usage, clean room is a metaphor for a software development workplace uncontaminated byfamiliarity with the expression of a competitor's product. in the manufacture of semiconductors,great expense is taken to isolate workers from contamination by minuscule amounts of dust. hencethe metaphor.a closer look at current issues79intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.if you limit protection, you are going to end up in a world ofstagnation and trade secrets.šesther dyson, publisher, "release 1.0"the bottom line is that we decided to invest in software developmentas a separate business, and we based our decision to put significantresources into that business on the expectation that we could protect theexpression in our programs from copying.šhoward g. figueroa, vice president, commercial and industry relations,ibm corp.saying it is okay to do nothing because things will work out strikes meas analogous to the response given by the man who jumped off the top ofthe empire state building. when asked as he passed the 50th floor, "how'sit going?", he replied, "so far, terrific." so cautious, thoroughgoinginquiry seems to me to be really justified here.šmitchell d. kapor, chairman, on technology, inc.i am appalled by the crudity of the discussion right now in theindustry around what is interface and what is functionality. i think that weshould do a whole lot more worrying about the way these expressions andthe way this creativity break out in pieces and in components.šfrank ingari, vice president, spreadsheet division, lotus development corp.there has to be some way of recognizing the economic value andimportance of existing standards, conventions, and user interface models,and yet be able to build on it at a reasonable cost.šrobert spinrad, director, corporate technology, xerox corp.80intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.5the open agendathe aim of this project was to advance the state of knowledge and thequality of the public policy debate on intellectual property protection issues forsoftware by bringing together an array of interested parties. this area oftechnology remains in rapid transition, and there are not simple solutions to thecomplex problems it presents. while a broad analytic structure remains a futuregoal and a worthy objective of public policy research, the twoday forum whosediscussions are summarized here was an important step in aiding thecommunications among the technical and legal experts who often use differentvocabularies and have conflicting problemsolving approaches.1software is evolving from a technology originally conceived as a flexibleand inexpensive mechanism for controlling computer hardware to products thatembody the functional processes and knowledge base of entire industries anddominate the costs of computer usage. thus the intrinsic value of software,apart from its form of expression, is hard to quantify, but it is rapidly growingand constitutes the asset end users as well as software vendors seek to protect.a snapshot of the current technology shows evidence of the evolution ofthe field, with different strands overlapping. that picture reveals that part of theenterprise resembles the highly experimental and entrepreneurial situation of 25years ago, complete with computer hackers, developers producing "freeware,"and highly innovative individuals working in isolation. at the same time,however, it also reflects a major industry dedicated to building reliable, wellmainthe open agenda81intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.tained software for the efficient execution of wellestablished applications.software users cover an equally broad range, from millions of novice users togiant corporations whose software expertise rivals (and sometimes exceeds) thatof their software suppliers.with as much diversity and heterogeneity as are found in this sector, itshould not be a surprise that discussions involving intellectual propertyprotection for software should generate great controversy and complicateagreement on a national policy agenda. the questions involved in the debatešwhat to protect, how to protect it, and for how longšcall for value judgments ina large community with few shared values.because software is so malleable, representing information in many forms(images, sounds, data, and words) and providing the means for creating as wellas transmuting and transmitting it, there was little agreement except in generalterms on how to describe the values embodied in software. thus there is lessagreement on what aspects of software should, in the public interest, beprotected as personal or business property. complicating the discussion furtheris the absence of unambiguous technical or legal definitions of some of the keyterms of the discussion, for example, a software interface. not only did thetechnical and legal experts use the word very differently on occasion, but eventhe experts also used the term slightly differently, depending on theirprofessional perspective or segment of the industry.software is of great economic and functional value to society. it isimportant that software protection not be thought of as an end in itself, butrather as a part of the incentive structure leading to the creation, diffusion, anduse of software innovations. differences of opinion over software protectionshould not be seen as a battle between opposing economic interestsša struggleamong vendors and between them and their customers. rather, the pressingissues revolve around the incentivesšand disincentivesšthat are provided forcreativity, for entrepreneurial risk, for quality services to end users, and for astable, competitive marketplace.few would deny that the pace of software innovation and the growth of theindustry attest to the strength of the incentives and the adequacy of safeguardsto date. the question is whether technological and legal developments in thefuture will combine to enhance or undermine those incentives and safeguards.at the root of the debate about software protection is not the preservation of theproperty rights of its creators, but the extent to which protection of those rightswill promote innovation without retarding technical progress or inducing in themarket an instability that might deprive software users of good service as wellas new capabilities.the open agenda82intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.just as technological change affects the evolution of legal principles, soalso will legal rulings affect the manner in which technical progress unfolds.for technological reasons, progress in computer hardware has been even morerapid than that in software for many years. thus, in spite of extraordinaryindustry growth, software costs and complexity have become the pacing factorin the implementation of many worthwhile applications. at issue now iswhether legal developments will widen or narrow the software bottleneck toprogress.while recognizing that questions arise at the margins of copyright andpatent law, several legal experts advised that the current level of uncertaintyshould not be interpreted as proof of the inadequacy of either body of law. ''oneof the factors that is operating here," goldberg suggested, "is perhaps aphilosophic discomfort with things or concepts that can't be easily pigeonholed– in the fashion of binary digitsšbeing eitheror." he continued, "it is thenature of the legal process that it develops. it cannot be handed down fromcapitol hill with pristine purity and crystalline clarity in its application to allcircumstances for all time."indeed, most should not be and some cannot be. automated reverseengineering and recompilation techniques, for example, may be used to createderivative products that offer the same functionality as the original software butare so dissimilar in appearance and structure that even the most astute judgesand juries will be hardpressed to identify illegal copying. the answer to thatproblem may be technological, such as "fingerprinting" or otherwise identifyingthe source of derivative works. or it may be the fact that products created thismay be more costly to maintain and evolve than is original software createdfrom scratch. yet other important questions fall squarely within the realm of thelaw, or into the gray area between accepted business practices and law.different views exist on how best to proceed.defining a concept of valuelotus's frank ingari struck a responsive chord when he asserted the needto define for software a concept of value that can serve as a lens for evaluatingintellectual property issues. too little discussion, he maintained, is devoted todetermining what to protect and why."we are sort of at the secondorder discussion already," he explained. "iscopyright better? what is good for the industry? what is good for the thirdworld? everybody is taking positions on what is good for whom, and i don'tsee much discussion of what we are trying to protect in the first place."the open agenda83intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.esther dyson, publisher of "release 1.0," concurred. "the real issue hereis defining intellectual property," she said. "we can work out what the law doesif we can define the stuff that we are trying to protect.'' dyson advised,however, that the value of different software components will change as thetechnology advances, making value an evolving concept.initially, she said, "virtually the only thing you wanted to protect insoftware was the code. then we got into the 'look and feel issue.' as we moveon toward objectoriented code, we are going to have these modules offunctionality that are specifically designed to be reused. but the people whodesign them are still going to want to protect them, charge for them, and so weare going to have a much more complicated problem in the future, – when bitsof software have to work together."before deferring intellectual property matters to lawyers, it was suggested,software firms may be better served by first determining what elements ofsoftware are most beneficial to users, the ultimate judges of value. "i amappalled by the crudity of the discussion right now in the industry around whatis interface and what is functionality," ingari said. "i think we should do awhole lot more worrying about the way these expressions and this creativitybreak out in pieces and components."establishing a common understanding of software, as both a functional,marketable good and as the product of a complex design and engineeringprocess, serves two necessary purposes. first, it provides perspective on wherethe value, or intellectual property, lies in a particular piece of software and,therefore, on what elements warrant protection. second, a broadly acceptednotion of softwarešone that embraces its numerous manifestations and itscomplex underpinningsšcan guide the application of intellectual property law.legislative "solutions"?few would quibble with the goals for the intellectual property systemrobert spinrad suggests (box 5.1), but most would argue about measuresproposed to achieve them, which range, as mitchell kapor pointed out, from"doing nothing" to "doing something radical."most radical of all perhaps are proposals to create a sui generis system, abody of law specific to software. an argument advanced in support of thisnotion contends that, at least in the copyright area, attempts to address issuesrelated to the functionality of software are distorting the law. as a result, theargument continues, a sui generis system for software is evolving piecemealthrough the case lawšthe open agenda84intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.without the benefit of the foresight that would go into a deliberately crafted setof laws.box 5.1šsuggested goals for theintellectualproperty systemwhile leaving legal specifics for others to debate, robert spinrad ofxerox corp. offered a set of general goals for the intellectual propertysystem to achieve. comments by forum participants suggested thatspinrad's desiderate encapsulated the essential requirements ofinnovators and investors. his criteriaš"the five cs"šare summarizedbelow.coverage, or protection, should extend to the "brilliant idea"embodied in a software product. "this is certainly something you want tobe able to protect and own and control the future of," spinrad said.protection should also be accorded the programming efforts, the "hardwork" that transforms the idea into a marketable product.continuity, "the ability to build on existing standards andconventions at reasonable cost,'' is necessary to create a foundation uponwhich the software industry can build. "access, not appropriation [is key],"spinrad said, acknowledging that "reasonable cost" is not easily defined.yet, he added, arbitrary rules or constraints should not "force theprograms that work on [the user's] behalf to use different interfaces, tomeet different standards,– to follow different protocols. so, there has tobe some way of being able to build one brick on top of another."consistency in the application and scope of intellectual propertyprotections affords the "predictability, the calculability" that firms require tomake the marketing and development decisions that dictate the allocationof financial resources and personnel. surprises, such as those that mightresult as belated declarations of property rights, compound theunavoidable uncertainties of the marketplace.cognizance, "the timely awareness of other intellectual propertyrights claims," minimizes the danger of being blindsided by competitors. "idon't want to be put in a position of developing a product," spinradexplained, "only to discover a year after it is on the marketšor, even morefrightening, just as it is about to hit the marketšthat an essential elementof it is something that had been percolating through the patent processand that, because of the confidentiality [of the process], i didn't know itwas coming."convenience, or a straightforward intellectual property system thatminimizes the need for litigation, may be the equivalent of "asking for themoon," spinrad said. nonetheless, he added, "i would like a minimumamount of conflict about which set of rules or– statutes cover" whichaspects of software.mention the term sui generis at a gathering devoted to softwarerelatedlegal issues, however, and strenous objections are sure tothe open agenda85intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.follow. one frequent criticism holds that abandoning a longstanding body oflawsšalbeit laws that did not anticipate the development of softwarešfor anentirely new system would increase uncertainty, not reduce it."i think what we might be faced with," said ron palenski, counsel for theassociation of data processing service organizations (adapso), "is a conflictbetween a slower societal process to resolve these issues in a more rapidlymoving marketplace and more rapidly moving technology. i would submit,even if you went to a different system, you would still find the same problems."added attorney ronald laurie of irell & manella, "i buy coryright, asopposed to intermediate solutions, because the law in this country, whether welike it or not, evolves interstitially in court. and as someone who spends a lot oftime in court, i would feel much more comfortable arguing my case byanalogy." moreover, laws drafted to address today's concerns could be renderedobsolete by future advances in technology, which will engender unanticipatedlegal issues.that most litigators present at the forum prefer evolutionary developmentof case law, within the framework of current copyright and patent statutes,reflects more than confidence that the law is sufficiently elastic to fit evolvingcircumstances. their preference may also indicate a lower confidence in thelegislative process as the alternative. these litigators share with the scientists anawareness of rapid technological change in the industry but tend to opt for amore surprisefree venue for legal change, while the scientists more willinglycontemplate the sui generis approach.the chorus of objections that greets proposals for new legal approachesshifts attention to the other pole in the range characterized by kaporšthe "donothing" option. howard figueroa espoused this view, noting that many of theissues and concerns now being debated were addressed more than 20 years ago,when firms first contemplated "unbundling" software from their hardwareproducts.2"the bottom line is that we decided to invest in software development as aseparate business," figueroa explained," and we based our decision to putsignificant resources into that business on the expectation that we could protectthe expression in our programs from copying. "copyright protection wouldapply to that product expression per se. it would require no upfront expenditureto obtain that protection, and it was and is international in scope. we felt thatwe could build a separate business on this type of protection."figueroa maintained that the existing intellectual property system works,and he recommended a handsoff approach toward copyrightthe open agenda86intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.law. "i fundamentally believe," he said, "that there is no reason to make anyspecific changes in relationship to the copyright law as it is currentlyconstituted–. i think that what we should be relying upon is the evolution ofthe law as it is interpreted in the courts–."while many in the software industry favor staying within the existing legalstructure, a substantial number believe that the system should provide betterguidance and that copyright and patent laws could be applied more coherently.thus it is the vast middle ground between the extremes of a donothingapproach and a sui generis system where most of the discussion and most of thedisagreement occur.kapor was among several technical experts who stressed the need at leastto reassess the appropriateness of maintaining the status quo. "[s]aying it isokay to do nothing because things will work out," he said, "strikes me asanalogous to the response given by the man who jumped off the top of theempire state building. when asked as he passed the 50th floor, 'how's itgoing?', he replied, 'so far, terrific.' so cautious, thoroughgoing inquiry seemsto me to be really justified here."hybrid system for hybrid technologies?perhaps neither set of principles is appropriate for softwarešat least not intheir current form. this view is espoused by vanderbilt university lawprofessor jerome reichman, who distinguishes between the mature copyrightparadigm of artistic property law and a modified copyright approach bettersuited to what he calls "intermediate technologies" falling below the patent andcopyright paradigms (reichman, 1989). his review of international intellectualproperty laws leads him to conclude that software is the most recentmanifestation of "hybrid technologies" that reside in the murky region betweenpatentable inventions and copyrightable creative works. the intellectualproperty system, he said, carves the universe of created works into art, theprovince of copyright law, and inventions, the province of patent law. butsoftware, like industrial designs and architectural and engineering drawings,embodies properties of both categories and, therefore, distorts the tenets ofpatent and copyright law. historically, nations have different in their legaltreatment of these hybrid technologies, placing them in one category or theother and sometimes oscillating between categories. the results, reichman said,have never been satisfactory, generating a "cycle of overprotection andunderprotection."problems have been most acute for industrial designs and works of appliedart, which are governed concurrently by the copyright andthe open agenda87intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.the industrial property treaties. according to reichman, both industrial art (i.e.,designs) and industrial literature (i.e., software) "bear technological and appliedscientific knowhow on their face." the ingenuity and skilled effort that go intomaking software and other designintensive works cannot be hidden, he said.rather, they are transferred along with the product.recognizing this vulnerability to easy duplication, many nations havechosen to protect these works through copyright law because, for one reason, itdoes not discriminate on the basis of merit. according to reichman, copyrightlaw accepts all comers and it allows the market to determine value, the veryopposite of patent law, which requires the patent examiner to determine meritaccording to the novelty and nonobviousness standards. from a behavioralstandpoint, investors in applied scientific knowhow find copyright attractivebecause of its inherent disposition to supply artificial lead time to all comerswithout regard to innovative merit (reichman, 1991). while the protectionafforded by the full copyright paradigm attracts investors in applied scientificknowhow, reichman finds that this paradigm becomes counterproductive overtime because its wide protective net soon frustrates the very incrementalinnovation that sought copyright protection in the first instance.efforts to protect designintensive works under patent law are underminedby that law's standards of nonobviousness and novelty. although the works arelargely utilitarian and sold in markets for nonartistic and nonliterary products(properties that align them with patented inventions), they usually embodyincremental improvements on known solutions, reichman said. incrementalinnovation is legally obvious by definition and therefore is unprotectable. togrant patents for works that do not attain the high level of originality requiredfor other technologies is to disrupt the patent system, he said.thus reichman proposes that a modified copyright approach is moreappropriate for applied scientific expertise, including software, and other hybridtechnologies than either the mature copyright or patent models that underlie theworld's intellectual property system as it stands. he underscores the need toreckon with what he believes is a potentially serious problem, the danger ofunreasonably long periods of protection for useful works and the consequentdanger of disrupting market competition. under copyright law, owners ofsoftware innovations, which have an essentially machinelike utility, wouldhold exclusive rights for up to 100 years. "no industrial property, no innovationšwhether a computer program or a cancer cure or a gene splicešshouldconceivably be protected for 75 to 100 years on the products market,"reichman said.the open agenda88intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.although protection for the better part of a century does seem excessivefor any utilitarian product, the discomfort may derive more from appearancesthan actual harm. given the rate of progress in computer technology, it is hardto imagine any piece of utilitarian software having market value after 10 or 20years at most. in any case if only the expression is protected, and not thefunction, the independent implementation of that function in new software neednot be seriously impeded by an overlong period of copyright protection. and allusers of the software can experience and learn from the functional utility of aprogram. an approach to correcting the deficiencies that reichman perceives inthe legal treatment of software and other designintensive works is to create athird category of intellectual property for hybrid technologies.echoing reichman's reasoning, l. thorne mccarty, a professor ofcomputer science and law at rutgers university, suggested that software mayrepresent a new type of intellectual effort. the skilled effort that softwaredevelopment requires, he said, "does not rise to patentlevel protection, not onobvious things." yet, mccarty added, copyright in its current form might notoffer sufficient protection against reverse engineering methods that make itincreasingly difficult to distinguish between copying and independentinnovation.incremental improvements to patent system?defenders of the current system counter that it is far better to adapt knownapproaches evolutionarily than to create a new category of protection with allthe attendant uncertainties that would ensue. although there is sharpdisagreement over the appropriateness of patent protection for software, even itsmost ardent advocates find the current patent system to be deficient in somestructural and administrative areas. donald chisum of the university ofwashington, a strong proponent of patents for software, listed problems in theprocurement and enforcement of patents, none of them peculiar to software.while chisum sees these problems as affecting all technologies, others view theconsequences as more severe for software.the need to improve and speed the patent and trademark office'shandling of applications is often cited as one such concern. chisum noted thatvirtually all other countries publish claims within 18 months of the filing date.in the united states, the patent approval process takes nearly twice as long,greatly increasing the chance that an innovator will be blindsided by acompetitor whose application was filed earlier. the danger is substantiallyincreased by the prevailing practice of shipping software products in objectcode. a notification ofthe open agenda89intellectual property issues in softwarecopyright national academy of sciences. all rights reserved."patents pending" is of little assistance to a competitor who is unable to reversecompile the product and understand it.participants also complained of the difficulty of tracking existing softwarepatents, a problem that also increases the risk of unintentional infringement.the dangers of pursuing an innovation that may already be patented or that maybe in the patentreview pipeline are of grave concern to developers. accordingto dyson, publisher of "release 1.0," the first concern could be assuaged by a"meaningful, automatically updating electronic database that containsinformation on patented technologies."currently, searches of patent literature are errorprone exercises, incurringa high risk of overlooking relevant subject matter because of the fragmented,disorganized state of patent information. to correct this shortcoming, estherdyson proposed that the patent and trademark office create a database thatdescribes existing software, which would help innovators determine the "priorart" in the field.3 the second issue, that of losing out to a competitor whoseapplication was submitted earlier, is more problematic because of the short lifecycle of software products. thus the competitor who loses out on a patent hasthe option of licensing the innovation from the patent holder, if that optionexists, or of foregoing the next generation of the productdevelopment cycle.eventually, warns brian kahin, the rapid rate of innovation in the softwareindustry will be slowed to conform with the pace of the patent review andapproval process.finally, several participants advocated establishment of an industrialadvisory board to help patent and trademark office personnel improve theirexpertise in the software area. those who question the appropriateness ofpatents for softwarerelated inventions include these shortcomings in theirappraisals, but only as a starting point that leads to more fundamental concerns.even the most ardent advocates of software patents acknowledge thatpatents issued for broad ideas pose potential problems for the industry. kapor,who counted himself as neither proponent nor opponent, believes this to be anespecially serious problem, the impact of which has yet to be felt. a singlepatent decision that affirms protection for a broad idea, kapor said, "couldchange the industry mood from sanguinity to terror."next stepsthe forum discussion reflected a high degree of discomfort by manycomputer scientists with the intellectual basis for the protection system as itexists. there was considerable uncertainty about howthe open agenda90intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.well the system will cope with a wide variety of emerging issues. many featuresof the present systemšsuch as the duration of protection for utilitarian softwarešare recognized as anachronistic. but few would argue that a demand forroyalties for use of a 1970vintage word processor would generate any revenuein 2045. others were critical of the incremental, somewhat stochastic evolutionof legal principles based on case law, but no one presented an attractiveproposal for nearterm legislative action. nor did anyone advance evidence thatthe system the united states has lived with for 30 years has thwarted innovationor failed to produce a business environment that supports rapid growth. thusconsiderable common ground united the participants.nevertheless, there is much work to be done by technically qualifiedexperts who understand the underlying legal principles and policy issues. legalscholars will have to continue to pursue the questions that fall within theirdomain. but the computer science and telecommunications board, althoughnot competent in the law, has access to a broad range of technical experts, manyof whom have been deeply engaged in the legal and political dimensions oftheir trade. these suggestions for further exploration are addressed to the board.when the steering committee began preparing for the forum project earlyin 1989, it was struck by the paucity of scholarly literature on the nature ofsoftware, the values it may embody, and the balance of creativity, discipline,structure, and knowledge of applications that underpin those values and lead toexcellent products. copyright protection has operated in the software marketduring many years when most system software was unique to the hardware itran on and when there were dozens of word processors, accounting programs,spreadsheets, and device controllers of more or less equivalent merit. copyrightis hospitable to genius and mediocrity alike. end users, not patent examiners,judge the social merit of copyrighted software. bad programs enjoy the sameprotection as excellent ones, but so long as it is only their expression that isprotected, they are discarded without harm to the industry. the market, not theprivilege of limited monopoly, has driven the industry's growth.but the magnitude of the assets required to launch a successful softwareproject is growing very rapidly, and the constraints on substitution ofindependent implementations of needed function are rising, too. barriers toproduct substitution are rising as industry standards aimed at increasedinteroperability gain acceptance and end users insist on familiar interfaces. thequalities that are associated with successful products will depend increasinglyon collections of talent of a quite unique kind. the incentive to imitate, if notcopy, thethe open agenda91intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.work of successful software providers will grow. whether the attributes ofpatentable invention have their equivalents in software is a matter for debate.but the clamor for incentives to nurture that talent is sure to rise. how then isthe rationale for awards of limited monopoly aimed at "advancing the usefularts and sciences" of software to be developed in the absence of a deeperunderstanding of those unique talents and qualities?a second, more practical task for computer scientists and lawyers incollaboration is to develop operationally useful characterizations of softwareattributes that require legal interpretation. examples might include systemleveland user interfaces; languages; the concepts of compilation, decompilation, andrestructuring; the distinction between architecture, design, and implementation;and the distinctions between mathematical principles, algorithms, andprocedures. these characterizations need to be designed to be adaptable, if notinvariant, in the presence of rapid technological change. the value of this effortlies in increased clarity of communication and debate, in court and beyond.a third area needing study is the implications of a rapid increase in the rateof issuance of patents covering functions embodied in software. because theincrease in rate of filings and the courts' seemingly growing receptivity to thelegitimacy of software patents are relatively recent events, it is not possible topoint to past growth of the software industry as proof that this growth will notbe inhibited or the market disrupted in the future. there are both abstract andpractical problems to be addressed. when are clever mathematical proceduresintrinsic properties of nature, like newton's laws of physics, and thusunpatentable? on the practical side, how is either the patent examiner or thesoftware entrepreneur to determine whether a potentially patentable softwareidea has already been used in available computer code, and is thus part of theprior art? how is the developer of a commercial software offering to be able toensure that the company's programmers are not reinventing ideas that have beensubmitted for patents not yet issued? what, indeed, are to be the criteria for"nonobviousness" in software?what is at stake? the future success of american innovators in an industrywith clear global leadership will hinge in large measure on developments insoftware design houses and the marketplace. the courts and the congress,however, will delimit the playing field on which software developers compete.they will do this through the rules that they do or do not make or alter. giventhe american propensity to litigiousness, and the drag on productivity that manythe open agenda92intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.industries have experienced as a result, the software industry is vulnerable. thedelicacy of the current balance of protection arrangements for computersoftware requires respect, even as the issues are vigorously examined. the openand constructive discussion at the forum and the preparatory workshop havemade a useful contribution toward a broader understanding of that balance andits implications.notes1. the forum started a dialogue that should be continued. the computer science andtelecommunications board is exploring options to further address the issue.2. the "unbundling" of software and service from hardware sales by ibm was undoubtedly a wisebusiness decision that depended for its success on ibm's copyright in the system software. asdescribed by howard figueroa, thomas watson, jr., ascribed the decision in june 1969 to generalcounsel burke marshall's warnings about antitrust exposure. see watson and petre (1990).3. the lexpat database can provide easy and rapid access to copies of software patents, if thesearcher wishes to examine a particular patent and knows its patent number. dyson's suggestiondiffers in that it is proposing a content/area search capability that does not currently exist.developing the proposed capability would be a major undertaking.the open agenda93intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.the open agenda94intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.6bibliographybranscomb, anne w.1988. "who owns creativity?"technology review , may/june, p. 43.branscomb, a.w.1989. protecting the crown jewels of the information economyšthe legalprotection of computer software as an intellectual asset: an overview of policy issues forcongressional oversight. statement given before the subcommittee on courts, intellectualproperty, and administration of justice, u.s. house of representatives, washington, d.c.,november 8.brooks, frederick p., jr.1975. the mythical manmonth, addisonwesley, reading, mass.chronicle of higher education. 1989a. "electrocopies' seen surpassing photocopies as threat tocopyright,"march 1.chronicle of higher education. 1989b. "court will not hear case accusing ucla of copyingsoftware,"march 29.clapes, anthony lawrence. 1989. software, copyright, & competition:the "look and feel" of thelaw, quorum, new york, p. 143.cleveland, h.1989. "can intellectual property be protected?"change , may/june, pp. 10œ11.computer and business equipment manufacturers association (cbema). 1990. the informationtechnology industry data book 1960œ2000, cbema, washington, d.c.computer week. 1989. "criticism builds over impact of lookandfeel litigation,"may 1.computerworld. 1989. "copyright regulations revised,"april.copp report. 1989. intellectual property protectionša copp historicalresume, ieee, new york.davidson, duncan m.1986. "common law, uncommon software,"universityof pittsburgh lawreview, vol. 47, pp. 1037œ1117.dyson, e.1989. "three weeks that shook my world,"forbes, june 12, pp. 103œ108.farrell, joseph. 1989. "standardization and intellectual property."reprint of a talk given at theceslast conference, phoenix, ariz., february 1989p. 16.federal computer week. 1989. "microsoft corp. downplays apple display lawsuit,"april 10.bibliography95intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.fisher, f.d.1989. ''the electronic lumberyard and builders' rights: technology, copyrights, patents,and academe,"change, may/june, pp. 13œ21.foley, james d.1987. "interfaces for advanced computing,"scientificamerican, october, pp. 127œ135.gantz, john. 1989. "standards: what they are. what they aren't,"networking magazine,may, p. 23.garfinkel, simson l.1991. "programs to the people,"technology review94(2), februarymarch, pp.52œ60.gasper, elon, ed harris, paul heckel, william hulbig, larry lightman, and mike o'malley. 1989."vital to small companies,"new york times , june 8.gilbert, s.w. and p. lyman. 1989. "intellectual property in the information age: issues beyond thecopyright law,"change, may/june, pp. 23œ28.goldberg, morton and john f. burleigh. 1989. "copyright protection for computer programs: is thesky falling?"america intellectual property law association, computer law association,new york.jorde, t.m. and d.j. teece. 1989. "competition and cooperation: striking the rightbalance,"california management review reprint series31(3):25œ37.kahin, brian. 1989. "software patents: franchising the information structure,"change, may/june,pp. 24œ25.keefe, patricia. 1991. "paperback pulls spreadsheet, won't appeal lotus victory,"computerworld,oct. 22, p. 7.miller, michael w.1989. "a brave new world: streams of 1s and 0s,"wall street journal,centennial edition, p. aœ15.newell, allen. 1986. "response: the models are broken, the models are broken,"university ofpittsburgh law review, vol. 47, pp. 1023œ1035.pollack, andrew. 1990. "most of xerox's suit against apple barred,"new york times, march 24, pp.31 and 33.reichman, j.h.1989. "computer programs as applied to scientific knowhow: implications ofcopyright protection for commercialized university research,"vanderbilt law review42(3):639œ723.reichman, j.h.1991. "design protection and the new technologies: the united states experience ina transnational perspective," 19 university of baltimore law review, part iii, b3, "logicof a modified copyright approach" (forthcoming).samuelson, p.1985. "creating a new kind of intellectual property: applying the lessons of the chiplaw to computer programs,"minnesotalaw review70(2):471œ531.samuelson, p.1989a. "why the look and feel of software user interfaces should not be protected bycopyright law,"communications of theacm32(5):563œ72.samuelson, p.1989b. "report on aipla survey on the patent/copyright interface for computerprograms,"may 12, draft.samuelson, pamela. 1988. "reflections on the state of american software copyright law and theperils of teaching it,"columbiavla journalof law & the arts, vol. 13, p. 61.scherer, f.m.1984. innovation and growth, mit press, cambridge, mass.teece, d.j.1989. "interorganizational requirements of the innovation process,"managerial anddecision economics, special issue (john wiley & sons, new york), pp. 35œ42.u.s. department of commerce. 1991. "computer equipment and software,"1990 u.s. industrialoutlook, pp. 26œ31.u.s. patent and trademark office. 1989. "patentable subject matter: mathematical algorithms andcomputer programs,"official gazette, 1106 og, september 5.verity, john w.1990. "defense against pirates or death to the clones?"business week, may 7.bibliography96intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.wall street journal. 1989. "software company wins case alleging violated copyright,"march 6.wall street journal. 1989. "u.s. companies curb pirating of some items but by no means all,"march16.wall street journal. 1989. "apple wins first round in software copyright case,"march 22.wall street journal. 1989. "microsoft sees gain in ruling on apple's suit,"march 22.wall street journal. 1989. "tradesecret fight imperils a startup,"march 22.wall street journal. 1989. "three computer industry leaders gird for battle over copyrightinfringement,"april 7.washington post. 1989. "from software to sportswear, bangkok is the capital of counterfeitproducts,"march 12.washington post. 1989. "thailand's refusal to protect copyrights produces cheap goods, disputeswith u.s.,"march 12.washington post. 1989. "the battle over software protection,"april 2.washington post. 1989. "u.s. businesses urge trade sanctions to stop piracy of software inchina,"april 10.watson, thomas j., jr., and peter petre. 1990. father, son & co., bantam books, new york.bibliography97intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.bibliography98intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.appendixes99intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.100intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.appendix aintellectual property challenges insoftware workshop program andparticipants*programtuesday, september 12 1. opening remarks and introductionslewis branscomb9:00 a.m.2. the environment for software five years down the road9:15 a.m.paul goldstein, organizer & moderatorquestions:what elements of software are protected by copyright, patents, andtrade secrets?what protections and remedies are available to holders of each?how is each regime evolving in the united states?where are current legal developments taking us, and is it a place thatmakes sense?what's right and what's wrong with current protection systems?how well will these protection systems apply to emerging technologies?* workshop held september 1213, 1989, in room gr 130, national academyof sciences, 2001 wisconsin avenue, n.w., washington, d.c.appendix a101intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.opening remarks by paul goldsteinpanelists:pamela samuelsonemory school of lawdonald chisumuniversity of washingtonrobert spinradxerox corporation3. software protection fromvarious vantage points11:00 a.m.mitchell kapor, organizer & moderatorquestions:assessment of the environment for software from various perspectives:small companieslarge companiesintegrated companiesis financial return to developers the only or the most effectiveincentive for getting good work done?where is the balance between the relative importance of originalprototype creation and the process of turning prototypes into products?does that have any ramifications for forms of protection?what happens as commercial software standards begin to emerge?opening remarks by mitchell kaporpanelists:esther dysonedventure holdings, inc.nat goldhaberthe cole gilburne fundlee keetvanguard atlantic, limitedharry reinsteinaion corporation4. what's special about software?1:45 p.m.anita jones, organizer & moderatora. case studiesquestions:what was developed?what was the essence you wished to protect?what legal method was selected for that protection?appendix a102intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.how well did it work? what were the benefits, problems with it?opening remarks by anita jonespanelists:charles geschkeadobe systems, inc.john muskivitchthe macnealschwendlercorporationnorris van den bergibm corporationb. discussion3:00 p.m.questions:what is the essence of software creation as an intellectual activity?where is the effort in software?how is the art of writing software likely to change in the future?are legal approaches relevant to technical realities?opening remarks by anita jonespanelists:randall davismassachusettes institute oftechnologygideon friedersyracuse universitymitchell kaporon technology, inc.wednesday, september 13 5. differences in legal systems worldwide9:00 a.m.paul goldstein, organizer & moderatorquestions:what are the differences and similarities in international patent,copyright, and trade secret law?what are current issues affecting international protection?what factors affect these differences and similarities? how do theyaffect us?panelists:dennis karjalaarizona state universitymichael keplingerpatent & trademark officeappendix a103intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.6. other forces affecting software10:15 a.m.peter schneider, organizer & moderatorquestions:what are the forces other than protection systems that affect thecreation and dissemination of software?what role do government policies, market forces, etc., play?are there barriers to dissemination of knowledge and disincentives tocreativity?how should we deal with the problems of protection vs.standardization and need for compatibility?how should we balance the rewards for innovation with theimportance of universally adopted interfaces, languages, and otherfunctions needing standardization?can software interfaces be defined separately from other elements ofsoftware, and if so, should they be separately protectable?can programming languages be defined separately from otherelements of software, and if so, should they be separately protectable?opening remarks by peter schneiderpanelists:stanley besenthe rand corporationruann ernsthewlett packardronald laurieirell & manella7. open discussion and summary session1:30 p.m.lewis branscomb, organizer & moderatorquestions:are the existing legal regimes satisfactory for the protection ofsoftware?is there a case for a sui generis protection system for software?if so, what might be its characteristics?what might be the benefits/costs to such an approach?should there be different systems for different typesappendix a104intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.of software (applications, systems, languages, tools, databases, and soon)?different approaches for different phases of work (conception,algorithms, code)?are there articulable ideas that might make a positive difference in theevolution of legal protection for software?how can communication be improved between software developersand policymakers/judges/lawyers?panelists:jerome reichmanvanderbilt universitymichael remingtonhouse judiciary committeesteering committee:lewis m. branscombharvard universitypaul goldsteinstanford law schoolanita k. jonesuniversity of virginiamitchell d. kaporon technology, inc.michael o. rabinharvard universitypeter r. schneideribm corporation8. closing remarks by lewis branscomb3:30 p.m.participantshenry beckruann ernstlord day & lord, barret smithhewlettpackardmark bellofrancis d. fisheralexandria, virginiacambridge, massachusettsstanley m. besengideon friederthe rand corporationsyracuse universitymarjory s. blumenthalcharles geschkenational research counciladobe systems incorporatedlewis m. branscomb (chair)nat goldhaberharvard universitythe cole gilburne funddonald s. chisumpaul goldsteinuniversity of washingtonstanford law schoolrandall davisallen r. groganmassachusetts institute of technologyblanc gilburne williams & johnstonesther dysonc.k. gunsalusedventure holdings, inc.university of illinoisappendix a105intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.bertram herzogsusan h. nycumcenter for information technology integrationbaker & mckenzieanita k. jonesmichael o. rabinuniversity of virginiaharvard universitybrian kahinjerome h. reichmancambridge, massachusettsvanderbilt universitymitchell d. kaporharry c. reinsteinon technology, inc.aion corporationdennis s. karjalamichael j. remingtonarizona state universityu.s. house of representativesernest e. keetpamela samuelsonvanguard atlantic ltd.emory university school of lawmichael s. keplingerpeter r. schneideru.s. patent & trademark officeibm corporationronald s. lauriejohn f. shochirell & manellaasset management companyl. thorne mccartyrobert spinradrutgers universityxerox corporationjohn muskivitchnorris van den bergthe macnealschwendler corporationibm corporationappendix a106intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.appendix bintellectual property issues in softwareforum program and participants*programthursday, november 309:00 a.m.overview lewis m. branscomb, chair, forum steering committee, john f.kennedy school of government, harvard university esther dyson, edventure holdings, inc. ronald laurie, irell & manella10:30 p.m.the public interest lewis m. branscomb [moderator], john f. kennedy school ofgovernment, harvard university francis d. fisher anita jones, department of computer science, university of virginia john f. schoch, asset management company12:00 p.m.luncheon and presentation: "entrepreneur's perspectives" daniel bricklin, president, software garden, inc.1:30 p.m.how software is special* forum held november 30 and december 1, 1989, in the lecture room,national academy of science, 2001 constitution avenue, n.w., washington,d.c.appendix b107intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.anita jones [moderator], department of computer science,university of virginia randall davis, artificial intelligence laboratory, massachusettsinstitute of technology robert spinrad, corporate strategy office, xerox corporation bruce tognazzini, ministry ltd. to human interface, applecomputer, inc.3:30 p.m.legal challenges paul goldstein [moderator], stanford school of law, stanforduniversity morton d. goldberg, schwab goldberg price & dannay michael keplinger, office of legislation and international affairs,u.s. patent and trademark office jerome reichman, school of law, vanderbilt university5:30 p.m.reception in the rotunda6:45 p.m.dinner and keynote address: ''the ecology of innovation" mitchell d. kapor, chairman, on technology, inc.friday, december 18:45 a.m.introduction lewis m. branscomb, chair, forum steering committee, john f.kennedy school of government, harvard university9:00 a.m."intellectual property in the global market place" howard figueroa, commercial and industry relations, ibmcorporation9:45 a.m.interfaces/standards/business entry peter schneider [moderator], ibm corporation scott g. davis, digital equipment corporation frank ingari, lotus development harry c. reinstein, aion corporation11:20 p.m.issues for the future lewis m. branscomb [moderator], john f. kennedy school ofgovernment, harvard university donald s. chisum, school of law, university of washingtonappendix b108intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.ernest e. keet, vanguard atlantic ltd. pamela samuelson, school of law, emory university peter schneider, ibm corporation12:30 p.m.summary lewis m. branscomb, chair, forum steering committee, john f.kennedy school of government, harvard university paul goldstein, school of law, stanford university anita jones, department of computer science, university of virginia mitchell d. kapor, on technology, inc. michael o. rabin, aiken computer laboratory, harvard university peter schneider, ibm corporationparticipantsjohn atwoodjohn carsonu.s. customs servicegeorge washington universitydonald m. austinlynn robert carteru.s. department of energycarnegie mellon universityhenry beckrichard p. caselord day & lord, barret smithibm corporationmark bellovirginia castoralexandria, virginiathe pentagonkathleen c. bernarddavid w. cheneycray research, incorporatedcouncil on competitivenessfred blosserbernard chernthe bureau of national affairs, inc.national science foundationmarjory s. blumenthaly.t. chiennational research councilnational science foundationlewis m. branscomb (chair)donald s. chisumharvard universityuniversity of washingtonjoseph w.b. bredieanthony l. clapesthe world bankibm corporationdan bricklinfrank w. connollysoftware garden, inc.american universitycharles n. brownsteineileen d. cookenational science foundationamerican library associationjames burgerrichard p. corbenapple computer inc.hewlettpackarddianne callanrandall davislotus development corporationmassachusetts institute of technologyappendix b109intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.scott g. davisjohn d. holmfelddigital equipment corporationu.s. house of representativesesther dysonfrank ingariedventure holdings, inc.lotus development corporationhoward g. figueroaluanne jamesibm corporationadapsofrancis d. fisherj. jancin, jr.cambridge, massachusettsibm corporationgideon friederdouglas c. jergersyracuse universityadapsoian m. friedlandanita k. jonesnational research counciluniversity of virginiathomas f. gannonbrian kahindigital equipment corporationcambridge, massachusettssteven w. gilbertrobert e. kahneducomcorporation for national researchinitiativesmartin a. goetzmitchell d. kaporgoetz associateson technology, inc.morton david goldbergdennis s. karjalaschwab goldberg price & dannayarizona state universitypaul goldsteinernest e. keetstanford law schoolvanguard atlantic ltd.jacques j. gorlinmichael s. keplingerwashington, d.c.u.s. patent & trademark officestephen gouldmarilyn j. kretsingerlibrary of congresslibrary of congressallen r. groganronald s. laurieblanc gilburne williams & johnstonirell & manellac.k. gunsalusbruce a. lehmanuniversity of illinoisswidler & berlinauke haagsmamark liebermandelegation of the commission of theeuropean communitiesu.s. department of commerceherb hellermanjean loupamdahl corporationassociation of research librarieskaren herseypatrice lyonsnorth carolina state universityhaley, bader & pottsbertram herzogsteven metalitzcenter for information technologyintegrationinformation industry associationheidi hijikatapat mortensonu.s. department of commerceuniversity of georgiaappendix b110intellectual property issues in softwarecopyright national academy of sciences. all rights reserved.john muskivitche.a. silvathe macnealschwendler corporationoffice of naval researchdavid b. nelsoneric h. smithu.s. department of energyinternational intellectual propertyalliancejeff nuechterleinoliver r. smootu.s. senatecomputer & business equipmentmanufacturers association (cbema)susan h. nycumalfred z. spectorbaker & mckenzietransarc corporationhans j. oserrobert spinradnational research councilxerox corporationron palenskiaugust w. steinhilberadapsonational school boards associationabraham peledrichard h. sternibm corporationwashington, d.c.michael o. rabinalfred d. sumbergharvard universityamerican association of universityprofessorsjerome h. reichmancharles p. thackervanderbilt universitydigital equipment corporationron reilingbruce tognazzinidigital equipment corporationapple computer, inc.harry c. reinsteinjoseph f. traubaion corporationcolumbia universitymichael j. remingtoningrid a. voorheesu.s. house of representativescomputer & business equipmentmanufacturers association (cbema)carol a. risherralph wachterassociation of american publishersoffice of naval researchwilliam c. rollandallen b. wagnernational electrical manufacturersassociationuniversity of california at berkeleylaurence c. rosenbergrobert m. whitenational science foundationmicroelectronics and computertechnology corporationwilliam ryanedith wilsonat&t bell laboratoriesbursonmarstellerpamela samuelsonjames d. wilsonemory university school of lawu.s. house of representativespeter r. schneiderjoan d. winstonibm corporationu. s. congressrobert schwarehelen m. woodthe world banku.s. department of commercemary shaw carnegie mellon university john f. shoch asset management company appendix b111
detailsdistribution, posting, or copying of this pdf is strictly prohibited without written permission of the national academies press. (request permission) unless otherwise indicated, all materials in this pdf are copyrighted by the national academy of sciences.copyright © national academy of sciences. all rights reserved.the national academies pressvisit the national academies press at nap.edu and login or register to get:œ œ 10% off the price of print titlesœ special offers and discountsget this bookfind related titlesthis pdf is available at sharecontributorshttp://nap.edu/11133summary of a workshop on software certification anddependability57 pages | 8.5 x 11 | paperbackisbn 9780309094290 | doi 10.17226/11133committee on certifiably dependable software systems; computer science andtelecommunications board; division on engineering and physical sciences;national research councilsummary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.      summary of a workshop on software certification and dependability    committee on certifiably dependable software systems  computer science and telecommunications board  division on engineering and physical sciences            the national academies press washington, d.c. www.nap.edu  summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved. the national academies press 500 fifth street, n.w. washington, dc 20001  notice: the project that is the subject of this report was approved by the governing board of the national research council, whose members are drawn from the councils of the national academy of sciences, the national academy of engineering, and the institute of medicine. the members of the committee responsible for the report were chosen for their special competences and with regard for appropriate balance.  support for this project was provided by the national science foundation, the national security agency, and the office of naval research.  any opinions, findings, conclusions, or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the sponsor.  international standard book number 0309094291 (book) international standard book number 0309546192 (pdf) cover designed by jennifer m. bishop.  additional copies of this report are available from:  the national academies press 500 fifth street, n.w., lockbox 285 washington, dc 20055 800/6246242 202/3343313 (in the washington metropolitan area) http://www.nap.edu  copyright 2004 by the national academy of sciences. all rights reserved. printed in the united states of america   summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved. the national academy of sciences is a private, nonprofit, selfperpetuating society of distinguished scholars engaged in scientific and engineering research, dedicated to the furtherance of science and technology and to their use for the general welfare. upon the authority of the charter granted to it by the congress in 1863, the academy has a mandate that requires it to advise the federal government on scientific and technical matters. dr. bruce m. alberts is president of the national academy of sciences.  the national academy of engineering was established in 1964, under the charter of the national academy of sciences, as a parallel organization of outstanding engineers. it is autonomous in its administration and in the selection of its members, sharing with the national academy of sciences the responsibility for advising the federal government. the national academy of engineering also sponsors engineering programs aimed at meeting national needs, encourages education and research, and recognizes the superior achievements of engineers. dr. wm. a. wulf is president of the national academy of engineering.  the institute of medicine was established in 1970 by the national academy of sciences to secure the services of eminent members of appropriate professions in the examination of policy matters pertaining to the health of the public. the institute acts under the responsibility given to the national academy of sciences by its congressional charter to be an adviser to the federal government and, upon its own initiative, to identify issues of medical care, research, and education. dr. harvey v. fineberg is president of the institute of medicine.  the national research council was organized by the national academy of sciences in 1916 to associate the broad community of science and technology with the academy™s purposes of furthering knowledge and advising the federal government. functioning in accordance with general policies determined by the academy, the council has become the principal operating agency of both the national academy of sciences and the national academy of engineering in providing services to the government, the public, and the scientific and engineering communities. the council is administered jointly by both academies and the institute of medicine. dr. bruce m. alberts and dr. wm. a. wulf are chair and vice chair, respectively, of the national research council.  www.nationalacademies.org  summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved. ivcommittee on certifiably dependable software systems  daniel jackson, massachusetts institute of technology, chair joshua bloch, google, inc. michael dewalt, certification services, inc. reed gardner, university of utah peter lee, carnegie mellon university steven b. lipner, microsoft corporation charles perrow, yale university jon pincus, microsoft research john rushby, sri international lui sha, university of illinois at urbanachampaign martyn thomas, engineering and physical sciences research council scott wallsten, aei/brookings joint center and american enterprise institute david woods, ohio state university  staff lynette i. millett, study director and program officer phil hilliard, research associate (through may 2004) penelope smith, senior program assistant (february 2004 through july 2004) summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved. vcomputer science and telecommunications board  david liddle, u.s. venture partners, cochair jeannette m. wing, carnegie mellon university, cochair eric benhamou global ventures, llc david d. clark, massachusetts institute of technology, cstb member emeritus william dally, stanford university mark e. dean, ibm systems group deborah estrin, university of california, los angeles joan feigenbaum, yale university hector garciamolina, stanford university kevin kahn, intel corporation james kajiya, microsoft corporation michael katz, university of california, berkeley randy h. katz, university of california, berkeley wendy a. kellogg, ibm t.j. watson research center sara kiesler, carnegie mellon university butler w. lampson, microsoft corporation, cstb member emeritus teresa h. meng, stanford university tom m. mitchell, carnegie mellon university daniel pike, gci cable and entertainment eric schmidt, google inc. fred b. schneider, cornell university william stead, vanderbilt university andrew j. viterbi, viterbi group, llc  charles n. brownstein, director kristen batch, research associate jennifer m. bishop, program associate janet briscoe, manager, program operations jon eisenberg, senior program officer renee hawkins, financial associate margaret marsh huynh, senior program assistant herbert s. lin, senior scientist lynette i. millett, program officer janice sabuda, senior program assistant brandye williams, staff assistant  for more information on cstb, see its web site at <http://www.cstb.org>, write to cstb, national research council, 500 fifth street, n.w., washington, dc 20001, call (202) 3342605, or email the cstb at cstb@nas.edu. summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved. vii preface       systems on which the safety or security of individuals may depend are frequently subject to certification: a formal assurance that the system has met relevant technical standards, designed to give confidence that it has some specific propertiesšfor example, that it will not unduly endanger the public. today, certification of the dependability of a softwarebased system frequently relies at least as heavily on assessments of the process used to develop it as it does on the system's observable properties. while these assessments can be useful, few would dispute that direct evaluation of the artifact ought to provide a stronger kind of assurance than the credentials of its production methods could hope to provide. yet the complexity of software systems, as well as their discrete nature, makes them extremely difficult to analyze unless great care has been taken with their structure and maintenance. to further understand these and related issues, the high confidence software and systems program at the national coordination office for information technology research and development initiated discussions with the computer science and telecommunications board (cstb) of the national research council (nrc). these discussions resulted in agreement to undertake a study to assess the current state of certification in dependable systems, with the goal of recommending areas for improvement. initial funding for the project was obtained from the national science foundation, the national security agency, and the office of naval research. the committee on certifiably dependable software systems was appointed to conduct the study. the task of the committee is to identify the kinds of system properties for which certification is desired, describe how that certification is obtained today, and, most important, determine what design and development methods, as well as methods for establishing evidence of trustworthiness, could lead to systems structures that are more easily certified. to accomplish its mission, the committee divided this study into two phases: a framing phase and an assessment phase. this report is the outcome of the first phase, the framing phase, which included a public workshop organized by the committee and attended by members of industry, government, and academia. held on april 1920, 2004, the workshop featured a variety of participants invited to present their views on issues surrounding certification and dependability (see appendix a for the workshop agenda). six panels were organized, and each panelist gave a short presentation that addressed the theme of the panel. the workshop panelists are listed in appendix b. each panel session was followed by an extensive discussion involving all of the workshop participants and moderated by one or two committee members. the committee met three times: once to plan the workshop, then to hold the workshop, and, last, to distill information from the workshop and develop the report. this report is the committee™s summary of the panelists™ presentations and the discussions that followed. summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved. viiialthough the summary is based on presentations and discussion at the workshop, the participants™ comments do not necessarily reflect the views of the committee, nor does the summary present findings or recommendations of the national research council. in fact, the committee took care in writing this report simply to summarize the discussions, and to avoid any bias or appearance of bias in favor of one opinion or another. because it did not seem sensible to attempt a distillation across panels, the committee tried to record something of the spirit of each individual panel session. nor is this report intended to be complete; topics that were not discussed at the workshop are not mentioned, however important they might be. in the second phase of the study, the committee will analyze the information gathered in the workshop and summarized here, along with information and input it gathers from other experts and related studies. this assessment phase will deliver a final report (planned for release in 2005) with findings and recommendations from the committee. the committee on certifiably dependable software systems consists of 13 members from industry and academia who are experts in different aspects of systems dependability, including software engineering, software testing and evaluation, software dependability, embedded systems, humancomputer interaction, systems engineering, systems architecture, accident theory, standards setting, key applications domains, economics, and regulatory policy (see appendix c for committee and staff biographies). the committee thanks the many individuals who contributed to its work. it appreciates the panelists™ willingness to address the questions posed to them and is grateful for their insights. the study™s sponsors at the national science foundation, the national security agency and the office of naval research have been most supportive and responsive in helping the committee to do its work. the reviewers of the draft report provided insightful and constructive comments that contributed significantly to its clarity. the committee is particularly grateful to the cstb staff: lynette millett, program officer, who as the study director for this project has provided excellent advice and assistance throughout; phil hilliard, research associate, whose work in notetaking and summarizing discussions, and in obtaining and organizing materials for the committee, has been invaluable; and penelope smith, senior program assistant, who deftly handled all kinds of administrative issues, including most of the arrangements for the workshop and associated meetings. the success of the workshop is a testament to their commitment and hard work. susan maurizi from the division on engineering and physical sciences™ editorial staff and cameron fletcher made significant editorial contributions to the final manuscript.  daniel jackson, chair committee on certifiably dependable software systemssummary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved. ix acknowledgment of reviewers       this report has been reviewed in draft form by individuals chosen for their diverse perspectives and technical expertise, in accordance with procedures approved by the national research council™s (nrc™s) report review committee. the purpose of this independent review is to provide candid and critical comments that will assist the institution in making the published report as sound as possible and to ensure that the report meets institutional standards for objectivity, evidence, and responsiveness to the study charge. the review comments and draft manuscript remain confidential to protect the integrity of the deliberative process. we wish to thank the following individuals for their review of this report:  anthony hall, independent consultant john c. knight, university of virginia william scherlis, carnegie mellon university william stead, vanderbilt university jeannette wing, carnegie mellon university  although the reviewers listed above have provided many constructive comments and suggestions, they were not asked to endorse the conclusions or recommendations, nor did they see the final draft of the report before its release. the review of this report was overseen by daniel p. siewiorek, carnegie mellon university. appointed by the national research council, he was responsible for making certain that an independent examination of this report was carried out in accordance with institutional procedures and that all review comments were carefully considered. responsibility for the final content of this report rests entirely with the authoring committee and the institution.summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved. xi contents       1 overview of workshop discussions 1  2 summary of panel sessions and presentations 5  panel a: the strengths and limitations of process, 5  panel b: looking forward: new challenges, new opportunities, 8  panel c: certification and regulation: experience to date, 11  panel d: organizational context, incentives, safety culture, and management, 13  panel e: costeffectiveness of software engineering techniques, 16  panel f: case study: electronic voting, 18  3 summary of closing session 21  appendixes  a workshop agenda 27 b panelist biographies 31 c committee member and staff biographies 39  what is cstb? 45 summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved. summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.1 1 overview of workshop discussions       this report summarizes a workshop on software certification and dependability held april 1920, 2004, in washington, d.c., under the auspices of the committee on certifiably dependable software systems. several items should be kept in mind when reading this report:  the workshop focused on the subset of areas that the committee believed would best help frame the program of work for the remaining study period. there are areas of direct relevance for the study that are missing from the workshop agenda, either because of time constraints or because the panelists chose to address different areas. the committee plans to gather input on those areas in subsequent activities; feedback and additional input from readers of this report are welcome.  during the workshop, committee members deliberately refrained from questioning views expressed at the workshopšthey preferred to use the time to gather input from workshop participants in an impartial manner. in addition, the committee chose not to extend the discussions in this firstphase report, instead reserving that task for the final report. consequently, this report does not provide a freestanding overview of the current state of software development, of certification, or of anything other than the views expressed at this particular workshop.  the panel summaries have not been edited to make the terminology used by each panel consistent across the entire report. meanings should be clear from the context. deciding on appropriate and consistent terminology is a task for the committee as it prepares its final report.  listed below are the main themes arising from each panel session. these themes are not conclusions or findings of the committee; they incorporate ideas extracted from each panel that seem to represent the major thrusts of each discussion. each panel session discussion is elaborated in chapter 2.  panel a the strengths and limitations of process  while following particular processes cannot alone guarantee certifiably dependable software, comprehensive engineering processes are nevertheless important to achieving this goal. summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.summary of a workshop on software certification and dependability 2 in evaluating a system, appropriate metrics should be used; it may be necessary to measure secondary artifacts (e.g., process quality) as surrogates if what is actually of interest cannot be measured. developing ways to determine how best to allocate resources (e.g., understanding where errors are likely to cluster) can improve both dependability and costeffectiveness.  panel b looking forward: new challenges, new opportunities  over the past several decades society has become increasingly dependent on software. while desktop systems are not generally regarded as safetycritical, these days they are often taskcritical for their users. this is true not only at the individual level but also at the organizational level.  one increasingly sophisticated set of tools that can help in the software development process with respect to dependability is the set of tools related to programming languages, such as type checkers, static analyzers, and model checkers.  systems integration is a growing and challenging problem. additional tools and strategies are needed to cope with largescale systems integration issues.   panel c certification and regulation: experience to date  the process of certification may add value in a collateral fashion because attention must be paid to issues that might not receive it otherwise; given that software and its uses and contexts change over time, any value that certification has decays over time as well.  market forces and the cost structure of the software industry may create incentives to release flawed software.  validationšdetermining what the software should došis often harder than verification, or determining whether the software does it correctly, and may be more important. despite the difficulties of achieving validation systematically, however, many critical systems seem to function well.  panel d organizational context, incentives, safety culture, and management  systems are certified only within a particular context and up to specified system boundaries; certification of a system may not guarantee the dependability and usefulness of a system over its lifetime. as a system™s reliability increases or is demonstrated over long periods of time, dependence on that system may increase to an extent not anticipated in the original design.  accountability, reporting, and communication are difficult issues that must be planned and managed in detail across an organization.   summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.overview of workshop discussions 3panel e costeffectiveness of software engineering techniques  there are interesting substantive overlaps in approaches to software development that seem philosophically opposed on the surface. in particular, agile methods such as ﬁextreme programmingﬂ seem to share important elements with methods that employ formal notations for early modeling and analysis.  understanding what is meant by ﬁdependabilityﬂ is critical; it was observed that, given its ubiquitous use and deployment, software is treated as though generally dependable.  achieving dependable, certifiable software will require emphasis on process, people, and tools.  panel f case study: electronic voting  structural flaws in the voting system go beyond the absence of voterverifiable paper trails. the lack of detailed risk analysis, coupled with a lack of openness in the voting system certification process, poses serious challenges to achieving a dependable voting infrastructure. the current certification process does not seem to have resulted in secure or dependable electronic voting systems.  summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved. summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.5 2 summary of panel sessions and presentations       panel a: the strengths and limitations of process  panelists: isaac levendel, gary mcgraw, and peter neumann moderator: martyn thomas  software development involves many activitiesšfor example, requirements elucidation, requirements analysis, specification, version management, architectural design, modularization, component design, programming, testing, component integration, verification, performance analysis, prototyping, error correction, feature enhancement, reviews, walkthroughs, and typechecking. these activities may be undertaken in many different sequences; collectively they are referred to as the software development process. most development standards for dependable software (such as do178b1 or iec 615082) recommend that particular processes be adopted; typically, the recommended processes vary for different levels of criticality (different target probabilities and consequences of failure). in the panel a session, participants from industry and academia explored the strengths and limitations of using process recommendations and requirements to achieve certifiably dependable software. some of the themes that emerged during this discussion include these:  while following particular processes cannot alone guarantee certifiably dependable software, comprehensive engineering processes are nevertheless important to achieving this goal.  in evaluating a system, appropriate metrics should be used; it may be necessary to measure secondary artifacts (e.g., process quality) as surrogates if what is actually of interest cannot be measured. developing ways to determine how best to allocate resources (e.g., understanding where errors are likely to cluster) can improve both dependability and costeffectiveness.   1 do178b, software considerations in airborne systems and equipment certification. issued december 1, 1992, by rtca, inc. available at <http://www.rtca.org/>. 2 iec 61508, functional safety of electrical/electronic/programmable electronic safetyrelated systems. issued december 1998 by the international electrotechnical commission (iec). available at <http://www.iec.ch/zone/fsafety/fsafetyentry.htm>. summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.summary of a workshop on software certification and dependability 6 the panelists and participants in the workshop largely agreed that mature, comprehensive engineering processes reduce the risk that a software development project will overrun or deliver poorquality software. but it was also noted that a good process does not guarantee that the resulting software will be of high quality. ﬁprocess properties are not predictive of product properties,ﬂ was a typical opinion; another was, ﬁyou should not believe that if you do it right it will come out right.ﬂ the idea that it is possible to ﬁget dirty water out of clean pipesﬂ summarized much of this discussion. process was described as a ﬁskeletonﬂ on which a dependable system is built. process quality is important even if it does not directly predict product quality. for example, it is important to be able to show that the version of the software that has been tested and certified is the exact version that is running, unmodified, in the operational system. similarly, if the testing process cannot be trusted, it may be difficult to establish confidence in the test results.3 software development processes were described as a ﬁchain of weak linksﬂ and as ﬁweakness in depth,ﬂ in that each process step can introduce flaws that damage the product. product certification requires adequate evidence of the properties of the product, and the weight that can be given to this evidence depends, in turn, on the quality of the processes that created the evidence. so the quality of these processes is an important factor in certification. it is important to distinguish between evidence that the process has been followed (which gives credibility to the outcome of the process) and evidence of the system properties that the process produces. a detailed record of a systematic process can be essential for the many development tasks that depend on information not easily obtainable from the program itself. for example, reliable build logs and version control are necessary for tracing the affected versions of systems in the field once a fault has been discovered. similarly, avoiding complete recertification of a system after a maintenance change requires sufficient evidence of the maximum possible impact of the change, so that only the affected areas need to be recertified. panelists discussed the artifacts produced as part of development (program code, specifications, designs, analyses, and the like). one panelist noted that it is the properties of these artifacts that should be measured: ﬁi run your code, not your process.ﬂ for this reason, a key activity in certification should be measurements of the product and of the intermediate artifacts. such measurements could include system performance, test coverage, the consistency and completeness of specifications, and/or verification that a design implements a specification. while there does not seem to be a single metric that can predict dependability, several participants said that measures such as these, when used in combination, are good predictors of dependability. it is important to measure properties that actually matter directly, and economic theory suggests that measurement skews incentives: ﬁif you want a and measure b, you will get b.ﬂ all of this suggests the importance of good empirical research that relates the attributes under consideration and makes it possible to discern what the dependent and independent variables are. there was some discussion of the phenomenon that software errors are not evenly distributed throughout a systemšthey tend to cluster in the more complex areas, creating black holes of software defects. these black holes can be located by looking at the past and recent history of a current release. however, there is an underlying assumption that there are resource constraints and never enough resources to analyze an entire system in this manner. furthermore, some forms of analysis or testing may be impossible, requiring orders of magnitude more resources than could possibly be made available. one must focus the analysis on areas one thinks deserve the most attention. these black holes in the resulting software can often be traced to black holes in the design or specification, so deep analysis of the quality of these artifacts, early in the development of software, can be very cost  3 it was suggested that while somewhat too prescriptive, the capability maturity model is correct in its assessment of which processes matter as well as in its insight that there is a necessary progression in process improvement (it is not possible to leap easily to level 4 from level 1). the committee will explore this and other processoriented models in the second phase of the study. summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.summary of panel sessions and presentations 7effective. panelists and participants generally agreed that limitations on staffing and time are a major consideration in developing dependable software. several participants commented that most problems in delivered systems turn out to have their root cause in specification errors, and one said (provocatively and perhaps only halfseriously) that ﬁprogramming is a solved problem.ﬂ it was observed that security problems in contrast often flow from implementation errors such as buffer overflows. ﬁno system is 100 percent secure. proactive security is about doing it right. security problems come from software flawsšwe must do it right.ﬂ doing it right was suggested to involve the following:  producing the right artifacts and using the knowledge of computer scientists and software engineers to guide how those artifacts are produced so that they have the right properties and can be measured or analyzed, and  measuring the artifacts to confirm those properties.  panelists and participants also largely agreed that the world is imperfect and not all the software properties of interest can be measured directly. in these cases, secondary evidence must be usedšperhaps including measurements of process quality and staff competencešalthough it is important not to lose sight of the limitations of such evidence. summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.summary of a workshop on software certification and dependability 8 panel b: looking forward: new challenges, new opportunities  panelists: robert harper, shriram krishnamurthi, james larus, and andré van tilborg moderators: john rushby and lui sha  panel b™s topic for discussion was what has changed in the past decades with respect to software certification and dependability. several themes emerged during the discussion:  over the past several decades society has become increasingly dependent upon software. while desktop systems are not generally regarded as safetycritical, these days they are often taskcritical for their users. this is true not only at the individual level but also at the organizational level.  one increasingly sophisticated set of tools that can help in the software development process with respect to dependability is the set of tools related to programming languages, such as type checkers, static analyzers, and model checkers.  systems integration is a growing and challenging problem. additional tools and strategies are needed to cope with largescale systems integration issues.  while society is increasingly dependent upon software, desktop systems are not generally regarded as safetycritical. however, with respect to what has changed about the use of software systems, one panelist pointed out examples of errors in desktop spreadsheet programs and webbased travel reservation systems. the existence of such errors illustrates that for the people using such software, even seemingly mundane applications can be critically important for achieving a larger goal. systems are increasingly interconnected and interdependent, which means that local faults attributable to poor design can lead to wider failures. the argument proposed was that systems are not taskcritical because someone in authority says they are; rather, a system becomes taskcritical when someone performing a critical task uses that system.4 dependence on systems happens not only at an individual level, as in these examples, but also at an organizational level. for example, the majority of medicalrelated computing systems (including patient records and lists of appropriate dosages for drugs) are run on standard consumer platforms. when these systems fail, hospital operations can be placed in jeopardy. thus, some argued that software dependability has become an increasingly important qualityoflife issue and should not be limited to safety or security applications such as aviation and nuclear power plants. some panelists and participants argued that programming languages and their associated tools are the key to dependability on the grounds that ﬁcode is the ultimate reality.ﬂ it was claimed that advances in this field are both broad and deep and that fundamental research on types and programming logics, theorem proving, model checking, and so on has advanced the state of the art. processoriented methods have limitationsšfor example, they do not tend to scale well in a world with thousands of disparate components, and they tend to rely heavily on continuity and corporate knowledge. programminglanguagebased approaches may scale better, but only for establishing rather local and lowlevel properties. the challenge is to find a way to combine the best techniques that can be used at the system level with the best lowerlevel techniques, and to generate all the evidence required for certification as an integral part of these development processes.5  4 at the same time, it should be noted that there is disagreement about what should be considered taskcritical. as the use and scope of software expand, the number of critical components expands. however, some argue that not everything should be labeled ﬁcriticalﬂ and that the degree of criticality can vary greatly. the committee will continue to explore this and related issues in the next phase of the project. 5 this is not to suggest that appropriate languages and tool sets will guarantee dependability, but rather that incompletely defined languages can pose problems that even the most skilled programmers have difficulties summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.summary of panel sessions and presentations 9others argued that programming is basically a solved problem and that all the significant issues arise at the system level. it was suggested that language choice matters much less than systemlevel considerations. however, there seemed to be general agreement that the dependability problem is larger than this seeming dichotomy would suggest and cannot be solved by any one technique, be it architecture, static analysis, process, language, or human factors. software poses unique challenges, but, as was noted, also unique opportunities. it is not possible to look at and work with the last 10 versions of a particular bridge, for example, in the way software systems can be examined. a rough consensus seemed to be that while the dependability problem cannot be solved by any single method alone, dependability can be seriously compromised by any single weak link. nevertheless, while there are no silver bullets, there are many specific promising interventions that, taken together, could make a very big difference. panelists pointed to great progress in the development of formal methods and their application in industry. specification languages, logics, and verification methods have matured and are increasingly applicable in the context of large and complex systems (although usually only in rather limited ways). type systems represent the most elementary use of formal methods, but they are used with success widely (e.g., in languages such as java and c#); applied type theory was cited as one of the greatest successes in formal methods. others pointed out that many system failures are environment and inputdependent. current type systems do not address the role of the environment in which the system operates, since they can only express local properties of code modules. stronger forms of static analysis have great promise, although some participants expressed skepticism about the effectiveness of many such forms that are currently in vogue, due to their incomplete and unsound nature. it was noted that there has been great progress in the construction of standalone systems. for example, the desktop system has become more powerful, has more useful features, and has become much more reliable than it was 10 years ago. unfortunately, the same cannot be said about large systems of systems. systems integration has remained a vexing challenge. the development of large systems of systems often has the unfortunate characteristic that early phases experience relatively smooth subsystem development while later phases encounter serious integration problems. for example, one participant remarked that during systems integration and testing, complex avionics tend to fail repeatedly when the pilot attempts to use the radar, communication, navigation, identification, and electronic warfare systems concurrently. these integration problems are very costly to fix and are often traced back to complex and unanticipated interactions between subsystems. while there are usually voluminous documents of system interface definitions, they often deal only with normal and predictable functional interfaces.  there are many integration problems caused by unanticipated interactions between different technologies developed in isolation, especially in aspects related to realtime properties, fault tolerance, security, and concurrency controlšnamely, those properties that cannot be established locally. how to control and manage interactive complexity is a key challenge for systems integration. before one can start solving the problem of interactive complexity, it will be important to have good instrumentation that allows one to observe the details of the system state and to trace system behavior. failures that arise in the integration of systems are often highly sensitive to workload and timing, which makes them extremely difficult to track down. there are very few working approaches available that succeed at properly instrumenting a system in spite of the important role it plays. there was rough agreement that dependable system development should be riskdriven. it is important to determine which of the various aspects of dependability must be determined at the outset    avoiding. modern languages with associated deep analysis tools can guarantee the absence of whole classes of defects and greatly assist the programmer in achieving dependable systems costeffectively. summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.summary of a workshop on software certification and dependability 10 and which can be deferred. these critical aspects are projectdependent, and the designers™ and developers™ responsibility is to determine the key needs of the project. how to proceed, what aspects to certify, and to what levels of dependability are unclear. improved notations and modeling tools are needed to address dependability concerns in all phases and in all aspects of development, but it is important that all software artifactsšwhether specifications, requirements, models, or codešbe kept in sync with each other. how to achieve this remains a serious challenge. summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.summary of panel sessions and presentations 11panel c: certification and regulation: experience to date  panelists: brent goldfarb, mats heimdal, charles howell, and robert noel moderators: michael dewalt and scott wallsten  in the panel c session participants discussed what is meant by ﬁcertificationﬂ and ﬁregulation,ﬂ how much has been done, and how much is possible. panelists and audience members also discussed whether a wellfunctioning marketplace for software and software development services would be sufficient to achieve dependability. the panelists noted that these are increasingly important questions as software plays an ever larger role in our lives. several themes became apparent during this discussion:  the process of certification may add value in a collateral fashion because attention must be paid to issues that might not receive it otherwise; given that software and its uses and contexts change over time, any value that certification has decays over time as well.  market forces and the cost structure of the software industry may create incentives to release flawed software.  validationšdetermining what the software should došis often harder than verification, or determining whether the software does it correctly, and may be more important. despite the difficulties of achieving validation systematically, however, many critical systems seem to function well. the panelists started by focusing on two heavily governmentregulated industries: avionics and medical software. they noted that, in general, the software in these industries seems to work fairly well. the federal aviation administration (faa) works closely with the avionics industry to ensure that regulations are adequate but not suffocating. the faa also appoints people within these companies to provide software approvals on behalf of the government. this helps the process work more smoothly. this approach is also being discussed by the medical community for the medical device industry, but only in a preliminary way. one panelist stressed the traditional distinction between verification and validation (verification is a check that software satisfies set requirements, and validation is a check that specifications match the actual need). the general consensus of the panel, and the focus of the ensuing discussion, was that validation is both harder than verification and much less well addressed by current processes. that is, deciding what the specific goals are is the most important step. once the goals are clearly defined, it becomes easier (though by no means necessarily easy) to verify that those goals are met.6 some claimed, in addition, that validation matters more than verification for critical systems, because few of the errors that have been critical in practice indicate failures of verification. the value of certification itself was debated extensively by the panel and audience. there was, however, general consensus on three points about certification. first, even if certification is not directly effective, it may add value in the sense that it forces developers to pay closer attention than they might otherwise. participants noted that despite the difficulties in achieving validation, many safetycritical systems seem to function well, especially in the arenas of avionics and (to a lesser extent) medicine. one panelist argued that processes such as those recommended in do178b have collateral impact, because even though they fail to address   6 it should be noted that there are many kinds of functional and socalled nonfunctional requirements, and that the relative importance of verification and validation varies among these (and also among the various stakeholders in the requirements). summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.summary of a workshop on software certification and dependability 12 many important aspects of a critical development, they force attention to detail and selfreflection on the part of engineers, which results in the discovery and elimination of flaws beyond the purview of the process itself. increasing automation and overreliance on tools may actually jeopardize such collateral impact. as people are removed from the testing process, for example, in favor of automated procedures that specifically test a set number of items, they are less likely to notice gross omissions in testing or invalid environmental assumptions.  second, any value that certification has decays over time. certification, in some sense, is a legal status and is considered a boolean valuešeither the software is certified or it is not. worse, the certification applies to a particular system at a particular time. in reality, things are more complicated. for any change made to a system, it is important to know how far the system has moved away from the version that was certified. one panelist argued that at one extreme, the value of certification is zero as soon as the product is delivered. even if that assertion exaggerates the problem, there was general agreement that the value of certification does decay rapidly because of changes in the way a product is used, the way people interact with the product, and ways (many unexpected) in which the product must interact with other systems (see the summary of the panel d session for more on this point). many system failure postmortems begin with the statement, ﬁa small software change resulted in . . . .ﬂ third and finally, a potential benefit of certification is that it establishes a baseline from which changes in performance/dependability/reliability can be measured later. a related question about certification is what, exactly, should be certified. participants debated whether people should be certified, rather than or in addition to software, but there was no agreement on this question. there was a claim that markets are not efficient for safetycritical software, especially when used by the military, though this point was disputed. the economics of the software industry, including incentives for the firms involved and how those affect reliability, were discussed. a major problem is the lack of information flow between groups, a problem that can prevent markets from functioning properly. reference was made to george akerlof™s seminal paper on the usedcar market, where asymmetric information flows prevented that market from working efficiently.7 one person noted that for used cars, the internet and, in particular, services that permit the prospective buyer to purchase a vehicle history report have helped solve that problem. thus sometimes innovation and markets can help resolve the problem of asymmetric information. it was also noted that there is not a onesizefitsall approachšmarket forces work well with some critical systems but not as well with others. market forces might not work well with some military systems, for example. it was suggested that the cost structure of the software industry may create a perverse incentive to release software with errors. in particular, software is a highfixedcost, lowmarginalcost industry where the cost of releasing corrective patches is low and becoming lower in most cases (although not for embedded control systems). this can create an incentive to release a product before it is ready in order to capture market share, knowing that a patch can be released later at almost zero cost. although the practice of patching may apply more to the market for desktop consumer applications than for critical systems, this and other aspects of the cost structure of the industry merit serious consideration.  7 akerlof, george a. 1970. ﬁthe market for ‚lemons™: quality uncertainty and the market mechanism.ﬂ quarterly journal of economics 84(3), 488500. summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.summary of panel sessions and presentations 13panel d: organizational context, incentives, safety culture, and management  panelists: richard cook, gene rochlin, and william scherlis moderators: charles perrow and david woods  panel d explored implications of certification and dependability requirements within an organizational context. some of the themes that emerged during the discussion were the following:  systems are certified only within a particular context and up to specified system boundaries; certification of a system may not guarantee the dependability and usefulness of a system over its lifetime. as a system™s reliability increases or is demonstrated over long periods of time, dependence on that system may increase to an extent not anticipated in the original design.  accountability, reporting, and communication are difficult issues that must be planned and managed in detail across an organization.  the panelists stressed the idea that system design must consider the end users of a system and how that system will be used in context. certification likewise must address not only the process of creating dependable software, nor even just the final product, but also the many ways it might be used. the participants noted a tension between the narrower and crisper notion of certification, and the broader and blurrier notion of dependable usefulness. although some certification processes take into account the ultimate context of use, many emphasize primarily the internal consistency, coherence, and completeness of the software itself. dependable usefulness, in contrast, entails the extrinsic characteristics of the computer systems within the domain of interest, and different domains cope with certification demands differently.8 during the discussion, workshop participants explored the sorts of difficulties related to certification and context that the committee should consider during the rest of the project. in a sense, some suggested, complex software might just as well be acknowledged as a natural phenomenon: softwareintensive systems have become too complex to be completely understood before the fact, and they can behave in surprising ways. thus the tendency is to work back from the behavior of systems to mechanisms in order to understand the workings of these systems. although overt software failures do occur, it was observed that in many instances dependability failures are not the type that could have been mitigated by certificationšmany failing systems have internal consistency of the sort that certification tests. instead, failures result from a mismatch between the device requirements defined by the developers and the requirements of the domain in which the devices are used. indeed, some now believe that virtually all instances of ﬁuser errorﬂ with computerbased medical devices are examples of this mismatch. these mismatches would not easily be detected by certification processes, such as do178b, that pay only minimal attention to analysis of requirements in context. instead, the risk is that the certification process itself could obscure the fact that the device operating as designed actually lends itself to uses for which it will prove undependable within the larger context. in general, it was argued that what often first appear to be user or operator errors turn out to be design errors resulting from a lack of recognition of the conditions under which the product is or will be used. a complicating factor is that the introduction of a new system typically changes the   8 many consider certification in avionics (e.g., do178b requirements) to be extremely good and wish such stringency could be applied to their own domains. others within avionics acknowledge that the certification methods there are not perfect and do not solve every problem. summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.summary of a workshop on software certification and dependability 14 user™s context as new uses are found, and thus new paths to failure must be anticipated and guarded against. as systems become more useful, they may no longer be backups or addons to older systems but instead become the primary mechanisms that users rely on. moreover, systems and the threats against those systems coevolve. all these observations highlight the importance of clearly articulating the properties of the environment in which the system will be deployed and, in particular, the properties of the environment that the system users depend on. reliable software is desirable, of course, but operators and users must recognize that it may be counterproductive to depend too heavily on the reliability of the software. instead, users should retain skills that might appear to have become superfluous so that they can learn to recognize unreliable behavior and cope with it appropriately. unfortunately, as systems become more reliable, users grow to depend on them uncritically. in other words, depending on success can be dangerous.9 there was some discussion of the role of accountability. some argued that the lack of accountability was a problem in the development and deployment of dependable software, and that blame should be assigned with accompanying sanctions to those whose actions resulted in failures. others noted that locating a single point of failure or finding individuals to blame can be difficult. moreover, assigning blame may actually make matters worse by retarding the flow of information. one might therefore reward information flow instead, even though it may expose weak points and blemishes. it was observed that positive reinforcements are more effective in changing behavior than negative reinforcements, and that decades of human performance literature and research demonstrate this fact. it was also noted that care must be taken when the introduction of a new system is likely to increase workload burdens within an organization. in fact, any new system will impose some workload costs, and if those who bear that cost do not receive direct benefits or increased capabilities from the change, the introduction is likely to founder.10 the licensing of staff who have key roles in critical projects was discussed and compared with the licensing of professionals in other disciplines. there are, of course, advantages and disadvantages to licensing. however, some participants noted that licensing could be considered one possible way of imposing standards of competence, but urged that such licenses should have to be renewed relatively frequently. there was some disagreement over the role of regulation and whether further regulation would help or hinder. most participants believed that there was a positive role for regulation under the proper conditions, and that, indeed, much more regulation of software was required. who should do the regulatingšindustrial trade organizations, professional societies, or the governmentšwas not discussed. field testing, while desirable, may be prohibitively expensive. simulation is therefore an attractive alternative and might be acceptable for some kinds of certification. the aviation industry was singled out for having exploited simulation successfully to increase dependability. simulations   9 an example was given of an accounting system that performed quite well over a period of time. eventually, as individuals with experience before the system was adopted were replaced, the level of understanding of the underlying substantive accounting issues diminished. users understood the operation of the system, but did not understand what the system was doing deeply enough to manage well when a failure occurred. another example along these lines was of the difference in caution between a user of a somewhat unreliable operating system who is therefore careful to save documents frequently and a user of a generally reliable operating system who is not so careful. in the latter case, infrequent failure can be more damaging than frequent failure. 10 norman, d.a. 1988. the psychology of everyday things. new york, ny: basic books.; r.i. cook and d.d. woods. 1996. ﬁadapting to new technology in the operating room.ﬂ human factors 38(4), 593613. summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.summary of panel sessions and presentations 15 in other softwarerich environments might offer something similar to this kind of testing. such simulation capabilities could be explored to help in the definition of requirements as well as for validation. however, it was also noted that good simulation imposes additional costs and can be very expensive for many kinds of applications, which relates to issues raised in panel c. summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.summary of a workshop on software certification and dependability 16 panel e: costeffectiveness of software engineering techniques panelists: kent beck, matthias felleisen, and anthony hall moderators: peter lee and jon pincus  the purpose of the panel e session was to provide some basis for understanding the costeffectiveness of software engineering techniques as they relate to dependability and certification. the general question to the panel was whether there is evidence for the costeffectiveness of various software engineering techniques, either today or looking toward the future. the panelists cited metrics such as frequency of warranty claims and delivered defect density. one panelist argued that the creation of a market for dependable software components would lead to stronger evidence for costeffectiveness. all three panelists described promising directions that may lead to more costeffective software engineering techniques for creating dependable software. overall, several key themes emerged from this panel, among them:  there are interesting substantive overlaps in approaches to software development that seem philosophically opposed on the surface. in particular, agile methods such as ﬁextreme programmingﬂ seem to share important elements with methods that employ formal notations for early modeling and analysis.  understanding what is meant by ﬁdependabilityﬂ is critical; it was observed that, given its ubiquitous use and deployment, software is treated as though generally dependable.  achieving dependable, certifiable software will require emphasis on process, people, and tools. perhaps most surprising to the majority of participants was the strong overlap in two software development approaches described by the panelists: ﬁextreme programmingﬂ (xp) and ﬁcorrectness by constructionﬂ (cbc). while on the surface these two approaches seem philosophically opposed and differ greatly in terms of their provenance, discussion revealed intriguing similarities. specifically, proponents of each emphasized the importance of taking a riskbased approach, in which the highestrisk (often the leastwellunderstood) areas of a project are tackled first. when asked how their approaches would respond to the issue of integration discussed in panel c, proponents of each approach noted that if integration were clearly the highestrisk issue in a project, the appropriate response would be to address it from the start, and to integrate the subsystems ﬁearly and often,ﬂ in the hopes of mitigating this risk. even though much of the functionality would not be available in the earliest integration phases, architecturallevel mismatches would be discovered much earlier as a result. it was also noted that having an overall architecture in place, along with an empowered central architecture team, seemed important to address this problem. both xp and correctness by construction stress the importance of clear requirements. cbc follows a detailed requirements elucidation method (reveal11), whereas xp™s ﬁtestfirstﬂ approach argues for the use of failed test cases as a record of the evolving requirements. both approaches can be viewed as attempts to make requirements explicit as early as possible (although reveal, unlike xp, crucially addresses properties that are not observable at the system interface and is less susceptible to the risk of focusing on lowlevel issues). the xp community has apparently devised new techniques for improving the observability of nonfunctional properties by making them testable   11 for more about reveal, see ﬁwill it work?,ﬂ jonathan hammond, rosamund rawlings, and anthony hall, in proceedings of re™01, 5th ieee international symposium on requirements engineering, august 2001, available at <http://www.praxiscs.co.uk/pdfs/willitwork.pdf> and <http://www.praxiscs.co.uk/reveal/index.htm>. summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.summary of panel sessions and presentations 17(e.g., by defining explicit trials to establish usability), although some propertiesšsuch as the absence of race conditions or buffer overflowsšare not easily tested at all. a number of questions regarding safetycritical (and in particular realtime) software were raised with respect to xp. it was claimed that while xp has not been applied to safetycritical software, the best xp teams record defect rates much lower than those typically found in commercial software, along with substantially higher productivity. it was also noted that while xp had originally been applied in small (810 person) teams, it had now scaled to an organization of approximately 250 engineers and thus that the principles could apply (perhaps with some modifications to the practices) to larger, crossorganization projects. it was reported that a series of projects using the cbc approach have extremely low defect rates: from a 1992 project with a delivered defect rate of 0.75 defects per thousand lines of code (kloc) to a 2002 project (100,000 lines of code (loc), with a productivity of 28 loc/personday) with a delivered defect rate of 0.04 defects/kloc. improvements over that time frame were attributed to the introduction of the reveal requirements analysis method, adoption of more powerful static analyses (in particular the use of the spark ada subset and its examiner tool), and a better engineering process, with earlier integration and more frequent builds. it was pointed out that software is indeed dependable, inasmuch as all the attendees had depended on software to arrive at the workshop. however, given that far too many software development projects fail, or have overruns in cost and time, the reliability of the software production process was decried. a proposal to reinstate the goal of building a ﬁsoftware marketﬂ of interchangeable software components12 was based on the following rationales:  market mechanisms provide concrete measures of utility and value; such measures are currently missing in software engineering, and thus comparisons are difficult to make.  improvements in process, education, and technology often come as a result of the competition afforded by markets.  a market of interchangeable components might provide a reliable means of choosing specific software products for specific tasks. the importance of process, people, and tools (in various orders of importance) was emphasized, not surprisingly. also discussed at some length was the importance of continuing education for programmers, by analogy to health care workers (specifically, surgeons). a substantial amount of discussion related to the role of language, and not only at the level of programming. all the panelists agreed that the choice of language or notation is important, as it affects the thought processes of the people involved in the project. there was also a rough consensus that at least local properties should be kept ﬁwith the codeﬂ via strong interface specifications. different languages might be appropriate for different purposes, again casting the choices in terms of risks. a number of other topics were also raised and discussed briefly. panelists emphasized the importance of approaching software from an engineering perspective. just as chemical engineers and mechanical engineers have process differences due to the different materials they work with, software engineers with their very different ﬁmaterialsﬂ likely have different processes as well.   12 it was observed that this notion of a market of components has often been discussed but that there is little historical support for such an idea and considerable skepticism regarding its present feasibility. summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.summary of a workshop on software certification and dependability 18 panel f: case study: electronic voting presenters: david dill, douglas jones, avi rubin, and ted selker moderators: reed gardner and daniel jackson  panel f addressed the controversial dilemmas posed by current electronic voting systems.13 most of the discussion was focused on the flaws of these systems and the process by which they are produced, although it was noted that computingrelated issues may be overemphasized, distracting attention from more serious flaws in the wider electoral system. the major themes of discussion were as follows: structural flaws in the voting system go beyond the absence of voterverifiable paper trails. the lack of detailed risk analysis, coupled with a lack of openness in the voting system certification process, poses serious challenges to achieving a dependable voting infrastructure. the current certification process does not seem to have resulted in secure or dependable electronic voting systems.  while much attention has been focused on whether the use of paper (either in the form of paper ballots or a voterverifiable paper trail) is an effective corrective for problems with electronic voting systems, it was noted that voter verifiability is not the only challenge today with the voting infrastructure, and perhaps not even the most important problem. votes go ﬁadriftﬂ everywhere. in the 2000 u.s. presidential election, for example, 2 percent of votes were lost because of problems in registration databases. the panelists noted that although attention has been focused mostly on the voting machines themselves, voting is a complex system in a complex social setting, and any weak link can compromise the entire process. while there are problems with the current paper voting system, and the electronic voting system has the potential to prevent some of these errors, it also has the potential to introduce new errors. the panelists focused on errors related to software flaws, inadequate security, distributed database problems, communications inadequacies, limited auditing capabilities, and poor user interfaces. there has apparently been no serious attempt to perform a detailed risk analysis of electronic voting systemsša standard procedure in the development of safetycritical systems. in fact, it is not clear that those involved in electronic voting systemsšfrom vendors to election officials and certifiersševen appreciate these systems™ critical nature, perhaps because the purely algorithmic aspect of voting (count the votes and the candidate or initiative with the most votes wins) is so simple. most of the panelists and other workshop participants were confident that such a risk analysis could be conducted, and that it might lead to a simplification of the voting process and the identification of a small trusted computing base within the larger system that would correctly be the focus of attention. the lack of openness in the voting system certification process is a serious problem. the certification of electronic voting systems is currently conducted by companies that report to local election officials in states and counties. each jurisdiction makes its own decisions about which companies to use and interprets the results in its own way. usually, the choice of certifier, the inputs to the certification process, the certification report, and even the criteria used are not made known to the public. a participant reported that, in some cases, certifiers have not been willing to talk to outside experts. as a result, confidence in the system has eroded and insights that outsiders might bring have not been taken advantage of. given these concerns, how can the certification process itself come to be trusted? (this is indeed a problem that certification will face in any domain.)   13 for the purposes of this discussion ﬁelectronic votingﬂ is distinct from internet voting. summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.summary of panel sessions and presentations 19even for a given vendor™s system, performance varies widely because of differences in ballot design and user interface. even small differences in a user interface or ballot design can have dramatic effects on the dependability of the system as a whole. in the united states, ballots tend to be very complicated; one panelist noted that a typical california voter makes more choices in a single election than a typical british voter does in a lifetime. ballots differ widely across counties and may present dozens of choices. as a consequence, the layout of the ballot is complex and highly variable. the user interface of an electronic voting machine may give some propositions or candidates an advantagešeither by design or by accident.  the issues here have not been well studied. an endtoend check, which would ascertain that each person™s vote was correctly acquired, recorded, transmitted, and counted, might protect against software flaws and malicious attacks. but designing such an audit within the constraints of ballot secrecy requirements is a difficult problem. the idea of using dres (direct recording electronic systems) simply as intelligent printers for generating completed ballots that might then be optically scannedša voterverifiable paper trailšwas suggested, although one panelist argued that the attention paid to this issue has diverted resources from more important issues. it was also noted that it may be infeasible to expect voters to check a paper audit consisting of dozens of choices, and that audio feedback, for example, might be more useful to ensure that entry errors are not made. a further risk is the lack of a process to ensure that the software used in an election is the software that was certified. electronic voting systems, highly dependent on software, have the advantage of flexibility; unfortunately, the same flexibility allows late changes to the software that have not been certified, and participants noted that there have been reported cases in which voting machine software has been modified at the last minute, long after certification has been completed. lack of expertise with computers and software among local election officials exacerbates this problem: officials might be able to detect tampering with a traditional paper system, but they are not necessarily qualified to understand the issues involved in the loading and updating of software. lack of observability is also a serious problem. critical systems sometimes suffer because their failures may not be immediately observable, but in the worst cases catastrophic failures are rarely invisible: a medical device that kills a patient, for example, will likely eventually be discovered. but a voting system could fail repeatedly, corrupting the results of large elections, without discovery. the secrecy requirement of voting is one of the root causes of this problem. mechanisms for detecting electronic voting system failures must be developed and tested, and perhaps local policies and processes will need to be changed to allow such failure detection and prevention. panelists agreed that the certification process for electronic voting systems has failed demonstrably. despite the procedures set up by local election officials and the work of thirdparty certifiers, voting systems have been found by outside experts to contain egregious flaws and to be susceptible to easy attacks. some of the reasons for this failure include:  the closed nature of the process and the skewing of incentives. local election officials are often involved in the procurement of systems and have little incentive to report problems with such procurements. political incumbents are often involved in the choice of vendors and certifiers, compromising the independence of the selection.  the fact that purchasers are typically ignorant about complex computer systems, and lack the ability to assess risks and evaluate certification efforts. a mismatch in expectations. while certifiers may recognize how incomplete and limited their analyses are, their reports are often misinterpreted as implying that the system is unassailable.  in addition, there are core technical problems with current electronic voting systems, among them the inherent complexity of the software, the nature of collaborations between vendors and summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.summary of a workshop on software certification and dependability 20 purchasers, and the infeasibility of meeting certain requirements. the software problem is a complex one, and it is not clear that a specific and evidently correct solution is possible. the end usersšvoters and local election officialsšare not likely to be able to understand the code themselves or to appreciate the implications of its complexity for errors. inappropriate collaboration between local politicians and the vendor, along with the ability to control the setup of the ballot, may be problematic not only because of potential malfeasance but also because neither the vendor nor the politicians are likely to be experts in designing usable ballots. requirement specification may also be problematic if the requirements mandated in legislation are technically infeasible or unspecific. it was observed that electronic voting systems pose a fundamentally harder challenge than many other safetyoriented critical systems because of the high risk of motivated, malicious attack. because voting is so foundational to our democracy and because there are strong incentives for rogue states, terrorists, political parties, specialinterest groups, and even individuals to influence election results, the threat of attack on such systems is highly likely. one panelist estimated that in the current system bribing only a handful of people could allow serious compromise. at the moment, largescale attacks on medical and avionics system software are relatively minimal; there seems to be little motivation for such attacks because these types of systems tend to be very distributed and physically inaccessible. accordingly, certification in these domains has evolved without much attention to the kinds of adversaries that voting systems might face,14 although there is increasing concern that such systems may themselves become targets of attack. the difficulty in identifying the user of the system creates additional challenges for building dependable and certifiable voting systems. in most system development environments, there is a user who can evaluate the delivered system for fitness of purpose, and the same party that evaluates the system has the primary vested interest in its quality. for voting systems, there is no single user. local election officials play a key role in acquiring and managing these systems, but it is arguably the voter who is the true user. unfortunately, the voter has little influence on the process of acquisition and certification, and cannot easily even assess how likely it is that his or her vote was recorded correctly.     14 this situation highlights the difference between security and safety. while each is needed to a greater or lesser degree in all systems, the techniques and lessons learned in an effort to achieve one are not necessarily applicable in achieving the other. summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.21 3 summary of closing session       the workshop finished with a brainstorming session, the goal of which was to identify the important questions and issues raised during the workshop and to determine those that merit further investigation by the committee. the participants reviewed the following aspects of software certification: applications, lessons learned from failures and successes, scope, techniques, processbased and productbased methods, and obstacles to effective certification. certification has traditionally been applied to safetycritical infrastructure that is procured or regulated by the government. participants wondered whether it should be applied more widely. some suggested that even consumer software was an appropriate target for certification, as it has a substantial impact on the quality of life, while others advocated certification of operating systems and development platforms. some participants cautioned that toostrict certification requirements could have negative impacts, such as the expenditure of resources on the production of ultimately unhelpful documents. at the same time, it was noted that regulation and associated certification processes exist to defend and protect those who have no other voice in the product development process, and that it would be unfortunate if truly high quality software were confined to the domain of nuclear reactors and airplanes. the committee was encouraged to host a panel of representatives from areas where certification is generally considered effective (such as avionics) to discuss the potential for broader applicability of certification. it was also suggested that the committee study certification failures. failures may include certification of a device or system that failed to achieve the goals for its dependability and certification whose costs caused the project to fail. the national security agency™s orange book1 was suggested as an example of a certification effort with, at best, mixed outcomes. according to one panelist, ﬁsystems were evaluated and blessed at c2 [a particular level of assurance determined in the orange book]; people thought that it meant something, but it didn™t.ﬂ participants suggested that the committee attempt to get honest assessments from a few people who would be candid about what went wrong. it was also suggested that the committee investigate certification successes. the faa, for example, has been certifying software for quite some time and may be able to offer lessons learned from what has worked and what has not. participants disagreed about the appropriate scope of certification. some thought it should focus on one or two narrow attributes, while others argued that it should encompass all realistic requirements in a common context in order to address the fact that requirements frequently interfere   1 more formally known as the dod trusted computer system evaluation criteria, dod 5200, 28std, december 26, 1985.  summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.summary of a workshop on software certification and dependability 22with one another. there did appear to be some consensus among panelists that certification processes should focus on the desired properties rather than on the manner in which the artifact is constructed. it was observed, however, that some properties that are not directly observable may require secondary evidence. there was substantial interest in certifying components for composability. there was also interest in certification processes that can be applied to a software component as it evolves. there was some discussion of appropriate techniques for certification. several participants contended that formal methods have a role to play in certification and that although there are limits to what they can achieve, ﬁwe should continue the long march of formal methods.ﬂ it was suggested that scale and adoptability should be the primary aim of continued research in this area, with a focus on ﬁsmall theorems about large programs.ﬂ there was also controversy over the maturity of certification techniques and of software development in general. some felt that generally reliable software can be achieved using existing software development techniques but that certification could be used to ﬁraise the bar.ﬂ others emphasized the need for more research on the use of tools and techniques to increase software quality. the question of processbased versus productbased certification was discussed. there was some consensus that a combination of the two is necessary, and that ﬁprocess evidence is only secondary to product evidence.ﬂ the new european standards esarr 62 and sw013 were offered as examples of the combination approach. it was suggested that formal methods could offer support for ﬁbaking the evidence of process into the artifact itself,ﬂ using such techniques as proofcarrying code. panelists warned of several obstacles to effective certification. for example, standards that mandate adherence to untestable criteria are unlikely to be effective, as are certification processes that lack accountability. standards that provide insufficient connection to the end goal can increase the cost of creating software without increasing its actual dependability. standards may be too technology dependent, mandating methods of constructing (or not constructing) software. they may mandate the production of enormous documents that have little if any impact on the dependability of the software, or the measurement of ﬁtriviaﬂ that is easily measurable but offers only a false sense of security. finally, participants briefly touched on some additional considerations, and the session concluded with suggestions for the committee in the preparation of its final report. there was some support for the notion that software development companies should be required to publish defect rates. it was noted that software products are often licensed without the ﬁfitnessforpurposeﬂ requirements that apply to other goods. the education of both professionals and consumers was a recurring topic: ﬁwe should make tools that give people best practices demos, so people can tell how to write good software, and can tell the difference. consumer pressure [to produce dependable systems] is not as powerful as people had hoped.ﬂ the committee was encouraged ﬁnot to be hidebound by current practicesﬂ and to take a longerrange view about what people involved in the development of complex software systems need to learn and know. what are the criteria for a good study in the area of certifiably dependable systems? what should the committee do to ensure that such a study provides value to the community and capitalizes on the wisdom and experience of the community at large? it was suggested that the committee™s final report should, at least in part, be positive. participants observed that the community tends to be negative but that much has been achieved. it   2 the eurocontrol safety regulatory requirement (esarr 6) provides a set of guidelines to ensure that risks associated with operating any software in safetyrelated groundbased air traffic management systems are reduced to a tolerable level. this guideline was developed by the european organisation for the safety of air navigation. 3 sw01 is part of a larger set of civil aviation guidelines and standards called cap 670 established by the civil aviation authority in the united kingdom. sw01 deals specifically with the design and assessment of groundbased services, including air traffic control systems. summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.summary of closing session 23was suggested that clear recognition of the problems and acknowledgment that they are being worked on are equally important. achieving certifiably dependable systems is a longterm goal, with many unknowns and the potential for significant changes in the way things are done. changes will take a long time to implement, and so the goal should be to set out a road map. it is important to clearly distinguish between what can be done now and what is desirable but requires technology that does not yet exist.summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved. summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved. appendixes summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.27 a workshop agenda       monday, april 19, 2004  welcome charles brownstein, director, computer science and telecommunications board daniel jackson, chair, committee on building certifiably dependable systems   panel a: the strengths and limitations of process  isaac levendel, independent consultant gary mcgraw, cigital peter neumann, sri international  moderator: martyn thomas the focus of this panel is the contribution of particular processes and process characteristics to the successful development and effective certification of dependable systems.  what are the important characteristics of the processes that you believe should be followed when developing certifiably dependable systems? what evidence exists to support your opinion? how would it be possible to gain stronger evidence?  how important is evidence of the development process (or the absence of such evidence) to certification that a system meets its dependability objectives? does your answer depend on the nature of the system under consideration? if so, in what way?  what specific processes, if carried out effectively, could provide sufficient evidence that a system meets its functional requirements? does your answer change if the system is (a) preparing customer bills for a major utility company; (b) controlling a radiotherapy system; (c) providing flightcontrol for a flybywire civil airliner; (d) protecting military secrets in a system accessible to staff with lowerlevel security clearances?  how would your answers change for the same question, applied to nonfunctional requirements, such as performance and usability?  how do you measure or demonstrate the correlation between process metrics and product metrics for attributes such as reliability and security? summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.summary of a workshop on software certification and dependability  28 can it ever be reasonable to argue that a system is more dependable than the evidence available can demonstrate scientifically? what should be the role of engineering judgment in certifying systems?  what do you consider to be the strengths and limitations of process metrics in assessing the dependability of a computerbased system?  panel b: looking forward: new challenges, new opportunities  robert harper, carnegie mellon university shriram krishnamurthi, brown university james larus, microsoft research andré van tilborg, office of the secretary of defense  moderators: john rushby, lui sha  the focus of this panel is what has changed in the last 30 years with respect to certification.  how have the development of new technology and the spread of computing changed both the problems we face in certifying software, and the potential solutions to the certification problem?  how does the increasingly pervasive use of software in infrastructural systems affect the need for certification? does the greater sophistication of today™s users affect the problem?  what challenges and opportunities are presented by the widespread use of cots software and outsourcing? how can we build and certify systems in which critical and noncritical components work together?  should we move certification from a processcentric process to a productcentric process over time? if so, how?  what technologies are promising for aiding certification efforts? what role will there be for static methods such as static analysis, proof systems, and model checking? and for dynamic approaches involving, for example, runtime assertions and fault detection, masking, and recovery?  is incremental certification in traditional safetycritical systems such as flight control an important goal to work toward? what is the technology barrier to success?  panel c: certification and regulation: experience to date  brent goldfarb, university of maryland mats heimdahl, university of minnesota charles howell, mitre corporation robert noel, mitre corporation moderators: michael dewalt, scott wallsten  the focus of this panel is to understand how certification and regulation affect software development.  how do regulation and certification affect current missioncritical software development?  what are the differences and similarities between industrystandard, selfimposed regulations, and government or policyimposed regulations and standards? summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.workshop agenda  29 how do developers consider tradeoffs between improved safety/reliability and lower costs associated with less dependable (but perhaps more available) systems?  how do regulations and certification affect innovation?  within your field of expertise, what are the top three issues in regulation or government oversight that hamper system dependability? what are the top three regulatory approaches that have provided significant improvements in system dependability?  how are regulations and guidance within your organization promulgated and approved?  what are the differences and similarities between developing regulations and guidance material for hardware dependability and developing them for software dependability?  what are possible future challenges (economic, technological, or otherwise) with respect to current regulatory and certification approaches?  in your answers to these questions, what supporting data are available and what supporting data are needed to buttress analyses?   panel d: organizational context, incentives, safety culture, and management  richard cook, university of chicago gene rochlin, university of california, berkeley william scherlis, carnegie mellon university moderators: charles perrow, david woods  the focus of this panel is to explore the implications of certification within the organizational context.  how are software development organizations responsible for failures? how can software development organizations learn from failure? how can software development as a model of operations be integrated with operations?  how can software development better anticipate the reverberations of technology change?  do we need to highlight particular problems with organizational performance in the certification area, distinct from dependability in general? are the ﬁmental modelsﬂ of organizational routines more vulnerable in this area, thus requiring more demanding safeguards or personnel? how might this be achieved? by outsourcing, special training, incentives?  what role might insurance and liability play in achieving higher levels of certification? might liability threats promote a better safety culture? would the availability of insurance help (or make matters worsešthe moral hazard problem)? might insurers require evidence of reliability practices to make insurance available or reduce high premiums? are there precedents for this in other areas of safety in lowprobability/highrisk endeavors, and is there evidence the effort is successful?  to what extent should certification be left entirely to the producer? when should a firm hire specialists? when should a consumer require that an independent agency do the certification? are there tradesecret issues with outside involvement?  products are sold on the basis of performance and features. how can we make the promise of dependability attractive to consumers given its added cost?  reactions to panels summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.summary of a workshop on software certification and dependability  30tuesday, april 20, 2004   panel e: costeffectiveness of software engineering techniques  kent beck, three rivers institute matthias felleisen, northeastern university anthony hall, praxis critical systems  moderators: peter lee, jon pincus the focus of this panel is to understand the costeffectiveness of current software engineering techniques as they relate to dependability and certification.  what is the evidence for the costeffectiveness of various software engineering techniques, either today or looking toward the future? ideally, this would focus on the techniques™ roles in producing dependable software; however, strong evidence for costeffectiveness in other domains is also interesting. to the extent that evidence is currently limited, what kind of investigation could lead to strengthening it in the future?  are there particularly promising directions that can lead to particular software engineering techniques becoming more costeffective for creating dependable software?  panel f: case study: electronic voting  david dill, stanford university douglas jones, university of iowa avi rubin, johns hopkins university ted selker, massachusetts institute of technology  moderators: reed gardner, daniel jackson the focus of this panel is to explore a particular application domain within the context of certification, dependability, and regulation.  what role does software play in voting? how crucial is it? does it make things worse or better?  what properties of the software might be certified? what current approaches might help?  what would the certification process, if any, be? who would do it? what credibility would it have? who has to be trusted? what ulterior motives are at play?  with respect to issues of dependability and certification, is this case study typical, or unique in some ways?  group brainstorm  moderator: daniel jackson what are the important questions that have come out of this workshop that the committee should address in the rest of its study?  summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.31 b panelist biographies       panel a: the strengths and limitations of process  isaac levendel is an executive technology leader with 30 years of experience in managing large teams responsible for developing software and hardware products in telecommunications and computing. he has held leadership positions in all product development phases from the frontend to factory level and in customer support. his work has focused on ontime delivery of quality products to outside customers. levendel has achieved international recognition in hardware and software quality assessment and prediction, fault tolerance and dependability, and software technologies. he has authored numerous publications and books and has earned several patents, awards, and honors. levendel spent many years at lucent and motorola. currently he works as an independent consultant on company startup and delivers concentrated workshops on software development costeffectiveness. levendel earned a b.s. in hardware engineering from technion israel, an m.s. in computer science from the weitzman institute of science, and a ph.d. in computer engineering from the university of southern california.  gary mcgraw is chief technology officer at cigital (formerly reliable software technologies). working with cigital professional services and cigital labs, mcgraw sets software quality management technology strategy and oversees the cigital technology transfer process. his aim is to bridge the gap between cuttingedge science and realworld applicability and to transfer advanced technologies for use in the field. in addition to consulting with major commercial software vendors and consumers, he founded cigital™s software security group and chairs the cigital corporate technology council. he has written more than 50 peerreviewed technical publications and functions as principal investigator on grants from the air force research laboratory, darpa, national science foundation, and nist's advanced technology program. he serves on the advisory boards of authentica, counterpane, fortify, and indigo security as well as advising the computer science department at the university of california at davis. he writes a monthly column on software security for software development magazine and is a department editor for ieee security and privacy magazine. mcgraw is coauthor of five popular books: exploiting software; java security: hostile applets, holes, & antidotes; software fault injection: inoculating programs against errors; securing java: getting down to business with mobile code; and building secure software. mcgraw holds a b.a. in philosophy from the university of virginia and a dual ph.d. in cognitive science and computer science from indiana university. summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.summary of a workshop on software certification and dependability 32 peter neumann is principal scientist at sri international™s computer science laboratory. he is concerned with computer systems and networks, security, reliability, survivability, safety, and many riskrelated issues such as votingsystem integrity, crypto policy, social implications, and human needs including privacy. he moderates the acm risks forum, edits cacm's monthly inside risks column, chairs the acm committee on computers and public policy, cofounded people for internet responsibility (pfir), and cofounded the union for representative international internet cooperation and analysis (uriica). neumann is a fellow of the acm, ieee, and aaas, and is also an sri fellow. he is a member of the u.s. general accounting office executive council on information management and technology and of the california office of privacy protection advisory council. prior to joining sri international, neumann was at bell labs, during which time he was heavily involved in the multics development jointly with mit and honeywell. in addition, he has served on the faculties at stanford university, the university of california at berkeley, and the university of maryland. he is the 2002 recipient of the national computer system security award. he received a ph.d. from harvard university and the technical university of darmstadt.   panel b: looking forward: new challenges, new opportunities  robert harper is a professor of computer science at carnegie mellon university, where he has been a member of the faculty since 1988. from 1985 to 1988 he was a research fellow in the laboratory for foundations of computer science at edinburgh university. his research is concerned with the development and application of type theory to computer programming. as a graduate student he was a charter member of the prl project, which pioneered the mechanization of constructive type theory as a foundation for a comprehensive proof and program development system. while at edinburgh, harper collaborated with robin milner on the design, semantics, and implementation of standard ml. he designed and built the first implementation of the standard ml module system, and he coauthored (with milner and mads tofte) the definition of standard ml, which consists of the static and dynamic semantics of the language. also at edinburgh he collaborated with gordon plotkin on the design of the lf logical framework. at carnegie mellon, harper, together with peter lee and frank pfenning, directed the fox project, which sought to apply fundamental programming language theory and advanced compiler technology to the practice of building systems. his work on the fox project includes fundamental research on type systems for modular programming, the development of typed intermediate languages, typedirected translation to support efficient compilation methods, and the construction of certifying compilers. harper™s current research interests are type refinements for programming languages, applications of language technology to grid computing, and the use of selfadjusting computation to implement incremental and dynamic algorithms. harper earned a ph.d. from cornell university in 1985.  shriram krishnamurthi is an assistant professor of computer science at brown university. his research lies at the confluence of programming languages, software engineering, and computeraided verification. his recent work has focused on the semantics, verification, and use of new forms of software composition and interaction. he is a coauthor of the drscheme programming environment, the fastlink genetic linkage analysis package, and the book how to design programs. he has more recently written the text programming languages: application and interpretation. he also coordinates the teachscheme! high school computer science outreach program. krishnamurthi earned his ph.d. from rice university.  summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.panelist biographies 33james larus is an assistant director of microsoft research. in his career, he has applied programming languages and compiler technology and techniques to many areas of computer science. from 1989 until 1999, larus was a professor of computer science at the university of wisconsinmadison. his research covered a number of areas: new and far more efficient techniques for measuring and recording executing programs™ behavior, tools for analyzing and manipulating compiled and linked programs, new programming languages, tools for verifying program correctness, and techniques for compiler analysis and optimization. in addition, he also comanaged the darpa and nsfsponsored wisconsin wind tunnel research project, which developed new computer architectures and programming techniques for sharedmemory parallel computing. after a sabbatical at microsoft research, larus decided to stay and establish the software productivity tools (spt) research group in microsoft research. this group has developed, built, and demonstrated advanced tools that improve the design, development, debugging, and testing of software. larus received an a.b. from harvard college and an m.s. and a ph.d. from the university of california, berkeley.  andré van tilborg is director of the information systems directorate in the office of the deputy under secretary of defense (science and technology). he has oversight responsibility for the information technology research programs of the military services and agencies, including darpa. prior to assuming this position in 2002, van tilborg served, starting in 1994, as director of the mathematical, computer, and information sciences and technology division at the office of naval research. he joined onr in 1987 and was promoted to director of the computer science division in 1989. from 1984 to 1986, he was employed as a research faculty member in the computer science department at carnegie mellon university. his specialized areas of research included decentralized resource management of distributed computing systems and networks, and realtime embedded computing systems. in 19831984, van tilborg was employed as principal computer systems scientist at honeywell systems and research center, where he was program manager of the secure ada target trusted computer project. prior to working at honeywell, he was principal computer scientist at cornell aeronautical laboratory, where he served as head of the distributed computing division. he is the author of approximately 30 openliterature refereed technical publications and the editor of two books on realtime computing systems. he has served as conference chair and program chair for numerous international symposia, conferences, and workshops, particularly in the distributed and realtime computing systems technical areas. he holds a ph.d. in computer science from the state university of new york.   panel c: certification and regulatory experience and issues  brent goldfarb is an assistant professor of management and entrepreneurship at the robert h. smith school of business at the university of maryland. goldfarb studies how the production and exchange of technology differ from those for more traditional economic goods, and the implications of these differences for both business and public policy. goldfarb™s research has focused on government procurement of research at universities and the sale of and subsequent commercial development of their technologies. in particular, he has asked how research funds and incentives of knowledge producers are structured, and when the uncertainty inherent in producing and describing new technologies leads to poor market outcomes. a key result of this research is that while markets are problematic mediums for technology exchange, key institutions often evolve to mitigate problems. goldfarb earned an undergraduate degree in computer science and economics from telaviv university in 1996 and earned his ph.d. in economics from stanford university in 2002.  summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.summary of a workshop on software certification and dependability 34mats heimdahl is currently a mcknight presidential fellow and an associate professor of computer science and engineering at the university of minnesota. in addition, he is the director of the university of minnesota software engineering center (umsec). his research interests are in software engineering, safety critical systems, software safety, testing, requirements engineering, formal specification languages, and automated analysis of specifications. he is currently pursuing his interest in the following areas: static analysis of system and software requirements, for example, through model checking and theorem proving; how dynamic methods (e.g., simulation and testing) can be used to validate requirements specifications; modelbased software development; automated test case generation; and software certification. heimdahl is the recipient of the nsf career award, a mcknight landgrant professorship, and the mcknight presidential fellow award at the university of minnesota. he earned an m.s. in computer science and engineering from the royal institute of technology in stockholm, sweden, and a ph.d. in information and computer science from the university of california at irvine.  charles howell is a consulting engineer for software assurance in the center for innovative computing and informatics at the mitre corporation. the center focuses on exploring, evaluating, and applying advanced information technologies in critical systems for a wide range of organizations. his current interests include tools and notations to support the development, review, and maintenance of assurance cases for softwareintensive systems, and approaches to make large networked information systems more robust (i.e., less fragile). he is the principal investigator for a mitre research project on highconfidence software. he recently chaired a darpa panel developing a research agenda for building trustworthy systems and led an effort for the office of the deputy undersecretary of defense for science and technology evaluating science and technology requirements for softwareintensive systems. howell is the author of the article ﬁdependabilityﬂ in john wiley & sons™ second edition of the encyclopedia of software engineering and coauthor of the book solid software. he is a senior member of the ieee and holds an active top secret/sci clearance. howell holds a b.s. in mathematical sciences from virginia commonwealth university.  robert noel is a lead software systems engineer with mitre™s center for air force c2 systems. noel has been working in military air traffic control, landing systems, and avionics certification programs since 1989. most recently, he has been supporting the battle control system programs, which are modernizing the equipment used in the u.s. air defense sectors for air battle management. prior to that, noel was the lead software engineer for the usaf office responsible for global air traffic management (gatm) and navigation safety certification of usaf aircraft (19972002). noel received a b.s. in math from the university of lowell in 1984 and an m.s. in system engineering from boston university in 1994.  panel d: organizational context, incentives, safety culture, and management  richard cook is a physician, educator, and researcher at the university of chicago. his current research interests include the study of human error, the role of technology in human expert performance, and patient safety. cook graduated from lawrence university in appleton, wisconsin, where he was a scholar of the university. he then worked in the computer industry in supercomputer system design and engineering applications. he received the m.d. degree from the university of cincinnati in 1986, where he was a general surgery intern. between 1987 and 1991 he was a researcher on expert human performance in anesthesiology and industrial and systems engineering at the ohio state university. he completed an anesthesiology residency at ohio state in 1994. since summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.panelist biographies 35november 1994 he has been a faculty member in the department of anesthesia and intensive care of the university of chicago. he is an associate director for the gaps (getting at patient safety) project sponsored by the veterans health administration. cook has been involved with the national patient safety foundation since its inception and sits on the foundation™s board. he is internationally recognized as a leading expert on medical accidents, complex system failures, and human performance at the sharp end of these systems. he has investigated a variety of problems in such diverse areas as urban mass transportation, semiconductor manufacturing, and military software systems. he is often a consultant for notforprofit organizations, government agencies, and academic groups. cook™s most often cited publications are ﬁgaps in the continuity of patient care and progress in patient safety,ﬂ ﬁoperating at the sharp end: the complexity of human error,ﬂ ﬁadapting to new technology in the operating room,ﬂ and the report a tale of two stories: contrasting views of patient safety. gene rochlin received his ph.d. in physics from the university of chicago in 1966. following his retraining in political science at mit and harvard in 19731974, his research interests in the cultural, social, political, and organizational implications and consequences of technology have extended to studies of nuclear power and nuclear proliferation, advanced information technologies, and the politics and political economy of energy and environmental policy. he was a principal of the berkeley high reliability project, a multidisciplinary team that has studied the organizational aspects of safetycritical systems such as nuclear power operations and air traffic control. his recent book about the shortterm effects and longterm consequences of the increasingly widespread ﬁembeddingﬂ of computers as structural elements or organization, and the attendant creation of new modes of dependence and vulnerability, has led to a growing involvement in studies of potential threats not only to it systems per se, but also to the many critical systems in society that have come to depend on them for operational reliability and security. he also teaches courses on the principles, theories, and methods of social studies of science and technology, as well as courses on social theories of risk. william scherlis is a professor in the school of computer science at carnegie mellon university and a member of cmu™s international software research institute (isri). he is the founding director of cmu™s ph.d. program in software engineering. he is a coprincipal investigator of the 5year high dependability computing project (hdcp) with nasa, in which cmu leads a collaboration with five universities to help nasa address longterm software dependability challenges. his research relates to software assurance, software evolution, and technology to support software teams. scherlis is involved in a number of activities related to technology and policy, recently testifying before congress on innovation, government information technology, and roles for a federal cio. he interrupted his career at cmu to serve at darpa for 6 years, departing as a senior executive responsible for the coordination of software research. while at darpa he had responsibility for research and strategy in computer security, highperformance computing, information infrastructure, and other topics. scherlis chaired a national research council study on information technology, innovation, and egovernment, and has led or participated in national studies related to crisis response, analyst information management, department of defense software management, and health care informatics infrastructure. he has served as program chair for a number of technical conferences, including the acm foundations of software engineering symposium. scherlis received an a.b. from harvard university and a ph.d. in computer science from stanford university.    summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.summary of a workshop on software certification and dependability 36panel e: costeffectiveness of software engineering techniques: what evidence exists? kent beck is the founder and director of three rivers institute (tri). his career has combined the practice of software development with reflection, innovation, and communication. his contributions to software development include patterns for software, the rediscovery of testfirst programming, the xunit family of developer testing tools, and extreme programming. he currently divides his time between writing, programming, and coaching. beck is the author or coauthor of contributing to eclipse, testdriven development: by example, extreme programming explained, planning extreme programming, the smalltalk best practice patterns, and the forthcoming junit pocket guide. he received his b.s. and m.s. in computer science from the university of oregon.  matthias felleisen is a professor at northeastern university™s college of computer sciences. his areas of interest include plt scheme (drscheme and friends), how to design programs (htdp), and how to use scheme (htus). their development drives the analysis of current versions of scheme (the language) and drscheme (the programming environment). the goal is to support the entire spectrum of program development, from scripting to large complex systems. when problems are noticed, the language or the environment (or both) are modified. changes are evaluated with respect to language design, analysis, and implementation as well as software engineering. results are modeled and published so that others in the pl and se community can adapt them as desired. felleisen™s primary educational project is the teachscheme! project. its purpose is to change the introductory curriculum at the high school and college levels. instead of students being exposed to languages with a heavy syntax and commercial programming environments, they are introduced instead to a series of simple languages (small subsets of scheme with a few additional constructs) and a programming environment tailored to beginners. this project thus creates a pool of users who stresstest our languages and environment.  anthony hall is a principal consultant with praxis critical systems ltd. he is a specialist in requirements and specification methods and the development of softwareintensive systems. he has worked for many years on the development of critical operational systems. during this time he has pioneered the application of formal methods to industrial practice. he was chief designer on cdis, a successful air traffic information system, and a certification authority developed to itsec e6 standards. together with colleagues in praxis critical systems, hall has brought together extensive practical experience and the latest research findings to develop reveal, a principled yet practical approach to requirements engineering, and correctness by construction, a process for costeffective development of critical software. hall received an m.a. and a ph.d. from oxford university. he is a fellow of the royal academy of engineering, a chartered engineer, and a fellow of the british computer society.  panel f: case study: electronic voting david dill is a professor of computer science and, by courtesy, electrical engineering at stanford university. he has been on the faculty at stanford since 1987. his primary research interests relate to the theory and application of formal verification techniques to system designs, including hardware, protocols, and software. he also has an interest in voting technology and related policy issues and has done research in asynchronous circuit verification and synthesis, and in verification methods for hard realtime systems. he was the chair of the computeraided verification conference held at stanford university in 1994. from july 1995 to september 1996, he was chief scientist at 0in design summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.panelist biographies 37automation. dill™s ph.d. thesis, ﬁtrace theory for automatic hierarchical verification of speed independent circuits,ﬂ was named as a distinguished dissertation by acm and published as such by mit press in 1988. he was the recipient of a presidential young investigator award from the national science foundation in 1988, and a young investigator award from the office of naval research in 1991. he has received best paper awards at the international conference on computer design in 1991 and the design automation conference in 1993 and 1998. he was named a fellow of the ieee in 2001 for his contributions to verification of circuits and systems. dill served on the california secretary of state™s ad hoc task force on touch screen voting in 2003, and he is currently on the ieee p1583 voting standards committee and the santa clara county dre citizens oversight committee. dill holds an s.b. in electrical engineering and computer science from massachusetts institute of technology and an m.s. and a ph.d. from carnegie mellon university.  douglas jones is currently an associate professor of computer science at the university of iowa, where his teaching focuses on the intersection of computer architecture and operating systems. he is a member of the association for computing machinery (acm), the u.s. public policy committee of the acm, the national committee on voting integrity, the american association for the advancement of science, and computer professionals for social responsibility. jones is currently vice president and chief technical officer of the open voting consortium and a member of the advisory board of verifiedvoting.org, and he has served for a decade on iowa's board of examiners for voting machines and electronic voting systems, of which he is past chair. in the wake of the 2000 election, he testified before the u.s. commission on civil rights and the house science committee. he also gave the keynote address at the second interamerican conference on voting technology, and he contributed chapter 1 to the book secure electronic voting. he received his b.s. in physics from carnegie mellon university in 1973 and his m.s. and ph.d. in computer science from the university of illinois at urbanachampaign in 1976 and 1980.  avi rubin is a professor of computer science as well as technical director of the information security institute at johns hopkins university. prior to joining johns hopkins he was a research scientist at at&t labs. rubin is the author or coauthor of several books, including firewalls and internet security, second edition (with bill cheswick and steve bellovin, addisonwesley, 2003), whitehat security arsenal (addisonwesley, 2001), and web security sourcebook (with dan geer and marcus ranum, john wiley & sons, 1997). he is associate editor of acm transactions on internet technology and an advisory board member of springer's information security and cryptography book series. rubin serves on the board of directors of the usenix association and on the darpa information science and technology study group. he received his b.s. (computer science), m.s.e., and ph.d. in computer science and engineering from the university of michigan.  ted selker, at the mit media and arts technology laboratory, is the director of the context aware computing lab, which strives to create a world in which people™s desires and intentions cause computers to help them. this work creates environments that use sensors and artificial intelligence to create socalled ﬁvirtual sensors,ﬂ adaptive models of users to create keyboardless computer scenarios. selker is also director of a counterintelligence specialinterest group on design and domestic life, a forum for discussing kitchens and domestic technology, lifestyles, and supply changes as a result of technology. he is creating an industrial design intelligence forum to discuss the need to understand cognitive science and quantitative experiments in doing product design. as part of the caltech/mit voting project, selker has contributed important papers that have been useful to creating legislation. he has also helped the carter/ford voting project and is part of the ieee voting standards committee. a large part of selker™s work in voting concerns inventing and testing new technology for voting. examples include new approaches to user interfaces, registration database summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.summary of a workshop on software certification and dependability 38testers, ballot design systems, secure online architectures, and new approaches for using simulation to evaluate political platforms. prior to joining mit™s faculty in november 1999, selker directed the user systems ergonomics research lab at the ibm almaden research center, where he became an ibm fellow in 1996. he has served as a consulting professor at stanford university, taught at hampshire, the university of massachusetts at amherst, and brown university, and worked at xerox parc and atari research labs. his research has contributed to products ranging from notebook computers to operating systems. his work takes the form of prototype concept products supported by cognitive science research. he is known for the design of the ﬁtrackpoint iiiﬂ inkeyboard pointing device now found in compaq, fujitsu, hp, ibm, sony, ti, and other computers; for creating the ﬁcoachﬂ adaptive agent that improves user performance (warp guides in os/2); and for the design of the 755cv notebook computer that doubles as an lcd projector. he is the author of numerous patents and papers in refereed journals and conference proceedings. he received his b.s. in applied mathematics from brown university, his m.s. in computer/information sciences from the university of massachusetts at amherst, and a ph.d. in computer science from the city university of new york.  summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.39 c committee member and staff biographies       committee member biographies  daniel jackson (chair) is an associate professor of computer science at the massachusetts institute of technology. he received an m.a. from oxford university (1984) in physics and his s.m. (1988) and ph.d. (1992) from mit in computer science. he was a software engineer for logica uk ltd. and an assistant professor of computer science at carnegie mellon university, and has been an associate professor at mit since 1997. he has sat on the editorial boards of acm™s transactions on programming languages and systems and transactions on software engineering and methodology, and of springer™s software tools for technology transfer, and he has served on the program committee of more than 20 international conferences, including fse, issta, oopsla, and cav. he has broad interests in several areas of software construction, including development methods, automatic analysis of designs and specifications, and reverse engineering of code.  joshua bloch is a principal software engineer at google. previously he was a distinguished engineer at sun microsystems, where he was an architect in the core java platform group. he wrote the bestselling book effective java (addisonwesley, 2001), winner of the 2002 jolt award. he led the design and implementation of many parts of the java platform, including the collections framework, tiger language enhancements (jsr201), annotations (jsr175), multiprecision arithmetic, preferences (jsr10), and assertions (jsr41). previously he was a senior systems designer at transarc corporation, where he designed and implemented many parts of the encina distributed transaction processing system. he holds a ph.d. in computer science from carnegie mellon university and a b.s. in computer science from columbia university.  michael dewalt is chief scientist, aviation systems, for certification services, inc., a seattlearea aviation consultancy. dewalt is authorized by the faa, as a consultant designated engineering representative (der), to approve software for any aircraft system, at any software level. in addition to his der duties, he helps clients who have unusual project requirements to develop acceptable softwareapproval techniques. for 11 years, he was the faa™s national resource specialist (nrs) for aircraft software. he was responsible for starting the international committee that created do178b and served as its secretary. he was also secretary of the committee that created do248b and do278. dewalt has been involved with both civil and military software avionics and certification summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.summary of a workshop on software certification and dependability 40 for 26 years, working for airframe manufacturers and avionics suppliers. in addition to his der certificate, he has a b.s.e.e., a master™s in software engineering, and a commercial pilot™s license.  reed gardner is a professor and chair of the department of medical informatics at the university of utah. he has been a codirector of medical computing at lds, cottonwood, and alta view hospitals in salt lake city. he is one of the principal developers and evaluators of the medical expert system known as help (health evaluation through logical processing). gardner™s primary academic and research interests are evaluating the benefits of medical expert systems as they relate to quality and costeffectiveness; development of software oversight committee methods for evaluation of safety and effectiveness of medical software and systems; public health informatics; applying computers in intensive care medicine; and developing devices and communications methods to acquire patient data at the bedside. he is the author or coauthor of more than 300 articles in the fields of medical informatics and engineering. gardner has been a journal editor and on the editorial boards of critical care medicine and other critical care journals as well as the journal of the american medical informatics association (jamia). he is a fellow of the american college of medical informatics and past president of the american medical informatics association. gardner holds a b.s.e.e. from the university of utah (1960) in electrical engineering and ph.d. from the university of utah (1968) in biophysics and bioengineering.  peter lee is a professor of computer science at carnegie mellon university. he joined the faculty of carnegie mellon™s school of computer science in 1987, after completing his doctoral studies at the university of michigan. he is known internationally for his research contributions in areas related to information assurance, especially the application of programming language technology to operating systems design, networking, and computer security. lee is best known for his coinvention of the ﬁproofcarrying codeﬂ technology for ensuring the security of mobile code. today, proofcarrying code is the subject of several darpa and nsfsponsored research projects and forms the basis for the products and services provided by cedilla systems incorporated, a java technology startup company he cofounded in 1999. lee is also the associate dean for undergraduate education in carnegie mellon™s school of computer science. in this capacity, he has been involved in the administration of carnegie mellon™s undergraduate programs in computer science. his tenure as associate dean has seen the undergraduate program rise to national prominence, both for its intensive problemoriented curriculum and for its success in attracting and retaining women in the field of computer science. he has published extensively in major international symposia and is the author of two books. he has been invited to give distinguished lectures and keynote addresses at major universities and symposia and has been called on as an expert witness in key judicial court cases such as the sun v. microsoft ﬁjava lawsuit.ﬂ lee has also been a member of the army science board since 1997, for which he has served on four major summer studies, and a technology panel cochair for the 2001 defense science board study on defense science and technology. in addition to holding m.s. and ph.d. degrees in computer and communication sciences, lee earned a b.s. in mathematics from the university of michigan in 1982. he has been a principal investigator on several darpa, nsf, and nasa grants and contracts.  steven b. lipner is director of security engineering strategy at microsoft. he was previously the head of microsoft™s security response center. he will be responsible for defining microsoft's security development processes and plans for their application to new product generations. his team will also define and execute new programs to help microsoft customers deploy and operate their systems securely. lipner, who was previously the director of security assurance, has been at microsoft since 1999. he joined the company after working at the mitre corp. and digital equipment corp., among others. he has almost 30 years™ experience in computer and network summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.committee member and staff biographies 41security as a researcher, development manager, and business unit manager. he holds eight patents in computer and network security and is a member of the national computer systems security and privacy advisory board. he holds an m.s. (1966) in civil engineering from the massachusetts institute of technology.  charles (chick) perrow is a professor emeritus of sociology at yale university. he is a past vice president of the eastern sociological society; a fellow of the center for advanced study in the behavioral sciences, 19811982, 1999; fellow of the american academy for the advancement of science; resident scholar, russell sage foundation, 19901991; fellow, shelly cullom davis center for historical studies, 19951996; visitor, institute for advanced study, 19951996; and a former member of the national research council™s committee on human factors, of the sociology panel of the national science foundation, and of the editorial boards of several journals. an organizational theorist, he is the author of six booksšthe radical attack on business (1972), organizational analysis: a sociological view (1970), complex organizations: a critical essay (1972; 3rd ed., 1986), normal accidents: living with high risk technologies (1984; revised, 1999), the aids disaster: the failure of organizations in new york and the nation (1990) with mauro guillen, organizing america: wealth, power, and the origins of american capitalism (2002)šand over 50 articles. his current interests are in managing complexly interactive, tightly coupled systems (including hospitals, nuclear plants, power grids, the space program, and intelligent transportation systems); the challenge and limits of networkcentric warfare; selforganizing properties of the internet, the electric power grid, networks of small firms, and terrorist organizations; and the possibilities for restructuring society to reduce our vulnerability to increasing disasters, whether natural, industrial/technological, or deliberate. these grow out of his work on ﬁnormal accidents,ﬂ with its emphasis on organizational design and systems theory, and reflect current consultations and workshops with nasa, the faa, naval war college, daimlerchrysler, nih, and nsf.  jon pincus works at microsoft research on software reliability tools and technologies, concentrating on static analysis. as founder and chief technology officer of intrinsa corporation, he was one of the original developers of prefix and continues to be involved in its development and deployment inside microsoft. before that, he worked on cad and document management systems and collected the usual degrees from the usual institutions.  john rushby is program director for formal methods and dependable systems at sri international. he worked at the atlas computer laboratory (now part of the computation and information department of the central laboratory of the uk research councils) from 1974 to 1975, as a lecturer in the computer science department at manchester university from 1975 to 1979, and as a research associate in the department of computing science at the university of newcastle upon tyne from 1979 to 1982, before joining sri in 1983. at sri, he was successively promoted to computer scientist, senior computer scientist, program manager and, from 1986 to 1990, the acting director of csl. in 1991 he assumed his current role as program director. he is interested primarily in the design and assurance of ﬁcritical systems,ﬂ including properties such as security and safety, mechanisms such as kernelization and fault tolerance, and formal methods for assurance. he considers the main value of formal methods to lie in their use for constructing mathematical models whose properties can be analyzed and verified by computational means. this has led him to focus on the development of effective tools for formal methods. rushby holds his ph.d. in computer science from the university of newcastle (1977).  lui sha is a professor of computer science at the university of illinois at urbanachampaign. before joining uiuc in 1998, he was a senior member of the technical staff at the software engineering summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.summary of a workshop on software certification and dependability 42 institute at carnegie mellon university, which he joined in 1986. sha™s accomplishments are many, including critical assistance on nasa™s mars pathfinder project, the application of rate monotonic theory to global positioning system software, and design assistance with the air force™s f22 raptor project. his knowledge and application of theory and software designs to realtime computing platforms have made him an indispensable resource for numerous efforts. he is a leader in the realtime computing community, was the chair of the ieee realtime systems technical committee from 1999 to 2000, and received that committee™s outstanding technical contributions and leadership award in december 2001. he has consulted on many national hightechnology projects, and his work has been recognized by several national leaders. he holds a ph.d. and an m.s. in electrical and computer engineering from carnegie mellon university and a b.s.e.e. from mcgill university.  martyn thomas graduated as a biochemist in 1969 from university college, london, and immediately entered the computer industry. from 1969 to 1983, he worked in universities (in london and the netherlands), in industry (designing switching software for stc), and at the south west universities regional computer centre in bath. in 1983 (with david bean), he founded a software engineering company, praxis, to exploit modern software development methods. in december 1992, praxis was sold to deloitte and touche, an international firm of accountants and management consultants, and thomas became a deloitte consulting international partner while remaining chair and, later, managing director of praxis. he left deloitte consulting in 1997. thomas is now an independent consultant software engineer, specializing in the assessment of large, realtime, safetycritical, softwareintensive systems, software engineering, and engineering management. he is a member of the expert witness institute and serves as an expert witness where complex software engineering issues are involved. he is a visiting professor in software engineering at the university of oxford and a visiting professor at the university of bristol and the university of wales, aberystwyth. he has advised the uk government and the commission of the european union on policy in the fields of software engineering and vlsi design. he has had close links with the academic research community throughout his career, as a member of two university funding council research assessments in computer science, numerous international conference program committees, and several uk government and research council panels and boards. he has been a member of the it foresight panel of the uk government office of science and technology, a member of the advisory board for the dera systems and software engineering centre, and a member of the research advisory council of the uk civil aviation authority.  he is a fellow of the british computer society and of the institution of electrical engineers. he currently serves on the management committee of the engineering and technology forum of the british computer society, the it sector panel of the iee, the industry advisory board for ieee software, the advisory group to the foresight cyber trust and crime prevention project, the executive of the uk computing research committee, and as a member of the advisory council of the foundation for information policy research. he is chair of the steering committee for the uk interdisciplinary research collaboration on dependable systems (dirc) and a member of the council of epsrc, the uk engineering and physical sciences research council. scott wallsten is a fellow at the aeibrookings joint center for regulatory studies and a resident scholar at the american enterprise institute. before joining the joint center, he had been an economist at the world bank, a scholar at the stanford institute for economic policy research, and a staff economist at the u.s. president™s council of economic advisers. his interests include industrial organization and public policy, and his research has focused on regulation, privatization, competition, and science and technology policy. his work has been published in journals including the rand summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.committee member and staff biographies 43journal of economics, the journal of industrial economics, and the journal of regulatory economics, and regulation. david woods is a professor in the institute for ergonomics at the ohio state university. he was president (19981999) and is a fellow of the human factors and ergonomic society, and is also a fellow of the american psychological society and the american psychological association. he has received the ely award for best paper in the journal human factors (1994), the kraft innovators award from the human factors and ergonomic society for developing the foundations of cognitive engineering, a laurels award from aviation week and space technology (1995) for research on the human factors of highly automated cockpits, and five patents for computerized decision aids. he was on the board of the national patient safety foundation from its founding until 2002 and was associate director of the midwest center for inquiry on patient safety (gaps center) of the veterans health administration from 1999 to 2003. he is coauthor of behind human error and has written over 40 book chapters and over 45 journal articles on problems such as human error and how complex systems fail, how to make intelligent systems team players, how to support anomaly response and diagnosis, cooperative cognition, and automation surprises in application areas such as space operations, automated flight decks, nuclear power plant safety, and criticalcare medicine. his current work examines the themes of data overload, how complex systems fail, humanrobot coordination, and how distributed teams modify plans in progress. based on this body of work he has been an advisor to various government agencies and other organizations on issues pertaining to human performance and error, including the federal aviation administration, nuclear regulatory commission, national patient safety foundation, veterans health administration, and national science foundation. most recently he served on a national academy of engineering/institute of medicine study panel applying engineering to improve health care systems, and on a national research council panel that defined the future of the national air transportation system. woods earned a ph.d. from purdue university in 1979.   staff biographies  lynette i. millett is a program officer and study director at the computer science and telecommunications board of the national research council and has been with cstb since 2000. she is currently involved in several cstb projects, including a comprehensive exploration of privacy in the information age, an examination of radio frequency identification technologies, and a study on biometrics, in addition to this project on certification and dependable software systems. she recently completed a cstb project that produced the reports who goes there? authentication technologies and their privacy implications and idsšnot that easy: questions about nationwide identity systems. before joining cstb, she was involved in research on static analysis techniques for concurrent programming languages as well as research on valuesensitive design and informed consent online. she has an m.sc. in computer science from cornell university along with a b.a. in mathematics and computer science with honors from colby college.  phil hilliard was a research associate with the computer science and telecommunications board until may 2004. he provided research support as part of the professional staff and worked on projects focusing on telecommunications research, supercomputing, and dependable systems. before joining the national academies, he worked at bellsouth in atlanta, georgia, as a competitive intelligence analyst and at ncr as a technical writer and trainer. he has a master™s in library and information science from florida state university (2003), an m.b.a. from georgia state university (2000), and a b.s. in computer and information technology from the georgia institute of technology (1986). summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved.summary of a workshop on software certification and dependability 44 penelope smith worked temporarily with the computer science and telecommunications board between february and july 2004 as a senior program assistant. prior to joining the national academies, she worked in rural angola as a health project manager and community health advisor for concern worldwide. she also worked for emory university as a project coordinator and researcher on reproductive health and hiv, and for the centers for disease control as a technology transfer evaluator for hiv/aids programs. she earned an m.p.h. from emory university and a b.a. in medical anthropology from the university of california at santa cruz. she is also a certified health education specialist. summary of a workshop on software certification and dependabilitycopyright national academy of sciences. all rights reserved. 45 what is cstb? as a part of the national research council, the computer science and telecommunications board (cstb) was established in 1986 to provide independent advice to the federal government on technical and public policy issues relating to computing and communications. composed of leaders from industry and academia, cstb conducts studies of critical national issues and makes recommendations to government, industry, and academia. cstb also provides a neutral meeting ground for consideration of complex issues where resolution and action may be premature. it convenes discussions that bring together principals from the public and private sectors, ensuring consideration of key perspectives. the majority of cstb™s work is requested by federal agencies and congress, consistent with its national academies™ context. a pioneer in framing and analyzing internet policy issues, cstb is unique in its comprehensive scope and its effective, interdisciplinary appraisal of technical, economic, social, and policy issues. beginning with early work in computer and communications security, cyberassurance and information systems trustworthiness have been a crosscutting theme in cstb™s work. cstb has produced several reports that have become classics in the field, and it continues to address these topics as they grow in importance. to do its work, cstb draws on some of the best minds in the country and from around the world, inviting experts to participate in its projects as a public service. studies are conducted by balanced committees without direct financial interests in the topics they are addressing. those committees meet, confer electronically, and build analyses through their deliberations. additional expertise is tapped in a rigorous process of review and critique, further enhancing the quality of cstb reports. by engaging groups of principals, cstb gets the facts and insights critical to assessing key issues. the mission of cstb is to  respond to requests from the government, nonprofit organizations, and private industry for advice on computer and telecommunications issues and from the government for advice on computer and telecommunications systems planning, utilization, and modernization;  monitor and promote the health of the fields of computer science and telecommunications, with attention to issues of human resources, information infrastructure, and societal impacts;  initiate and conduct studies involving computer science, technology, and telecommunications as critical resources; and foster interaction among the disciplines underlying computing and telecommunications technologies and other fields, at large and within the national academies.  cstb projects address a diverse range of topics affected by the evolution of information technology. recently completed reports include who goes there? authentication through the lens of privacy; the internet under crisis conditions: learning from september 11; cybersecurity today and tomorrow: pay now or pay later; youth, pornography, and the internet; broadband: bringing home the bits; and innovation in information technology. for further information about cstb reports and active projects, see <http://cstb.org>. 
detailsdistribution, posting, or copying of this pdf is strictly prohibited without written permission of the national academies press. (request permission) unless otherwise indicated, all materials in this pdf are copyrighted by the national academy of sciences.copyright © national academy of sciences. all rights reserved.the national academies pressvisit the national academies press at nap.edu and login or register to get:œ œ 10% off the price of print titlesœ special offers and discountsget this bookfind related titlesthis pdf is available at sharecontributorshttp://nap.edu/24833software update as a mechanism for resilience and security:proceedings of a workshop92 pages | 8.5 x 11 | paperbackisbn 9780309462884 | doi 10.17226/24833anne frances johnson and lynette i. millett, rapporteurs; committee on cyberresilience workshop series; forum on cyber resilience; computer science andtelecommunications board; division on engineering and physical sciences;national academies of sciences, engineering, and medicinesoftware update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.annespine = .198"software update as a mechanism for  resilience and security resilienceworkshop seriesforum onproceedings of a workshopforum on cyber resilience workshop seriessoftware update as a mechanism for resilience and security cyber r03217 software security cover final.indd 139/6/17 12:10 pmsoftware update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.the national academies press 500 fifth street, nw washington, dc 20001this project was supported by the national science foundation under award number cns14194917 and the national institute of standards and technology under award number 60nanb16d311. any opinions, ndings, conclusions, or recommendations expressed in this publication do not necessarily re˚ect the views of any organization or agency that provided support for this project.international standard book number13: 9780309462884international standard book number10: 0309462886digital object identier: https://doi.org/10.17226/24833additional copies of this publication are available for sale from the national academies press, 500 fifth street, nw, keck 360, washington, dc 20001; (800) 6246242 or (202) 3343313; http://www.nap.edu.copyright 2017 by the national academy of sciences. all rights reserved.printed in the united states of americasuggested citation: national academies of sciences, engineering, and medicine. 2017. software update as a mechanism for resilience and security: proceedings of a workshop. forum on cyber resilience workshop series. washington, dc: the national academies press. doi: https://doi.org/10.17226/24833.consensus study reports published by the national academies of sciences, engineering, and medicine document the evidencebased consensus on the study™s statement of task by an authoring committee of experts. reports typically include ndings, conclusions, and recommendations based on information gathered by the committee and the committee™s deliberations. each report has been subjected to a rigorous and independent peerreview process and it represents the position of the national academies on the statement of task.proceedings published by the national academies of sciences, engineering, and medicine chronicle the presentations and discussions at a workshop, symposium, or other event convened by the national academies. the statements and opinions contained in proceedings are those of the participants and are not endorsed by other participants, the planning committee, or the national academies.for information about other products and activities of the national academies, please visit www.nationalacademies.org/about/whatwedo.other recent reports of the computer science and  telecommunications boardcryptographic agility and interoperability: proceedings of a workshop (2017)foundational cybersecurity research: improving science, engineering, and institutions (2017)information technology and the u.s. workforce: where are we and where do we go from here? (2017)a 21st century cyberphysical systems education (2016)continuing innovation in information technology: workshop report (2016)data breach aftermath and recovery for individuals and institutions: proceedings of a workshop (2016)exploring encryption and potential mechanisms for authorized government access to plaintext: proceedings of a workshop (2016)future directions for nsf advanced computing infrastructure to support u.s. science and engineering in 20172020 (2016)privacy research and best practices: summary of a workshop for the intelligence community (2016)bulk collection of signals intelligence: technical options (2015)cybersecurity dilemmas: technology, policy, and incentives: summary of discussions at the 2014 raymond and beverly sackler u.s.u.k. scientic forum (2015)interim report on 21st century cyberphysical systems education (2015)a review of the next generation air transportation system: implications and importance of system architecture (2015)telecommunications research and engineering at the communications technology laboratory of the department of commerce: meeting the nation™s telecommunications needs (2015)telecommunications research and engineering at the institute for telecommunication sciences of the department of commerce: meeting the nation™s telecommunications needs (2015)at the nexus of cybersecurity and public policy: some basic concepts and issues (2014)future directions for nsf advanced computing infrastructure to support u.s. science and engineering in 20172020: an interim report (2014)geotargeted alerts and warnings: report of a workshop on current knowledge and research gaps (2013)professionalizing the nation™s cybersecurity workforce? criteria for future decisionmaking (2013)public response to alerts and warnings using social media: summary of a workshop on current knowledge and research gaps (2013)computing research for sustainability (2012)continuing innovation in information technology (2012)the safety challenge and promise of automotive electronics: insights from unintended acceleration (2012, with the board on energy and environmental systems and the transportation research board)limited copies of cstb reports are available free of charge from:computer science and telecommunications boardkeck center of the national academies of sciences, engineering, and medicine500 fifth street, nw, washington, dc 20001(202) 3342605/cstb@nas.eduwww.cstb.org r03217 software security cover final.indd 469/6/17 12:10 pmsoftware update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.proceedings of a workshopworkshop seriesforum on resilience cyber software update as a mechanism  for resilience and security anne frances johnson and lynette i. millett, rapporteurssoftware update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.the national academy of sciences was established in 1863 by an act of congress, signed by president lincoln, as a private, nongovernmental institution to advise the nation on issues related to science and technology. members are elected by their peers for outstanding contributions to research. dr. marcia mcnutt is president.the national academy of engineering was established in 1964 under the charter of the national academy of sciences to bring the practices of engineering to advising the nation. members are elected by their peers for extraordinary contributions to engineering. dr. c. d. mote, jr., is president.the national academy of medicine (formerly the institute of medicine) was established in 1970 under the charter of the national academy of sciences to advise the nation on medical and health issues. members are elected by their peers for distinguished contributions to medicine and health. dr. victor j. dzau is president.the three academies work together as the national academies of sciences, engineering, and medicine to provide independent, objective analysis and advice to the nation and conduct other activities to solve complex problems and inform public policy decisions. the national academies also encourage education and research, recognize outstanding contributions to knowledge, and increase public understanding in matters of science, engineering, and medicine. learn more about the national academies of sciences, engineering, and medicine at www.nationalacademies.org. software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.iiicommittee on cyber resilience workshop seriesfred b. schneider, nae,1 cornell university, chairanita allen, nam,2 university of pennsylvaniaeric grosse, independent consultantbutler w. lampson, nas3/nae, microsoft corporationsusan landau, worcester polytechnic institutestafflynette i. millett, director, forum on cyber resilienceemily grumbling, program ofcershenae bradley, senior program assistant1national academy of engineering.2national academy of medicine.3national academy of sciences.software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.ivforum on cyber resiliencefred b. schneider, nae, cornell university, chairanita allen, nam, university of pennsylvaniabob blakley, citigroupfred cate, indiana universitydavid d. clark, nae, massachusetts institute of technologyrichard danzig, johns hopkins university applied physics laboratory eric grosse, independent consultantdavid hoffman, intel corporationpaul kocher, cryptography research, inc. tadayoshi kohno, university of washingtonbutler w. lampson, nas/nae, microsoft corporationsusan landau, worcester polytechnic institutesteven b. lipner, nae, independent consultantdeirdre k. mulligan, university of california, berkeleytony sager, center for internet securitywilliam sanders, university of illinois, urbanachampaignpeter swire, georgia institute of technologydavid vladeck, georgetown universitymary ellen zurko, independent cybersecurity consultantex ofciodonna f. dodson, national institute for standards and technologyjames kurose, national science foundationwilliam b. martin, national security agencystafflynette i. millett, director emily grumbling, program ofcerkatiria ortiz, research associateshenae bradley, administrative assistantfor more information about the forum, see its website at http://www.cyberforum.org, or email the forum at cyberforum@nas.edu.software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.vcomputer science and telecommunications boardfarnam jahanian, carnegie mellon university, cstb chair luiz andré barroso, google, inc.steven m. bellovin, nae, columbia universityrobert f. brammer, brammer technology, llcdavid culler, nae, university of california, berkeleyedward frank, cloud parity, inc.laura haas, nae, ibm corporationmark horowitz, nae, stanford universityeric horvitz, nae, microsoft corporationvijay kumar, nae, university of pennsylvaniabeth mynatt, georgia institute of technologycraig partridge, raytheon bbn technologiesdaniela rus, nae, massachusetts institute of technology fred b. schneider, nae, cornell universitymargo seltzer, harvard universityjohn stankovic, university of virginiamoshe vardi, nas/nae, ricekatherine yelick, nae, university of california, berkeleystaffjon eisenberg, director lynette i. millett, associate director virginia bacon talati, program ofcershenae bradley, administrative assistantjanel dear, senior program assistantemily grumbling, program ofcerrenee hawkins, financial and administrative managerkatiria ortiz, research associate for more information on cstb, see its website at http://www.cstb.org, write to cstb,national research council, 500 fifth street, nw, washington, dc 20001, call (202) 3342605,  or email the cstb at cstb@nas.edu.software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.viacknowledgment of reviewersthis proceedings of a workshop was reviewed in draft form by individuals chosen for their diverse perspectives and technical expertise. the purpose of this independent review is to provide candid and critical comments that will assist the national academies of sciences, engineering, and medicine in making each published proceedings as sound as possible and to ensure that it meets the institutional standards for quality, objectivity, evidence, and responsiveness to the charge. the review comments and draft manuscript remain condential to protect the integrity of the process. we thank the following individuals for their review of this proceedings:edward felten, princeton university, kevin fu, university of michigan, william sanders, university of illinois, urbana, champaign, andmary ellen zurko, independent cybersecurity consultant.although the reviewers listed above provided many constructive comments and suggestions, they were not asked to endorse the content of the proceedings nor did they see the nal draft before its release. the review of this proceedings was overseen by steven m. bellovin, nae,1 columbia university. he was responsible for making certain that an independent examination of this proceedings was carried out in accordance with standards of the national academies and that all review comments were carefully considered. responsibility for the nal content rests entirely with the rapporteurs and the national academies.1national academy of engineering.software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.viiprefacethe forum on cyber resilienceša roundtable established in 2015 by the national academies of sciences, engineering, and medicinešfacilitates and enhances the exchange of ideas among scientists, practitioners, and policy makers who are concerned with urgent and important issues related to the resilience of the nation™s computing and communications systems, including the internet, other critical infrastructures, and commercial systems. forum activities help inform and engage a broad range of stakeholders around issues involving technology and policy related to cyber resilience, cybersecurity, privacy, and related emerging issues. a key role for the forum is to surface and explore topics that advance the national conversation.in 2016, the forum held a workshop exploring the topic of cryptographic agility and its implications for security and resilience. that workshop was summarized in cryptographic agility and interoperability: proceedings of a workshop. discussions during and subsequent to that workshop made clear that software update is an important mechanism by which security changes and improvements are made in software. preliminary conversations among members revealed that this seemingly simple concept encompasses a wide variety of practices, mechanisms, policies, and technologies.to explore the landscape further, the forum decided to host a workshop. the workshop featured invited speakers from government, the private sector, and academia. this proceedings summarizes presentations made by invited speakers and other remarks by workshop participants. in keeping with the workshop™s exploratory software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.viiipurpose, the proceedings does not contain ndings or recommendations. nor, in keeping with national academies guidelines for workshop proceedings, does it necessarily report consensus views of the workshop participants or organizing committee. a planning group appointed to oversee all forum workshops was limited to planning the workshop, and this workshop proceedings was prepared by the workshop rapporteurs and forum staff as a factual summary of what occurred at the workshop. the document draws on prepared remarks of workshop speakers, comments made by workshop participants, and ensuing discussions. the introductory section summarizes the introduction to the workshop and reproduces background material provided to all participants. chapters 1 through 10 summarize speaker presentations. chapter 11 describes the content of the nal plenary discussion, highlighting some of the broader themes that emerged throughout the workshop. an afterword offers additional commentary on the policy and technical aspects of the software update challenge. the agenda of the workshop is in appendix a. short biosketches of the planning group and speakers appear in appendixes b and c, respectively. my sincere thanks to the planning group, forum members, and staff who helped organize the workshop, as well as to the invited speakers for their thoughtful remarks and enthusiastic participation in the discussions that ensued. writing support was provided by anne frances johnson and kathleen pierce, creative science writing. special thanks to eric grosse for his contributions to the afterword. i also extend our appreciation to the national science foundation, the national security agency, the special cyber operations research and engineering working group, and the national institute of standards and technology for their support and encouragement of forum activities. fred b. schneider, chair forum on cyber resiliencesoftware update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.ixcontentsworkshop introduction 11 policy considerations:  the intersection of public values and private infrastructure 7 policy considerations for creating an update infrastructure 8 key challenges involved in creating an update infrastructure 9 guiding principles for cybersecurity 10 key players and the need for dialogue 10 the challenge of keeping up with the pace of technological advancement 11 other considerations 122 technical considerations for secure software updates 14 vulnerabilities in older systems 14 special concerns for embedded medical devices 15 legal mechanisms for disclosure and updates 17 other potential solutions to address vulnerability 183 microsoft™s approach to software updates 19 today™s threat landscape 19 a new model for building and delivering updates 20 quality updates versus feature updates 21 the struggle with longevity 22 behind the scenes on ﬁupdate tuesdayﬂ 224 update issues for opensource software 24 inherent challenges to securing opensource software 25 dealing with the fear of destabilization 27 open source in the internet of things 285 cisco™s approach to software updates 30 the attack environment 30 cisco™s approach to addressing vulnerabilities 31 understanding user perspectives 33software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.x6 ensuring robust firmware updates 36 unique attributes of sel™s market space 36 sel™s approach to security 37 managing firmware and software updates 38 other mechanisms for maintaining secure systems 39 the ﬁauroraﬂ vulnerability 40 fostering development expertise and broader lessons for the software industry 407 updates in the consumer electronics industry 42 challenges from using offtheshelf components 42 businessside considerations 44 additional technical complexities 458 software updates in automotive electronic control units 47 history of electronic control units 47 the challenge of limited networking capabilities 49 other challenges to software delivery 49 dealing with legacy products 50 security concerns 519 the nist perspective on software updates 53 key challenges 53 solutions being pursued 5510 protecting consumers from software update risks 59 working with businesses 60 educating consumers 61 toward a new approach 6211 discussion 63afterword 66appendixes 71a workshop agenda and participants list 73b steering committee biographies 75c speaker biographies 78software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.1workshop introductionthe forum on cyber resilience of the national academies of sciences, engineering, and medicine hosted a workshop on software update at its winter 2017 meeting on february 6, 2017, in washington, d.c.  the workshop featured experts representing various industries, research laboratories, and government agencies. speakers discussed experiences and challenges related to a range of issues surrounding software updates, re˚ecting on the historical evolution, exploring today™s tools and gaps, and considering future concerns and opportunities, especially as related to software update as a tool for improved cybersecurity and resilience. participants identied key questions, suggested ideas, and closely examined uncertainties involved in improving software updates today and tomorrow. the meeting was open to the public. this proceedings was created from the presenters™ slides and a full transcript of the workshop; it is intended to serve as a public record of the workshop presentations and discussions. opening remarksfred b. schneider, ph.d., the samuel b. eckert professor of computer science at cornell university, member of the national academy of engineering, and forum chair, opened software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.2the meeting with a brief overview of the national academies™ forum on cyber resilience. he then introduced the workshop™s topic with a metaphor: recycling. soda used to come only in large glass bottles, but eventually cheaper, more convenient metal cans and plastic bottles were introduced. the new packagings had an unfortunate side effect: increased litter. rebate and recycling programs, as well as laws criminalizing litter, evolved to address this problem, although, schneider noted, ﬁit took a while to put all the right mechanisms in place.ﬂ like the landscape of soda bottles littering our streets before recycling, we now live in a world that is fast accumulating the remnants of ﬁdisposableﬂ software, schneider said. people constantly replace their devices, and software vulnerabilities are constantly discovered and xed. but a great deal of vulnerable software remains in use. this software is desperately in need of updates that, for a variety of reasons, it™s not getting. this software and these vulnerable systems are a new form of litter.software update methods allow us to ﬁcope with the reality that there are going to be vulnerabilities,ﬂ schneider said, by either patching or replacing vulnerable software. as software continues to proliferate and our lives become ever more dependent on it, the consequences of vulnerabilities grow. deploying updates securely is also an increasingly complex technical challenge. no longer are updates just one aspect of a developer™s responsibilities, but they have become a central aspect of the industry. although not updating software is clearly problematic for security, deploying software updates also comes with risks. if an update goes wrong, the device could break or provide an opening for attackers. any sort of centralized or automated distribution of updates becomes an attractive target for attackers. even sending physical disks with updates through the mail, a system previously used for updating ˚ightcontrol software on commercial airplanes, is not necessarily secure. updates also, as a side effect, advertise that previous versions of the software are vulnerable to attack, even pointing attackers to specic vulnerabilities that can be exploited in nonupdated devices.recertication of software raises other issues. after performing an update, a naval warship might require 6 months in port to recertify all of its systems, schneider noted. the lengthy recertication process also required for airplanes and medical devices means that automated updates (such as the regularly scheduled updates from microsoft, known as ﬁpatch tuesdayﬂ) would be untenable in those situations. economics is also a concern, underscored by the proliferation of evercheaper mobile devices and the applications people buy for them. at these low price points, or ﬁhitandrun sales,ﬂ manufacturers may assume they are not entering into a longterm relationship with consumers. such manufacturers might not feel obligated to provide software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.3software updates to provide the level of security that manufacturers of other types of products might provide. users™ rights are also a factor: deploying software updates can give manufacturers broad access to a user™s device, which raises potential privacy issues and creates antitrust mineelds, schneider said.in short, cleaning up the ﬁdiscarded soda bottlesﬂ of our information technology ecosystem not only involves complex technical challenges, but economic, political, and social consequences, as well. the forum provided a venue to dive into these issues, tease out nuances, and expose hidden assumptions surrounding the software updates. software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.4the following information was provided to workshop speakers and attendees to offer context on software update issues and to provide a structure for the workshop and its intended purposes.in october 2016, botnet malware known as mirai was used to launch a disruptive denial of service attack on a domain name system (dns) service provider. that disruption resulted in hundreds of popular websites and services being inaccessible for several hours. mirai exploited the fact that numerous internet of things (iot) devices, such as cameras and digital video recorders, still had vendor default usernames and passwords (and in some cases had unchangeable rmware passwords accessible via telnet and secure shell [ssh]).1 this attack spotlighted several security challenges related to the mass proliferation of iot devices; perhaps the most signicant is that the software on many iot devices is difcult or impossible to update. software updates have long been a mechanism through which security improvements in systems and devices are made. it is timely, then, to consider the value and prospects for software update as a security mechanism in the future. in what sorts of systems are software updates difcult? what makes it difcult? what incentives can be put in place to ensure that needed updates can be done? softwarebased systems undergird every type of critical infrastructure. software enables business, manufacturing, transportation, and health care. software is embedded in homes and ofces, in safetycritical contexts, in entertainment contexts, and, increasingly, in wearable devices on human bodies. as bugs and vulnerabilities are discovered, as circumstances and requirements change, and as new features are developed, software updates are made available. software updates encompass a range of activities. consumers are familiar with updating operating systems and individual applications. enterprise information technology departments typically develop processes for how software updates will be implemented for their users. providers of cloud services and webbased applications update their products and systems regularly. the question of how, when, and why to update software is not new. before personal computers could be easily networked, updates had to be applied using physical media (ﬁsneakerwareﬂ). today, updates to some mobile phones, iot devices, and even cars can arrive automatically over wireless connections directly from the software manufacturer. many enterprises push automatic updates to users™ machines and devices. consumers are sometimes given the option of having their personal devices update themselves automatically, whenever new software is available. in some cases, manufacturers will design systems so that updates are done automatically without allowing the consumer the choice. software updates are used to improve security and other important attributes as well as to provide upgrades or changes to software features. as security has become a priority over the last two decades, software update has become a key mechanism by which improvements in security in systems that are already deployed can be made. the development of mass automatic updates allows for fast application of patches when security problems in a given system or deployment need to be addressed.background and contextsoftware update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.5software updates as a security mechanism comes with other challenges and risks. as most users of information systems know, an update that goes wrong can have downsides ranging from minor incompatibilities with existing applications to loss of time spent reconguring systems or even destruction of data. moreover, not all systems can be readily updated. some iot devices offer no obvious update capabilityšthey may lack regular internet connectivity, or the device may not have the computing resources to validate and install updates, or updates may no longer be available from the company that sold them. some systems, such as medical devices, might require signicant verication and validation after updating; and some, such as those on some naval ships, cannot be updated while the ship is actively deployed. in such a case, what other options are available? when software update is possible, how should the update itself be veried and authenticated? when and how do we believe the update channel is secure enough that the benets outweigh the risks? how should devices reject obsolete revisions? what security procedures should be employed when updates are issued? another challenge is that software updates for security reasons tend to happen under time pressure. at the same time, it may be important not to release an update until there™s a way to be sure to get it to everyone who needs it. this is because anyone who sees the update could potentially reverse engineer it to nd and exploit the vulnerability that is being corrected. ensuring that everyone who needs the update gets it can be a particular challenge in scenarios where the software developer does not or cannot themselves ensure that the update is sent to those who need it. consider the following scenarios:ł a software supplier releases the update to the device vendor; the device vendor has to ﬁqualifyﬂ it before releasing it to customers. if device vendors are not diligent about getting the update out, some customers are left vulnerable, and reverse engineering by adversaries is possible based on customers (or device vendors) who do get the update.ł suppose a widely used opensource component is found to need a security update. if many organizations use the component, how can an update process be managed so that the update is developed and qualied for all of the organizations that rely on it without the knowledge of the vulnerability leaking and being exploited before the update is distributed?ł similar to the above: a developer ships software that depends on certain components, and those components require a software update for security reasons. how can the developer nd everyone who needs to install this update? ł or, consider the challenge of updating products when the original developer is no longer available, or the product is out of support.this workshop will bring together software experts, security experts, practitioners, and researchers to explore how software updates are accomplished and implications for security and resilience of systems that depend on software. questions to explore include general: how have ﬁsoftware updatesﬂ changed over time and what are prospects for the future? how do different technical sectors manage software updates? for what sorts of systems are software updates likely to be an appropriate method of deploying improvements in resilience and security? what are the advantages and disadvantages software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.6of distinguishing and separating feature updates from security updates in software updates? what policy options are there to improve the practice and outcomes of software updates (e.g., what are the pros and cons of enforcing automatic updates)?security risks: do current practices related to software encourage vendors to ship buggy implementations on the assumption that bugs will be xed later? if insecurebutupdatable products are the only ones available in the market, will they be used in highvalue environments that will then fall to 0day attacks?endoflife: should vendors be required to provide security updates? if so, for how long? when the support period ends, should source code and signing tools be made opensource to allow thirdparty updates? who is liable when products fail (perhaps in unsafe ways) after their support period ends? what are the economic and environmental impacts when products are discarded because essential updates are no longer available?user rights: what rights and obligations should users have? for example, are disclosure of limitations and/or acceptance by end users required (or even practical given the difculty of understanding legalese, lack of alternatives, and number of devices that users own)? should users be allowed to reject safetycritical updates (e.g., that may facilitate denial of service attacks against others on the network)? should patches to address security or safety vulnerabilities be treated differently from updates that modify functionality?privacy, conicting interests: should vendors be permitted to leverage security update mechanisms as a way to achieve other business objectives, such as obtaining data from users (e.g., to train vendor articial intelligence systems), obtaining users™ consent to vendorchosen contractual obligations, modifying device capabilities in ways that may be undesirable to the user, or pressing users to install software products unrelated to the one being updated? what challenges arise when multiple parties (e.g., telecommunications carriers and mobile operating system developers) are involved in software updates and what options are there for dealing with them? costs and accounting: what are the longterm costs of maintaining software updates for products, and how should these costs be funded? when companies sell a product, do they need to take a charge for the future costs of producing updates for the product? 1 krebs on security, 2016, ﬁhacked cameras, dvrs powered today™s massive internet outage,ﬂ october 21, blog, https://krebsonsecurity.com/2016/10/hackedcamerasdvrspoweredtodaysmassiveinternetoutage.software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.71 policy considerations the intersection of public values and private infrastructuredeirdre mulligan, university of california, berkeleydeirdre mulligan, associate professor at the school of information at the university of california, berkeley, framed the challenge of software updates with a broad overview of the tangle of issues at the intersection of public values and private infrastructure. mulligan opened with her proposal, rst posited along with coauthor fred schneider in 2011, for a new doctrine of cybersecurityšan approach that considers cybersecurity as a public good and stresses greater attention to security issues during software development and managing vulnerabilities after deployment, as opposed to chasing hackers or making software invulnerable.1 no matter how attentive software designers are to security issues, she said, new threats and insecurities will inevitably emerge. figuring out how to deal with that ongoing insecurity deserves some portion of our attention from both a technical and policy standpoint. 1d.k. mulligan and f.b. schneider, 2011, doctrine for cybersecurity, daedalus 140(4):7092, doi:10.1162/daeda00116.software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.8policy considerations for creating  an update infrastructurewhile current policies that recognize and reduce vulnerabilities are benecial, mulligan suggested that there should be incentives, or even coercive measures, to induce companies to produce and maintain more secure software in order to better defend the rights of individuals to be protected against threats. mulligan identied three main aspects of a potential policy infrastructure for software updates. the rst is a need for a shared denition of the term ﬁcybersecurity.ﬂ for example, whose ﬁsecurity,ﬂ exactly, does it refer to? also, what would justify the use of a security update channel? second, she noted that cybersecurity is embedded within an ecosystem of related issues such as individual privacy, consumer protection, industry competition, and intellectual property. finally, software updates encompass the tension between society™s collective interests, on one hand, and the rights and interests of individuals and corporations on the other. in mulligan™s view, situations like the mirai attack (described brie˚y on page 4) demonstrate why policy intervention is warranted. ﬁwhen we have externalitiesšwhen my choices are impacting you in ways that are negative and in ways that are really difcult for you to addressšthat is a justiable reason for looking to public policy to intervene, to create incentives, or to punish people for failure,ﬂ she asserted. a public policy intervention, in this case, could potentially create incentives, for effective software updates or even punishments for failure, while still being mindful of a balance between the rights of individuals and the needs of a society.an update infrastructure that allows the monitoringšand addressingšof threats and vulnerabilities would require extensive information, mulligan noted. monitoring and surveillance would be necessary to identify specic threats and contribute to a shared knowledge of evolving risks or attacks. this requires knowledge about devices, such as their properties, the applications used on them, and their network connections. an update infrastructure, she noted, would also require the ability to update a device ﬁin the wild,ﬂ and channels used to convey such updates must remain secure themselves. channels used to convey updates must remain secure themselves.software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.9key challenges involved in creating  an update infrastructure developing an infrastructure for updates raises several key challenges from the perspective of both businesses and consumers, and these challenges are especially acute as we move into the internet of things (iot) space, said mulligan. making accurate vulnerability assessments of software and xing associated vulnerabilities could potentially require the collection of private data from consumers™ devices, where there is an expectation of privacy and control. as a result, it is important to consider consumers™ expectations and the privacy implications of a software update infrastructure, mulligan said.an update infrastructure policy would also, of course, affect companies. there remain many unanswered questions. for example, should the initial seller have exclusive power to update device security or functionality, or should other companies offering similar, potentially more secure, updates be allowed to compete in this space? stability is another concern, because security updates could destabilize a device or service, frustrating the consumer or the manufacturer.for the iot space, there is a need to carefully consider how to use traditional update channels, which have long been used to update other kinds of computers, in the context of iot devices. should a new channel exclusively for security updates be created, and could it truly be secured? as an example, mulligan pointed to tesla, which sends updates to its cars via an overtheair update channel. one recent update included a new feature, summon, which enables owners within a certain distance to press a button and ﬁsummonﬂ the car to them. the initial software had safety issues that the company later corrected, but that update channel could have potentially created a huge risk to others near the car when it is ﬁsummoned,ﬂ2 mulligan noted. it is also possible that update channels could be abused to downgrade product functionality, which could make consumers unhappy and mistrustful of the update channel altogether. update channels highlight the tensions between the market, which may want to use the channel as an avenue to increase sales, and consumer advocates, who want to make sure it is used to deliver necessary security improvements. dening what, exactly, is a security upgrade is another nettlesome question, as is the question of who gets to dene cybersecurity. mulligan cited the example of sony™s use of drmprotected compact discs (cds) to prevent theft of its intellectual property; while the cds may have advanced security in the eyes of the company, they also provided 2j. fisher, 2016, ﬁtesla to fix selfparking feature after consumer reports raises safety concern,ﬂ consumer reports, february 10, http://www.consumerreports.org/carsafety/teslaxesselfparkingfeatureafterconsumerreportsraisessafetyconcern. software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.10the company with backdoor access to the consumer™s machine, arguably not supporting security in the eyes of the consumer. gatekeeping is also an issue: would individual companies control update channels exclusively, or could other companies use them as well?consumers would have their own questions about update capabilities, such as whether they are mandatory or optional. if they are mandatory, consumers might have to reveal private data to receive the security benet. yet if the security channel isn™t properly restricted, consumers could be exposed to identity theft in addition to unwanted downgrades or modications.iot products in particular have poorly dened security requirements and support timelines, said mulligan. what, if any, obligations do manufacturers have for maintaining or updating their security? given that many of these devices are so low cost as to be considered almost disposable, for how long can a consumer expect them to remain secure? if iot devices aren™t upgraded but are still in use, what economic costs does that impose and on whom? guiding principles for cybersecurityall these questions and concerns led mulligan and schneider to their guiding principles for cybersecurity. first, they posit that cybersecurity is a public good, and thus private or individual choices could have negative consequences for the public as a whole. second, cybersecurity is a political construct whose goals and means must be clearly dened and generally agreed on through a series of conversations. the variety of domains where cybersecurity is important and software updates take place means that solutions may need to be adjusted at times. finally, if cybersecurity is dened as a public good to be protected, it follows that it has to be in the forefront of the design stage of software and update channels instead of an afterthought for others to deal with. key players and the need for dialogueconversations about the denition and governance of software updates could involve a range of players, mulligan said. the federal trade commission has a long history of protecting consumers. the national telecommunications and information administration is beginning to discuss these issues as they relate to iot devices. the national highway trafc safety administration has also started discussing these questions. mulligan expressed her hope that agencies increase their focus on individual privacy, especially in software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.11the context of automotive overtheair updates. these and other existing institutions can be leveraged to take on this task.the bigger obstacle, to mulligan, will be convincing industry to more effectively integrate cybersecurity protections into their product design objectives. the technical community has certainly embraced security as a design issue, and there have also been privacy improvements, but mulligan noted that engineers by and large do not feel they have the expertise to make privacy decisions when creating software. building software with security updates in mind requires genuine dialogue between technical experts and policy experts. both groups might at times be out of their depth, but effectively addressing issues around consumer protection, industry competition, and software engineering demands a high level of coordination and commitment on both sides: bringing both technical and policy expertise to the design process is an important piece of the puzzle to support true cybersecurity.such a strategy also requires an educational commitment from universitiesša commitment to discussing the legal and ethical consequences of software updates when teaching software design, mulligan argued. workplaces also need to prioritize such thinking so that engineers know that policies are in place to ensure that cybersecurity is addressed at every stage of design. such policies should rely on an interdisciplinary approach to solving complex problems like software updates, mulligan concluded.the challenge of keeping up with the pace  of technological advancement richard danzig, johns hopkins university applied physics laboratory, asked mulligan to address the speed at which technology changes and proliferates. given that this is a dynamic and not a static system, big problems are generated quickly. he likened the situation to the evolution of cars: as cars and their use changed over the decades and the challenges increased in scale, policy responses (licenses, roads, policing, and so forth) evolved in response. he wondered if public policy is destined to lag behind technological innovation, and, further, the degree to which public policy regulations might actually sti˚e innovation. he also raised the additional concern that policy makers may inevitably lag behind the technical reality in terms of their understanding of the issues.building on the example of cars, mulligan noted how the automotive industry deals with recalls and other safety risks. historically, car makers have relied on owners to have their vehicles serviced, and the turnout is usually below what car makers hope. in this respect, a technical breakthrough like tesla™s overtheair channel theoretically improves vehicle safety by sending updates in a timely way. getting the policy part software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.12right, along with the technical part, could lead to faster, safer patches, a ﬁpotential winwin,ﬂ she said.but while most automotive product recalls have to do with reducing the risk to passengers, there is another security risk: software vulnerabilities that could turn a car into a weapon, such as the vulnerabilities discovered in jeep cherokees that allowed remote hacking of the entire system, engine included, which makes these issues all the more urgent.3 as the potential dangers increase, mulligan said, cybersecurity becomes a necessary public good. this means requiring manufacturers to update car software automatically, instead of putting the onus on consumers. the risk now is not one of mere malfunction but of actual malfeasancešcars could be leveraged in real time to create an attack.regulations may not always be able to keep up with technological innovations, mulligan acknowledged, but she said that right now, the marketplace is not keeping up either. the development of standards and denitions will make it easier to design, develop, and deploy secure products and patches. regulation, in this case, can happen alongside the speed of technological change as long as both camps are committed to learning from the past, xing current problems, and addressing future challenges. the policy and technology communities can collaborate on the values and issuesšpublic, private, individual, corporate, and legalšand on nding the right balance among them. furthermore, while these conversations might be easier to have in private settings, they need to happen in public, mulligan said, because cybersecurity is a public good.other considerationsseveral participants raised nuances of the business environment, particularly for iot devices, that warrant consideration in the policy space. tadayoshi kohno, university of washington, noted the proliferation of companies launching products with funding from kickstarter.com or similar services. after producing an iot device, for example, and attracting perhaps hundreds of thousands of users, such companies can sometimes go out of business quickly. where does that leave customers, who are using devices with software that is never going to be maintained or updated, he asked. mulligan shared two ideas: devices could come with a kill switch that is activated once the software for the device is no longer being maintained (although depending on 3a. greenberg, 2015, ﬁhackers remotely kill a jeep on the highwayšwith me in it,ﬂ wired, july 21, doi:https://www.wired.com/2015/07/hackersremotelykilljeephighway.software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.13the device, this might pose safety concerns), or, the software could become open source after the manufacturer ceases supporting it, so that others could take on the security support themselves.drilling deeper into the example of the hacked jeep mulligan raised in her presentation, one participant asked what policies could protect against this type of situation, without infringing on other areas. mulligan noted an important distinction between the jeep case, which she believes was a vulnerability that was not intentional on the part of the manufacturerša mistake, and cases such as the volkswagen test mode code, which appears to have been a deliberate decision to deceive regulators. a policy framework would need to account for both types of cases, mulligan said. one lesson that applies across the board is that the agencies responsible for standards and compliance need increased technical expertise, she suggested. mulligan noted that there has been progress in this area. the federal automated vehicle policy focuses on increasing technical expertise within government and also creates an external advisory board made up of industry and academic experts to enable the agency to better understand new trends, research, and potential threats.4 these examples also raise the prospect that the new capabilities of cars and other iot devices may require new certication and testing methods, mulligan said. this might look similar to the level of regulation used by the u.s. food and drug administration. while she noted that this might not be appropriate for all areas of iot, ﬁwhen we™re talking about large pieces of metal hurtling around at really fast speeds, it™s something we should at least be considering,ﬂ she said.the discussion wrapped up with a question from another participant regarding the potential policy implications of the distinction between hardware and software products that reside on a customer™s device, in which the user often has some control over software updates, versus cloudbased services, for which the user typically has no choice as to what version they are using. mulligan noted that consumer protection agencies have historically focused on products that are sold directly to consumersšfor example, stepping in if the company™s behavior seems deceptive or egregiousšbut the issue of cloudbased software or services will demand closer scrutiny in the future. 4u.s. department of transportation, 2017, ﬁfederal automated vehicles policy,ﬂ https://www.transportation.gov/av, updated april 13, 2017.new capabilities of iot devices may require new certication and testing methods. software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.14technical considerations for secure software updates2 kevin fu, university of michigan kevin fu is an associate professor of computer science at the university of michigan and cofounder of virta labs, a healthcare cybersecurity company serving healthcare providers and medical device manufacturers. he explored the technical aspects of software updates, discussing the evolution of updates over time before delving into contemporary problems, with a particular focus on the area of embedded medical devices.vulnerabilities in older systemsas a graduate student 17 years ago, fu focused on creating secure, scalable, highperformance software updates. at that time, software updates were made via rpm package managers (rpms)šsoftware packages downloaded from websites. each package was individually signed, which meant that the updates had been authenticated and, thus, could be assumed to be trustworthy. ﬁthe beauty was you could download it and not have to worry about the package being secure, because it was signed,ﬂ fu re˚ected. however, although each package may have been signed, the overall system was not signed, which could lead to problems. one such problem was what fu referred to software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.15as the ﬁfreshness factor,ﬂ in which users could be tricked into installing old updates with known vulnerabilities. turning to antivirus updates as an example, fu noted that today, it is common for companies and universities to require that users regularly update antivirus dat les to detect new viruses. in an experiment 11 years ago, fu™s students demonstrated how easy it is to establish a root shell on a computer using an antivirus software update; the experiment revealed that mcafee, the popular antivirus software company, was not checking the cryptographic signatures on its updates. in essence, mcafee™s update channel, which was meant to increase software security, actually created new risks. unfortunately, many software products still do not use proper authentication, leaving this channel open to exploitation, fu said. antivirus software can cause other problems as well; fu described an instance when the system at a rhode island hospital accidentally misclassied a critical windows dll as malicious, and the hospital™s admission systems ground to a halt, forcing the hospital to stop admitting patients except for those with gunshot wounds. special concerns for embedded medical devicesembedded medical devices raise particularšand often overlookedšconcerns, fu explained. before wireless updates to pacemakers, changing a device™s settings required inserting a needle into the pacemaker through a wearer™s armpit and manually adjusting a dial. now, software is updated over the air, which is far easier for wearers, although this creates new types of vulnerabilities. when medical device makers expressed their belief, at a food and drug administration (fda) workshop, that malware was not a concern for an automated external debrillator being developed, fu recruited his colleagues dawn song and steve hanna to prove them wrong. the team created a custom rmware update that included malware that could spread from a hospital computer, onto the debrillator, and back onto more hospital computers, revealing that there appeared to be no authentication at all on the rmware going into the debrillator.fu also related the story of a ventilator company that, after an fda recall, instructed customers to download a software update from its website. although initially encouraged that the company was providing an update, when he tried to download it himself, he was presented with a malware warning by his web browser. digging deeper, fu discovered that hackers had laced the update with driveby downloads thanks to an opening left by an outdated version of microsoft iis and unmaintained server scripts, leading the google safe web browsing service to ˚ag the software software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.16download as suspicious. fu was alarmed to learn that he was the rst to report the problem, despite the update, in theory, having been downloaded by many actual users of the software. despite these examples, manufacturers are making progress, fu said. for medical devices, there are now detailed regulatory guidelines that dictate the obligations that manufacturers and consumers (in this case, the hospitals) each have, for example. philips, a maker of medical devices and other electronics, is considering providing consumers with a list of the software components used on its devices, so that they have a better understanding of the risks they take when using each product, fu noted. that may not completely solve the problem, but it would help to know exactly what, including thirdparty software, is inside these complex systems, said fu. a fully linked vulnerability database, he suggested, could also help consumers gure out where their risk is and who is responsible for managing it.fu noted that the association for the advancement of medical instruments, the standards body for medical device safety, is also working on this problem. last summer the group released the rst fdarecognized standards for premarket security on embedded devices, and it is now tackling standards for software updates. however, he said, there are still crucial questions to be answered, including the need to dene the responsibilities of the producer versus the purchaser. although cryptography can help address key security properties, such as integrity, authenticity, and freshness, in practice it is difcult to ensure all of these solutions are implemented ˚awlessly, fu said. in the scheme of current vulnerabilities, what is most crucial, he argued, is safetyšparticularly for ﬁcyberphysicalﬂ devices with moving parts, such as cars, satellites, and medical devices. he also stressed the importance of human factors. engineers must focus on the end users, he argued, who, more often than not, are not trained information technology security professionals. ﬁputting the onus on the user is a pretty big ask for the average american,ﬂ he said.other questions concern who is responsible for applying the software updatešthe manufacturer, or the useršand whether the update is optional or required. the degree of risk can be a key factor in these decisions, fu observed. several years ago, he said, medtronic discovered a faulty electrode in its debrillators. a hardware recall, requiring removal of the device, carried a small but real risk of death. faced with this conundrum, medtronic came up with a clever solution: they developed a software update, delivered wirelessly, that would measure the tness of the electrode and made focus on the end users who are not trained it security professionals. software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.17a riskbased decision as to whether the patient required the extra risk of removal and reimplantation, or whether the risk was small enough to live with.the timing of update deployment is also important to consider, fu noted, and if safety is paramount, then additional verication, validation, and other engineering would be required. rather than asking, can we be hacked?, fu believes the more important questions are the following: how well can we survive these attacks? what kind of tolerance do we have? and how can we fail gracefully?legal mechanisms for disclosure and updatesin the discussion, eric grosse, an independent consultant, wondered if it were possible, legally, to attach a copyright notice to opensource tools in such a way that it would be possible to extract a list of all the software components operating in the system and their respective version numbers, thus allowing a user to more accurately assess whether updates are needed. while recognizing that the legal questions involved in such a solution are better answered by a lawyer, from a technical perspective, fu suggested such a solution would nd some support in the national institute of standards and technology (nist) cybersecurity framework. he pointed to three pillars for industrial control systems within the framework: first, it™s important to know exactly what assets are involved and what the risk is. second, the proper controls should be deployed depending on the risk. and nally, it is important to continuously measure the effectiveness of those controls. making all software components transparent, as grosse suggested, would answer the rst question. this is an important step, fu emphasized, because often even product managers themselves aren™t aware of all the software involved in a complex system. deirdre mulligan, university of california, berkeley, weighed in with a legal perspective. she suggested that grosse™s goal would perhaps be better fullled using opensource licensing or the creative commons approach, which grants the user a few more rights than copyright as a legal mechanism. that could be helpful, she said, as could creating a set of standardized software disclosures. the national telecommunications and information administration project that mulligan mentioned in her presentation is researching similar ideas. whatever path that group takes, mulligan stressed that detailed disclosures about software updates, maintenance, and other issues would be essential to consumers.nicko van someren, linux foundation, mentioned that a linux project, the software package data exchange, could also provide a mechanism for making what is inside these products more visible. software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.18other potential solutions to address vulnerabilitytadayoshi kohno, university of washington, asked the group to consider whether software updates could be one of a broader set of solutions to vulnerabilities, as opposed to depending on it as the whole solution. as an example, he pointed to microsoft™s shield, a product designed to detect attack signatures that are exploiting known vulnerabilities while engineers are working on a patch. he noted that other kinds of instrumentation or mitigations are important in improving cybersecurity, as well. recognizing the reality that software updates are sometimes an afterthought in the software community, fu noted that concepts of ﬁcontrolled riskﬂ versus ﬁuncontrolled riskﬂ might be useful for framing the challenges after realworld deployment. software updates should be balanced between those kinds of risks, he said, bearing in mind that there is always the risk that an update could do further harm. this risk balance might also shift depending on whether you are considering harm to a few individuals or harm to a larger population. another potential remedy to consider is turning off the software, which could halt intrusions but have other negative consequences. the question of providing software updates is probably not a yesno question, fu said, but one where different risks must be assessed. fred schneider added that it may sometimes be feasible to update an associated part of the software system but not necessarily the device itself. in the recent mirai attack, for example, a rewall from the internet service providers could have been used to address the large amount of trafc coming from the devices, thus compensating for the fact that the device manufacturers had not built sufcient protections into the affected devices themselves. software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.19microsoft™s approach to  software updates3 carlos picoto, microsoft corporationcarlos picoto is the general manager for the microsoft corporation team that produces software updates for all versions of windows. he opened by sharing microsoft™s stated mission, ﬁto empower every person and every organization on the planet to achieve more,ﬂ a mission that he allowed can be sometimes challenged by the need to continue supporting legacy software. he offered insights on today™s threat landscape before describing microsoft™s approach to addressing vulnerabilities and deploying updates. today™s threat landscapethe latest version of microsoft™s operating system, windows 10, is far more than just software for personal computers, picoto said. the operating system also runs on diverse products such as raspberry pis and augmented reality devices. reiterating other workshop participants™ characterizations of security breaches as ﬁonly a matter of timeﬂša risk to be managed but perhaps never eliminatedšpicoto noted that the inherent vulnerabilities of software are nonetheless often underappreciated by users and organizations. software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.20as operating systems have evolved, picoto said, one crucial lesson is that new threats demand new defense techniques; older solutions are no longer effective at keeping information secure. picoto told the story of a recent ˚ight in which picoto watched the passenger in front of him type in his password to log in even though he could have used touch id. what™s worse, the device had such a long timeout between keys that picoto was able to see every letter of the user™s password. consumer inattention to security protections can sometimes provoke changes in vendor behavior and in how security tools are designed. as one example, picoto explained that consumer behavior is a large part of why microsoft is moving away from passwords and toward biometric identication. in windows 10, the company has also experimented with hardware virtualization, which gives separate software components separate trust verication protocols in order to increase security. in addition, he noted, microsoft features such as defender advanced threat protection and the enhanced mitigation experience toolkit enable engineers to detect attacks and begin designing security updates to address them before they become public.picking up on a theme that emerged throughout the workshop, picoto emphasized that the growing landscape of internet of things (iot) devices presents new challenges. another tension, he noted, is the risk inherent to implementing a security update, which can require system downtime and cost customers productivity. a new model for building and delivering updatesto address these challenges, microsoft has created a new product offering: ﬁwindows as a service.ﬂ in addition to a different sales model from the old productbased approach, this shift has been re˚ected in ﬁradical changesﬂ to every aspect of deployment and maintenance, including how the software is built, how it is updated, and how those updates are delivered, improving the company™s ability to keep customers both secure and up to date, picoto said. picoto™s teams are constantly making updates to windows. initially, those updates are sent to microsoft employees, creating a large testing base that helps bring broad validation to the updates. after honing them based on employee feedback, picoto™s team pilots the updates with the insider preview program, a group of almost 10 million enterprise users. their feedback is then incorporated into the larger windows updates. this multistep testing and validation process thus improves the overall quality of software updates made across the board. this process represents an enormous change for microsoft. previously, new windows versions were released in alpha and beta versions before a major release, software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.21which occurred every few years. today™s extended pilot period and more frequent deployment of updates enables microsoft to ensure that each new operating system version is ready for major release while providing new features to customers much faster. however, the fast pace of these releases has been a difcult adjustment for some of microsoft™s enterprise users, who must accommodate far more frequent updates than in the past. microsoft™s new model also addresses the challenge of what picoto called selective patching, a previous approach that allowed users to pick and choose the different security patches they wanted to install. he said that software updates are developed with the assumption that all the currently recommended patches are in place, and when this isn™t the case, it can cause quality issues. to address this problem, the release of windows 10 eliminated the option for users to select which patches to install, and instead combined all the available patches into one. all operating system (os) versions are now structured this way, picoto noted. eliminating fragmentation improves the quality and reliability of the oss for microsoft, its users, and thirdparty companies who use the os as a platform to design applications, said picoto.quality updates versus feature updatesmicrosoft™s new approach involves two separate types of software updates: quality updates and feature updates. quality updates, released on ﬁupdate tuesdaysﬂ (also known as ﬁpatch tuesdaysﬂ), are minor updates that x security bugs or other quality windows as a service: deploying windows.software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.22issues. feature updates occur twice a year and deliver new os features to customers. customers can choose whether they want to receive feature updates each time they become available or remain with the same features for 10 years, which is how long microsoft commits to supporting a given os version. after experimenting with this update model in windows 10, microsoft decided to make it available to customers using both windows 7 (which most of their enterprise customers are currently running) and windows 8.feature updates are reviewed for 4 to 8 months before being made available to customers, at which point microsoft releases the software publicly but doesn™t push it to everyone right away. the rst customers to use the update are ﬁdetermined seekersﬂ who are up on the latest tech news and enjoy being the rst to use new software, picoto said. users with the newest computers and fastest connection speeds are early adopters, and rolling out software in these contexts rst allows microsoft to learn more about potential quality issues that are not related to platform constraints. eventually, the update is rolled out to all users. the struggle with longevityof course, at the same time that these new os updates are being released, picoto™s team must also keep up with security updates to the previous windows versions. it wasn™t until july 2016 that his team stopped producing updates to windows 2000, for examplešwhich is, remarkably, still in use despite being 17 years old. microsoft™s default lifespan for software is 10 years, although customers often ask for extensions, picoto said. longevity of systems is always a struggle, because customers want consistency and the cost of change can be considerable, particularly in machines built to function for decades. windows 2003 was a particular challenge, picoto recalled; when the scheduled end to updates arrived, there were still unpatched security vulnerabilities, but xing them was too complicated given how old the software was in the rst place. behind the scenes on ﬁupdate tuesdayﬂpicoto sketched a typical update tuesday work˚ow, which starts well before the update is released. researchers from around the globe are constantly discovering and disclosing vulnerabilities, sometimes giving microsoft a deadline for making a x. microsoft developers then create and deploy security updates, sometimes releasing these xes rst software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.23to qualifying organizations as part of the security update validation program, which provides additional validation. a common criticism is that xing a bug takes too long. the reason, picoto noted, is that the team is not updating one os but all of them, in order to minimize the impact to all of microsoft™s customers, regardless of the os version they might be using. synchronizing the xes for all supported versions to arrive at the same time can create challenges. of course, releasing updates is not the end of the story for picoto™s team. the next critical task is to monitor delivery and adoption of the updates. despite their best efforts at running the most complete tests, problems can still occur, for example, if a user conguration runs both microsoft and another operating system. if there is a problem, picoto said it usually comes to microsoft™s attention on a wednesday or thursday, often through twitter. this cycle continues at a relentless pace; while preparing the next batch of update tuesday deployments, picoto™s team must be prepared to face emergent security issues arising from a previous update that would have to be addressed quickly as well. ﬁyou can imagine that with the matrix of browsers and other different operating systems, it gets complex,ﬂ he said.a bright spot among these problems is that as customers move to the most recent software updates, microsoft has seen a drop in help desk phone calls reporting malware, picoto said. drastically simplifying user choice (e.g., by eliminating the ability to choose which pieces of the software to update) has also helped keep customers secure and up to date. picoto closed with data indicating that the latest windows software update, released in july 2016, has been installed on 79 percent of personal computers running windows 10 in the united states. of those devices, 84 percent are also on the latest update tuesday patch. software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.24update issues for opensource software4 nicko van someren, linux foundationnicko van someren is the chief technology ofcer of the linux foundation and a fellow of the royal academy of engineering in the united kingdom. his talk focused on his role as head of linux™s core infrastructure initiative (cii), a nonprot organization funded by the information technology industry that provides training, testing, and nancial support for software security projects. its mission is to improve the security of opensource software, an essential part of the internet ecosystem. cii was created after the 2014 heartbleed bug found in openssl, which left approximately 70 percent of the https services on the internet vulnerable to security breaches of sensitive information. the heartbleed bug was eventually patched, but 7 percent of internet servers today are still vulnerable to heartbleed, despite the fact that the patch was released 3 years ago and was considered a critical security vulnerability. the experience sparked the creation of cii and underscores the fundamental challenge of disseminating software updates in the opensource environment, said van someren. cii focuses on a variety of methods to secure opensource software. one method is to devote resources to projects focused on opensource security, such as openssl, openssh, and gnupg. cii also invests in infrastructure like the network time protocol daemon (ntpd), timing software used until recently by many of the world™s major stock exchanges, which, van someren mentioned, happens to be maintained parttime by software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.25a single developer. in response to a question from bob blakley, citigroup, inc., who wondered if there had been a risk analysis of the consequences if the ntpd stopped working or, worse, if it came under the control of a hacker, van someren noted that cii had conducted a security audit on the ntpd code and that maintainers of ntpd have established the network time foundation to support its continued maintenance. in addition, cii established a project known as census that attempts to identify atrisk components of ntpd and similar infrastructure to determine the factors that contribute to risks, gauge vulnerabilities, and identify the community of people who could step in to maintain it if circumstances should change. elaborating on the ntpd story later in the discussion, van someren described cii™s approach to risk assessment for maintenance of opensource software. his team looks at several characteristics, such as how many people maintain it, how vibrant a community it has, and how long it takes for bugs to be xed, to calculate a risk score for each component. for products that are found to lack consistent and robust maintenance, cii is creating a ﬁsoftware orphanageﬂ where engineers can monitor this untended software, respond to bug reports, and create and deploy updates. in addition to supporting outside projects and providing training, cii also builds its own programs to develop more secure software and to improve security practices across the internet, both for software they consider to be core infrastructure and for opensource projects generally, because, as van someren noted, ﬁwe don™t necessarily know what will be core infrastructure in a few years™ time.ﬂ as an example, he pointed to the fact that node.js (a platform for building network applications) is the most active opensource code used right now, although 5 years ago no one would have predicted that javascript would be so widely used in this context.inherent challenges to securing opensource softwareopensource software is not inherently any more or less secure than other software, but it does have a few different characteristics that affect the security landscape. first, its development process is fragmented, not streamlined, and often spread out across more people than in a closedsource development team. also, instead of having topdown management pushing specications, open source operates with a more a collaborative spirit and an emphasis on running code. these differences add to the complexities of software updates. eric grosse, an independent consultant, commented during kevin fu™s presentation that it might be helpful to see all the components within a software program in order to assess the need for updates on each of them. in opensource software, van someren said, there is software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.26often such a deep, layered stack of components, highly specialized to the user™s unique needs, that such transparency may not be feasible. these deeply layered setups also make sending updates difcult because of all the testing that has to be done for each component, in order, from the bottom of the stack to the top. while in theory opensource users can regure their stacks at any time, in practice they are more likely to wait until another user has tested the piece one level down, which adds delays to any software update deployment as updates lter up the stack.this collaborative, distributed model also means that it can take longer for the opensource community to identify and respond to vulnerabilities. once a patch is built and made available, it still has to go through several layers of distribution, such as github, red hat, and others, before reaching users. ﬁwe have got a bunch of extra layers, i think, that make the handling of software updates a bit more complicated and a bit different,ﬂ van someren said.opensource software is not one monolithic entity, and it is deeply embedded across commercial software, numerous operating systems, and other crucial products, making the challenges of opensource software updates both diverse and pervasive. there is no onesizetsall solution, van someren said, ﬁbecause pretty much every project has its own unique way of doing things.ﬂ each project even has its own way of describing software updates, he observed. for example, when openssl releases an update, developers call it a ﬁsecurity updateﬂ and detail all the changes it involves. with linux kernels, on the other hand, there are no specic ﬁsecurity bugs,ﬂ because the philosophy in that community is that all bugs could affect security. a user could reasonably wonder, however, whether it is necessary to install all the new kernels, which are released weekly, even if they are not specied as improving security, since there is a risk that changing kernels frequently could destabilize their system. by not indicating how severe the vulnerability is, linux kernels could be inadvertently turning users away from deploying essential updates. another major difference with opensource software is the matter of liability. commercial software often involves legal obligations for service and updates; with opensource software, there is no such agreement between developers and users. while some businesses offer servicelevel agreements to support opensource software, that is not feasible for every case or every organization. those responsible for the linux kernel, for example, do not want to take on any level of liability. ﬁthere are it can take longer for the opensource community to respond to vulnerabilities. software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.27a whole host of problems and opportunities that crop up from that abrogation of liability,ﬂ van someren concluded. ﬁfree software,ﬂ a subset of opensource software that is free to use and alter, also brings a host of unique challenges. the most common example of this is the gnu public license (gpl), which is how the linux kernel is licensed. tivo at one point used code released under gpl, but its devices restricted users™ ability to update the software themselves by requiring their devices to only run code signed by tivo. when the next version of gpl was drafted, designers added ﬁantitivoizationﬂ code to prevent this behavior. while this was considered a victory for free software, it raises new software update challenges, such as the question of who is authorized to sign an update before it runs on a device.van someren suggested that those security liabilities are a good reason to avoid gpl on opensource products, despite some technical solutions that can improve security. in general, he noted, it is said that software can be secure or software can be free. ﬁyou can have one or the otheršbut you can™t have both,ﬂ van someren summarized. another cii project is working to create a global platform of trusted execution engines for mobile devices. some options being pursued would allow users a certain amount of control, and van someren expressed optimism about their potential value.dealing with the fear of destabilizationright now, the biggest impediment van someren sees to software updates for open source is users™ common concern about whether a software update will cause instability across their systems. this concern partly stems from that fact that users aren™t sure exactly who made the patches or how they were tested. he told the story of a wall street chief information ofcer (cio) who ﬁnearly had a heart attackﬂ when van someren pointed out that many of the bank™s frontend web services came from github, which means that an attacker could commit code to a project used by the bank and thus insert vulnerabilities into its live online banking system. the cio™s rst instinct, to stop applying security patches, is not necessarily the best move. the story illustrates a key question that everyone is wrestling with in open source, said van someren: who has authority to determine what code is ﬁgoodﬂ and what code is not?in the discussion, forum chair fred schneider reiterated the sense that fear of system destabilization is a main reason users may ignore updates. van someren noted that several linux distributions do offer rollbacks if an update causes destabilization. vendors of opensource distributions (as opposed to the community using free software) software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.28also offer restabilization, because their business model depends on keeping customers satised. opensource creators should, in theory, retest any existing components that they add to new software, but that takes a long time to percolate up through all levels of software, especially when components are stacked so deeply. opensource distributors like red hat have done this extra testing, which should increase stability, van someren noted, but he emphasized that there really isn™t a single solution that would work in all cases. because the opensource world is so varied, many projects have come up with their own systems for handling the destabilization issue.carlos picoto, microsoft corporation, noted that using a public or wellknown interface to deploy security updates does not always prevent destabilization. for example, he pointed to software that is either not using the common microsoft api or is using it incorrectly; he noted that linux kernels can be particularly problematic for microsoft updates, for example, as can vendors who do not use properly compatible software.open source in the internet of thingsvan someren wrapped up with a discussion of the role of open source in internet of things (iot) devices. as noted at several points in the workshop, startup iot manufacturers often assume their products have a short life span and are, essentially, disposable. van someren countered that while that may be true for more esoteric products like a wificonnected hairbrush, it is not for household necessities like water heaters and lighting systems, and it is certainly not for cars or industrial machines. ﬁwe need to think about what to do when, not if, the [iot] vendor goes bust,ﬂ van someren said.one idea cii is considering for these situations is ﬁcode escrow,ﬂ in which vendors put the last version of their code, along with dedicated funding, into a trust that can then be tapped to continue to support the software when the company goes under. how exactly this would workšand whether companies would sign up for itšare open questions, van someren said. in the discussion, bob blakley, citigroup, inc., delved deeper into how companies could potentially be convinced to get on board with the idea of code escrow. noting that the doddfrank bill required nancial institutions to set aside capital in case of emergencies, he speculated that regulations requiring software rms to escrow code on the basis of public interest might be worth considering.peter swire, georgia institute of technology, questioned how such an escrow system would work in the context of bankruptcy law, which prevents companies from software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.29holding on to assets amassed within 6 months preceding a declaration of bankruptcy. van someren claried that, ideally, an escrow would be established at the outset of launching a product, or, failing that, when the reality of bankruptcy is at least 6 months away. in response to a followup question from blakley, who suggested that such a system would require regulation to enforce it, van someren claried that he would prefer a mechanism such as a checklist or badgeearning system where opensource iot projects could selfassess their ability to create a secure development life cycle, similar to linux™s existing best practice badge program for opensource software. such criteria would improve security outcomes by allowing companies to selfcertify, but then make that certication public, where it could be scrutinized and veried. the best outcome, in van someren™s view, would be to get the industry™s buyin on such a program before approaching the federal trade commission and asking it to ﬁput some teeth behind it.ﬂone other possible mechanism for protecting consumers from the dangers of outdated iot devices, van someren suggested, is to take advantage of what™s known as a watchdog, a system congured to detect critical failures and trigger a complete reset of the system. in this vein, software updates could be seen as ﬁfood to feed the watchdog,ﬂ allowing a device to maintain its internet connectivity. for this to work, the devices themselvesšsuch as garage door openers, lights, and hot water heatersšwould need to be able to perform their functions without internet connectivity, although they would stop communicating with their mobile and internetbased controls. this limits damage when devices stop receiving software updates. ﬁwe need to make sure that the mode of failure is disconnection, rather than the product stopping working,ﬂ van someren said.software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.30cisco™s approach to software updates5 ed paradise, cisco systems, inc.ed paradise is vice president of engineering for the security and trust organization at cisco systems, inc. he addressed today™s attack environment, cisco™s response to security vulnerabilities, and key considerations for the network infrastructure across the internet.paradise is responsible for making cisco products secure and trustworthy. his teams dene and maintain cisco™s secure development lifecycle (csdl), including its engineering, design, and security update procedures, plus product testing, evaluation, and incorporation of feedback. as a center for security innovation, his teams also develop embedded security technologies, which are deployed broadly across cisco™s full portfolio. examples of these technologies, which are mandated by csdl, include ciscossl, trust anchor modules, secure boot, and image signing, as well as many other hardware and softwarebased security technologies.the attack environmentparadise shared projections indicating that by 2020 global internet protocol (ip) trafc is expected to double, to 2.3 zettabytes, and that broadband speeds are also expected software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.31to double. twothirds of that trafc will be mobile and wireless, and 82 percent of all consumer internet trafc is projected to be video streaming. this large number of devices and vast amount of bandwidth raises the stakes considerably, paradise suggested, when considering the prospect of another attack like mirai. paradise described an experiment demonstrating how rapidly and frequently software is contacted and probed. he connected a brand new device to the internet and tracked what happened. within 5 seconds, another device made contact. within 5 minutes, a device from china made contact, and another actor checked if the device could be turned into a botnet and used in a distributed denialofservice (ddos) attack. within 30 minutes, an actor had run a full vulnerability scan on the device. by the end of its rst 24 hours connected to the internet, about 4,000 different machines tried to contact the device.as his experiment demonstrates, devices and software can be compromised in a matter of seconds. according to paradise™s research, about 70 percent of contacts are attempts to use the device as a botnet in ddos attacks. other key risks include fraud and data theft. ﬁthere are a lot of bad things happening, by a lot of bad actors, pretty quickly,ﬂ he summarized. cisco™s approach to addressing vulnerabilitiesparadise detailed how cisco handles security incidents. vulnerabilities can be identied through a variety of mechanisms, including internal testing and validation, customer notication, or opensource notication. depending on the vulnerability, it can take minutes or months for paradise™s team to learn about it. activating cisco™s product security incident response team process (psirt), the team assesses the scope and scale of the situation and then comes up with a plan for xing the problem and alerting users. ultimately, he explained, an update goes out simultaneously to all the affected customers, and the team monitors and incorporates any feedback they receive to improve the process, repeating xes as necessary until the crisis is over. prompted by a question from bob blakley, citigroup, in the discussion, paradise reiterated cisco™s policy of providing simultaneous notication to all users, rather than identifying priority users for advance notication. eric grosse, an independent consultant, recalled that in his experience, it was difcult to know which cisco updates to install because the names were so confusing. paradise recognized that that was indeed an issue, mostly because of the large number of products that cisco offers, and he noted that the company is working to beef up software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.32customer service to help customers navigate the product portfolio in order to nd needed updates.1 steven lipner, an independent consultant, asked how cisco handles updates to products that include opensource components. paradise noted that cisco does a signicant amount of testing on these products, and it also has a robust certication program. for example, cisco has an automated registration and verication process for certain software that incorporates ciscossl (based on openssl with different features and functionalities). the two groups have a strong working relationship for when joint updates are necessary, and cisco helps openssl by doing daily automated testing. that partnership is an example of a good relationship with opensource software. however, paradise noted, there can be problemsšfor example, when the heartbleed bug came out. tens of thousands of products were affected, and because of that large number, it took a long time to complete all the necessary verications. forum chair fred schneider asked paradise to describe the extent to which cisco controls its software and how it is used, and the extent to which cisco is therefore able to mitigate the potential for destabilization. paradise said that cisco maintains tight control over the majority of its softwarešalthough there are some customers who want to add code to cisco productsšand he underscored that updates are thoroughly tested to prevent destabilization in the context of use that cisco can control (e.g., not necessarily accounting for any code added on top of a cisco product).paul kocher, cryptography research division, rambus, inc., asked what cisco might be doing to help provide a safe platform for vulnerable or unmaintained internet of things (iot) devices to continue to operate, as discussed during nicko van someren™s presentation (see chapter 4). paradise suggested that there may be opportunities to prevent future ddos attacks by properly securing networks for iot devices and embedding a ﬁkill switchﬂ that detects when a device is performing a function that it was not built to perform.building on this discussion, david hoffman, intel corporation, agreed that iot devices are vulnerable because they don™t have regular security updates the way that 1see, for example, o. santos, 2017, ﬁkeeping up with security vulnerability updates,ﬂ openvuln api, cisco blogs, january 24, http://blogs.cisco.com/security/openvulnupdate.there are opportunities for network infrastructure companies to create relationships with iot providers to improve device security. software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.33computer operating systems do. but, he said, companies may be prevented from doing security scans on these devices by the computer fraud and abuse act. he suggested that companies might overcome this limitation by working together to scan devices for security issues or breaches as an added service to companies and individuals, thus increasing transparency and alerting internet service providers to potentially harmful trafc. paradise agreed that these issues present an opportunity for cisco and other network infrastructure companies to create relationships with iot providers to improve device security, including a multitier ﬁiot readyﬂ certication program. using cameras as an example, paradise said such an arrangement could allow cisco to offer consumers a list of camera models that work best with a cisco router and would be supported against future security risks. choosing to buy a camera not on that list would mean that a customer is taking the risk, knowingly, that the camera may not be protected and could be used to transmit sensitive data or propagate harm through the network.understanding user perspectiveszooming out to the technologyusing population as a whole, paradise reiterated the notion, raised elsewhere during the workshop, that most users live ﬁin a world of false condenceﬂ about the true level of their security. a recent cisco survey revealed that a majority of users have ﬁstrong condenceﬂ that, among other things, they can detect security vulnerabilities in advance (51 percent), that they can defend themselves against attack awareness fades condence. source: cisco, 2016, 2016 cisco annual cybersecurity report, http://www.cisco.com/c/m/enus/offers/sc04/2016annualsecurityreport/index.html?keycode=001031952&ga=1.57614639.400663907.1438105234.software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.34such attacks (54 percent), and that they regularly review security policies (56 percent). he noted, however, that these numbers are slowly dropping, as users become less condent with every wellpublicized security breach.another cisco research report showed that 92 percent of devices currently connected to the internet have an average of 26 security vulnerabilities each. this isn™t just old ipods, he reminded the participants: ﬁthis is more about devices that are on the internet as part of the infrastructure.ﬂ a whopping 31 percent of connected devices are classied as ﬁend of service,ﬂ meaning that manufacturers will no longer support security updates, and the manufacturers are not patching vulnerabilities. ﬁeven if we wanted to,ﬂ paradise explained, ﬁwe probably don™t have the capability to service that device any longer.ﬂafter devices enter ﬁendoflifeﬂ status, they are no longer serviced or sold at all. five percent of devices currently connected are in this category. the main reason people hang on to devices, particularly between endoflife and endofservice, is nancial: if the device is still working, consumers don™t feel the need to replace it. convincing these customers of the security risks they are taking can feel like a losing battle.richard danzig, johns hopkins university applied physics laboratory, asked about the role of psychology in determining how people perceive security. he pointed to the cognitive psychologists amos tversky and daniel kahneman (whose collaboration is the subject of the recent michael lewis book the undoing project2), who study the psychological factors that color people™s perceptions of different types of risky 2m. lewis, 2017, the undoing project: a friendship that changed the world, norton & co., new york.reliability breeds complacency. software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.35situations. paradise agreed that psychology is a factor when customers are deciding whether the risks they face are large enough to invest in new equipment. he suggested that the industry could do more in the way of sales, marketing, or consumer education to highlight the security risks customers invite when they continue to rely on endofservice or endofsale equipment. ﬁwe haven™t presented the arguments to our customers,ﬂ he said.paradise suggested that part of the solution is that customers need to be taught better questions to ask about security features when they are buying new equipment. while software companies are motivated to incorporate new features into their software in order to woo customers and grow revenue, unfortunately, ﬁwe don™t have a large base of our customers asking for those security features,ﬂ he said. cisco is pursuing research on ﬁthe psychology of securityﬂ in order to better educate their customers about the security risks they might be taking when they choose not to update or replace their software.software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.366 ensuring robust firmware updatesdave whitehead and edmund schweitzer, schweitzer engineering laboratoriesdave whitehead, vice president of research and development for schweitzer engineering laboratories (sel), presented a detailed look at sel™s industry space, products, and update challenges. edmund schweitzer, president and board chairman of sel, was on hand to answer questions.sel is a software and rmware company that specializes in inventing, designing, building, and supporting electric power systems for industrial companies and global utilities. with a mission to make electric power safer, more reliable, and more economical, whitehead described sel as ﬁthe brains of the electric power systems.ﬂ while all of the design, manufacturing, and support is done within the united states, sel serves clients in about 160 countries, making it a global company.unique attributes of sel™s market spacesel makes a suite of products that are meant to work in concert to support electrical power systems. the company™s protection and control devices measure electric current and voltage, determining at every millisecond whether a circuit breaker or a power line needs to be tripped. sel also makes automation equipment, such as specialpurpose software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.37computers that interpret data and make higherlevel decisions about power use, passing those decisions up to an information center or down to a protection device. in order to keep these systems secure, sel also builds switches, rewalls, and gateways. finally, sel makes operations software that enables client technicians to make decisions, such as determining when to send control commands to shut a power line down for maintenance. ﬁit™s a very layered approach to how we go about controlling and operating the power systems,ﬂ whitehead said. electric power systems are managing electric power and transmission concepts that are more than 100 years old and were created well before the internet and rmware. whitehead noted that this is actually good news for security: if power systems lose communication or other computerized controls, they can still remain functional. on the other hand, our strong reliance on electricity today means the stakes are extremely high. ﬁwhen we mess up, letters get written to the president . . . so we take this stuff very seriously.ﬂ whitehead said.whitehead noted that sel has several advantages that more general software companies like microsoft or cisco do not. for example, it has the luxury of building its systems to do one thing only, which is to protect power systems: ﬁwe don™t have to be all things to everyone,ﬂ he said. sel benets from the ability to tailor its systems to their intended use and only include those necessary features. in addition, sel systems are created to be static. client utilities expect to use their designs for 20 years, with minimum upgrades, because once the systems are built, they are considered ﬁdone.ﬂ therefore, in general, sel does not anticipate frequent rmware updates, although he noted that one of their devices does use a microsoft product, so they must be aware of any patches and notify affected customers accordingly.sel™s approach to securitywhitehead described security as integral to the sel product life cycle and said this ethos is re˚ected in welldened, robust engineering principles implemented all the way to capability maturity model level 5. founder ed schweitzer drew on his previous experience at the department of defense to place security at the forefront of the company™s products from the getgo. for example, from its rst product 30 years ago to today, sel has had two levels of access to its devices: one for a technician to view data, and another that allows a higherlevel user to set and congure a device.in addition, sel engineers own every piece of code in its devices and have revision control for every device in its factories. they also use automated test code analysis and human teams to review every piece of rmware top to bottom. they create single binary software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.38les that match a rmware product to its version number, allowing them to track and x any security problems. the nal step in product development is negative testing, in which engineers deliberately try to break every aspect of the rmware. ﬁwe really want to beat up the product before we ever release it to any of our customers, because . . . once i release a product out into the electric sector, we™ve got one chance to get it right,ﬂ whitehead said. sel also provides a mechanism for customers to verify that all rmware is from sel before installation, which further enhances security. sel also now includes signatures in its software, preventing it from being loaded onto sel rmware until it passes cryptography checks, whitehead said.managing firmware and software updatessel takes a somewhat unique approach to managing rmware upgrades: the company itself keeps track of which customers are using every piece of rmware, so it can alert those customers when updates are needed. sel also provides education and training for customers to implement sel products securely, even providing cybersecurity services tailored to each client™s needs.firmware management has evolved since sel began. in the 1980s, rmware was manually upgradedšan engineer had to physically remove an old memory chip from a device and add a new one. in the 1990s, ˚ash memory enabled rmware updates through communication ports. in the 2000s, substations began using ethernet, which made upgrades easier but also presented cybersecurity challenges, and so the internet was not often used for rmware upgrades. while sel could push out rmware upgrades today online, because of the security risk, it avoids this approach, particularly for upgrades to sensitive functionality like protection devices. a technician will instead visit a client site, take the whole device out of service to mitigate any security risks or errors from the upgrade process, and then manually install new rmware. if a defect is found, sel will resolve it, push out updates, and notify customers through a security bulletin. whitehead noted that the company issues a security bulletin each month whether there have been any updates issued or not; this helps customers prove to regulators that their systems are up to date. if there is a security defect, the client has 30 days to evaluate whether or not it affects its equipment, and if so, whether the equipment needs to be taken of˚ine for servicing, which can be a major undertaking involving a planned outage. the rmware is then upgraded, tested, and veried before being put back into service. software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.39prompted by a question from richard danzig, johns hopkins university applied physics laboratory, whitehead elaborated on this 30day window during the discussion. the window starts when sel noties a client about an available x for a discovered vulnerability. the client then has 30 days to decide whether the vulnerability applies to them, what steps they will take, and how they will mitigate any risk. while the actual x does not have to be implemented within 30 days, the operator must be able to demonstrate a plan by the end of that period and potentially justify any delays in an audit. while clients may prioritize certain updates over others, by and large they are very responsive to these notications, whitehead said. sel also creates updates that provide new features, usually in two to four releases per year. these deployments are handled separately from security updates so that clients can respond to the two types of updates accordingly. whitehead noted that policydriven software updates can be problematic, because policies can never truly t every possible situation and sometimes can end up driving out other creative solutions to problems. in his view, the u.s. government should inform power system operators of security threats, but leave specic decisions about features or security updates to those who own the system™s assets.other mechanisms for maintaining secure systemswhile power systems operate on networks, whitehead stressed that there are critical steps to ensuring these networks cannot be penetrated by attackers via the internet. first and foremost, he said, operators should never connect their systems to the internet. they should also conduct audits to ensure there are no such connections. sel clients maintain private, secured networks for their control networks that are completely separate from any other corporate information technology functions, said whitehead.in addition to layering and separating different parts of a system and properly educating clients on security defenses, whitehead noted that sel also scrutinizes and veries every aspect of its supply chain in order to track parts, enhance security, and build trust. other sel methods for increasing security include maintaining private security plans, compartmentalizing systems, and monitoring and investigating any unusual events.because they involve physical systems, one advantage of sel products, whitehead noted, is that it is easier to identify problems compared to, for example, online banking, where it can be hard to determine what exactly has happened when there is a breach. because all of the systems in use are constantly measuring the power system, information about any unusual occurrence can be validated among the systems. software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.40the ﬁauroraﬂ vulnerabilityat danzig™s request, whitehead and schweitzer described an incident known as aurora and discussed its security implications. in a power system, a circuit breaker has two parts. when a breaker is opened, the frequency and phase must be the same on both sides; if they aren™t, it can cause excessive torques in the rotating machinery and cause damage. at con edison, schweitzer™s grandfather created a way to record every instance of this occurrence after observing that operators would sometimes intentionally cause it to happen in order to enjoy the noise and drama of watching the breaker synch up again. an intentional demonstration of this phenomenon, called the aurora vulnerability, in 2007 raised fears that it could be exploited to break electric power systems. in the incident, operators set up a 4megawatt diesel generator incorrectly on purpose and then physically manipulated it to trigger the aurora phenomenon. the incident was not caused by a rmware vulnerability, schweitzer said, and using this approach to attack a power system would require such a long chain of events that the company does not view it as a signicant vulnerability. fostering development expertise and broader lessons for the software industrybob blakley, citigroup, expressed his admiration for sel™s robust development process and asked whitehead how the company manages to recruit qualied developers. whitehead explained that a close association with washington state university allows sel to tap engineering and computer science talent early and train young developers on the company™s methodical engineering design process. while the universities teach the fundamentals of mathematics and engineering principles, whitehead emphasized that industry is where design and practice are taught, so sel expects to need to train recruits on its process.tadayoshi kohno, university of washington, asked if sel represented the industry as a whole, or is ahead of its competitors, and whether there are any specic lessons the sel experience could offer for the software industry more broadly. schweitzer responded that sel evaluates its products in comparison to those of competitors and remains condent in its work. in terms of broader lessons, schweitzer noted that the intelligence community could be more involved, and that industrywide sharing of information about threats could also improve security. for example, sel writes many technical papers every software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.41year that become resources for the broader community. one, for example, focused on how the company would know if power systems had been hacked, concluding that because it™s easy to measure use in power systems, a hack would be fairly obvious. other resources include sel™s indepth training and its modern solutions to power systems conference. schweitzer noted that this year™s conference theme, ﬁthe roots of cyber insecurity,ﬂ could be particularly relevant to this discussion.software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.42updates in the consumer electronics industry7will drewry, google, inc.will drewry is a principal software engineer at google, inc., where he is responsible for ensuring privacy and security protections on consumer products. he described the challenges involved in building and securing consumer electronics, including the use of offtheshelf components, businessside considerations at play, and a variety of technical factors.drewry explained that the products he has worked on typically include an operating system and an application layer on a physical device such as a phone or laptop, although these products have a variety of update strategies. while one product line receives feature and security updates every 6 weeks, another has monthly security updates and less frequent feature releases, and still other products follow an ﬁupdateondemandﬂ schedule. challenges from using offtheshelf componentswhile the makers of operating systems and internet of things (iot) devices intend to make secure products from the beginning, it can be difcult to do when working with commercial, offtheshelf parts and trying to keep up with the speed of production software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.43required to survive in the technology industry, drewry said. in this environment, the potential for updates can be seen as a ﬁcrutch,ﬂ because security can always, in theory, be improved after deployment. drewry offered a hypothetical example of a new device with an application platform that can add more and more features over time. a designer could choose to start layering in security in the browser, the application layer, or somewhere else. the security process might be rushed if the manufacturer wants to bring this device to market quickly and knows updates can be made later. most builders use best practices such as compartmentalization, tracking information ˚ow, and balancing when assets are available, but no code is invulnerable.many products, including all of the ones drewry has worked on, use opensource components like linux kernels, he said. the kernel has to be inspected to determine if it™s trustworthy, and kernels often lack a full annotation of security bugs; because it™s unclear which updates include security xes and which do not, drewry emphasized his belief that it is important to update the linux kernel frequently. drewry also oversees the hardware components of these devices, where the main processor has to interact with the software kernel being used. this is complicated by the fact that these processors are built by third parties and may not be compatible with a certain kernel, or the company may not offer direct customer service. processors are often manufactured for shortterm use; for example, a camera component on sale now will likely be replaced with a newer one within a couple of years. in that instance, if drewry is using that older camera in his hardware, he will have to update the kernel, which becomes an increasingly complex process, or ignore the updates. the linux kernel isn™t the deepest layer to be concerned about, either. mobile or device processor vendors layer software on top of a chipšthat may itself be modied or adapted, creating an opening for problems. a few years ago, for example, intel released microcode updates that could inadvertently alter instruction codes, causing some alarm. the fullfeatured operating systems sold today in ﬁtrusted execution environmentsﬂ may not always be trustworthy, drewry noted. computer chip makers feel pressure to include software on their products as a way to differentiate themselves from others, although drewry would prefer that they come without it. ﬁyou can™t even pay them to take it off,ﬂ drewry said. ﬁi keep trying.ﬂ security is difcult when working with commercial offtheshelf parts and trying to keep up with the speed of production. software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.44all of these extra layers from the chip up through the software pose added risks. ﬁi think there are lots of ways you can ameliorate that risk, but the farther up you go, it gets harder,ﬂ drewry said.businessside considerationsdrewry faces these challenges from the perspective of an industry giant; he noted that the many smaller companies and individuals, such as those launching products with funding from kickstarter.com, for example, rarely have the resources needed to invest heavily in software security. instead, they are typically entirely dependent on the protections that are already built into offtheshelf components available from third parties. google has sufcient resources to spend time compartmentalizing software that it purchases from code that it writes inhouse. the company also isolates the linux kernel from other layers, and invests in projects like the kernel selfprotection project (supported by linux™s core infrastructure initiative, described by van someren) that increase kernel security. but this process can be messy even within a company like google, and navigating such protections could be much harder for smaller companies. the mechanisms to support the sort of secure development life cycle discussed throughout the workshop could soak up a lot of a company™s bandwidth, drewry emphasized. creating updates is a business expense. key management is also necessary to keep updates secure, but that brings in more people, more technology, and enormous expenses, ﬁjust to get a modicum of assurance,ﬂ drewry noted.because companies want their customers to use the updates, it is also important to carefully manage how and when they are deployed; updates can™t be so frequent that users ignore them, and they can™t cause frustrating instabilities. in addition, as mentioned previously in the workshop, even the most secure updates in the world still need a secure delivery route to the client, who then has to deploy them correctly. a company™s ﬁupdate agentﬂ might need to build a secure connection to send the update, creating another layer that has to be implemented, protected, and given privileged access to the relevant devices.drewry shared an experience he had shipping an update for chromebooks: to avoid the situation where users cannot update without logging in (and thus being immediately vulnerable to an attack), google devised a process by which users could get an update on the login screen. this also avoided customers having to be walked through a tedious workaround to install the necessary updates and nally log in.experiences like that demonstrate that in addition to thinking about how to provide security, developers must consider how that security can be maintained within software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.45a system that comprises multiple interconnected layers, he said. in a world in which even the chips have software, nothing can be taken for granted. windows 10 recently added the ﬁwindows trusted boot.ﬂ older tivo devices used to rely on the kernel to check that certain key les had not been altered, and google is constantly checking all the software signatures and congurations every time a device is restarted, not just when software is rst loaded.additional technical complexitiesrollback protection, a mechanism to prevent the system from reverting to an older version of the software, raises additional challenges, drewry said. the record of having converted to the new version must be stored in a way that will prevent tampering, or at least show evidence of having been tampered with, and this protection must be stored in an appropriate place. one of the most common choices is to use replay protected memory block (rpmb), built on software and rmware, in the main storage device. that is still problematic, he noted, due to the increased reliance on the storage device vendor™s software development and key management and update practices. because processors run on a process size that is too small to include ˚ash storage, this functionality cannot be put on the chip itself. as a result, ﬁwe lack this essentially critical secure storage for making decisions,ﬂ drewry said, and developers have become reliant on third parties that are part of their trusted network.another complex issue is the ﬁsingle signerﬂ problem. although users might be protected from unauthorized attacks, what if the signer is the one compromised? ﬁwe haven™t actually solved the problem of protecting them against us,ﬂ drewry said, emphasizing that even 1bit code errors can become vulnerabilities in the right context.drewry discussed the importance, and challenges, of preventing targeted attacks. although google focuses on making it difcult for hackers to target specic users, it™s still fairly easy to identify people with just a few pieces of information. removing unique identiers from the system can help make it harder for attackers to target a specic victim. broadly speaking, while software transparency may be an excellent reactive mechanism and make attacks more complicated, drewry emphasized that it is not proactive and cannot protect users from having their identity or information compromised in the rst place. it is important for companies to seek a more proactive solution, he said. one avenue that could improve security updates is nding the right incentives so that designers want to build more secure systems, he suggested. drewry believes incentives for chip makers, operating system designers, and other key players software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.46will be a strong motivation. ﬁthere is room in the industry to provide these tools,ﬂ he said, adding that linux and big companies alike could help move the process along.eric grosse, an independent consultant, asked drewry if there were best practices the community could use to prevent a new device, fresh out of the box, from being immediately attacked (as ed paradise had described in his presentation), while still in need of a software update. is there a way, he wondered, to build in special protections to keep a device from being penetrated on its very rst startup? drewry expressed agreement that initial startup could present added vulnerabilities, offering as an example the story of chromebooks that were manufactured in large numbers and then ultimately sold by resellers up to 2 years later. seeing the risk that these machines would be signicantly more vulnerable to attack if the onlaunch software update took longer than 30 minutes, the company focused on creating an update that could be complete within that time window. another solution being used increasingly is to develop systems that update the software on devices while they are waiting in a factory or warehouse so that the software isn™t too outdated by the time the device reaches the customer, he said. software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.47software updates in automotive electronic control units8 john vangelov, ford motor companyjohn vangelov manages the embedded modem features group at ford motor company. he shared a history of automotive electronics before discussing the update challenges faced in the automotive sector today, including the limitations to network capabilities and the challenges of software delivery methods.history of electronic control unitswhen they were rst developed in the 1980s, electronic control units (ecus) were housed on chips that were either erasableprogrammable readonly memory (eprom) or masked readonly memory (mrom), vangelov said. eproms were slow to program but could be erased and reused, although the process was tedious. mroms were a better value, because they could be programmed on a large scale, but they couldn™t be updated or rewritten. there was also eeprom (electronic eproms), which was costprohibitive for wider use but suitable for storing essential automotive congurations or calibrations. wherever software was housed in the early days, this software was very difcult to alter once it was in vehicle production, vangelov said. most issues were addressed via software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.48direct part replacement. customers were notied of required changes and brought their vehicles into the dealer, where the ecus were physically replaced. as new automotive features were introduced, new software systems were developed. first came the engine controller, which optimizes car performance by reading sensors and sending controls to the car engine; the controller was invented to help cars meet clean air act requirements. ﬁthe engine controller was really the in˚ection point where we started bringing in a lot of electronics,ﬂ vangelov re˚ected. next, centralized body control modules appeared, which included new electronic features such as interior lights, air conditioning, and onetouch power windows, mirrors, and locks. these control modules replaced separate mechanical controllers for each accessory. ecus were also central to antilock brakes, which monitor wheel speed and control the brake valves to make driving safer.in the late 1990s and early 2000s, ecu processors started using ˚ash memory, said vangelov, and engineers developed several paths for updates to the operating system (os) and applications, such as onboard diagnostics (obd) and bdm or jtag connection ports. some ecus had programmable pins on the bdm and jtag ports, which raised security concerns and were eventually pulled from production, vangelov noted. during this time, designers were integrating more and more ecus into car features and rapidly increasing their capabilities, requiring far more memory and processing power than ever before. a modern seat controller, for example, uses pulse counts and a memory switch to store a driver™s preferred seat position; steering wheels and interior temperature can similarly be controlled with ecus. as the applications and the oss became more sophisticated, software code did, too. ecus are now written in higherlevel languages (such c or c++), vangelov observed, and require more memory and processing power. at the same time, ecus decentralized some functions by leveraging the increasing network communication and processing from other computerized modules in a vehicle. this increased communication, however, meant that cars needed more internal bandwidth. to meet the continually increasing demand for new features and the software to support them, the automotive industry created guidelines for three components: common library components, a common os, and communication and diagnostic standards.in the late 1990s and 2000s, vangelov said, car makers began to allow mechanics to use diagnostic testing tools to install software updates. small updates took a few minutes, but depending on how much software was in a car, some updates could take more than an hour. in order to shorten that process, car makers then introduced ecus that could be updated wirelessly, a signicant shift that opened many new opportunities. software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.49the challenge of limited networking capabilitiestoday, limited networking capabilities are a signicant challenge for ford, vangelov said. while flexray, automotive ethernet, and most150 connections boast data speeds of 10, 100, and 140 megabits per second, respectively, those highspeed networks are not available for the obd connector, so they can™t be used to deliver a software update to a car™s ecu via a diagnostic tool. controller area network (can), the one most commonly used by ford, vangelov said, provides automotive software updates at about 500 kilobits per second. in 1999, diagnostic capabilities were standardized through the international organization for standardization (iso) 14230keyword protocol 2000. before that, diagnostics were disjointed and often proprietary, vangelov noted. in 2013, unied diagnostic services and iso 15765 developed and dened diagnostic services for software update deliveries. diagnostic tools are the primary method for delivering the majority of the ecu software updates, vangelov said, although there are several other methods, including can, usb (mostly for updating the ﬁinfotainmentﬂ systems), wifi, cellular, and ford™s sync 3 system. vangelov noted that ford has been using wifi to synchronize system updates with its assembly plants since 2010, which helps reduce the need for immediate or complex updates after a car has been purchased.other challenges to software deliverysize is a growing challenge for delivering software updates in the automotive industry, vangelov said. a car today can have more than 10 million lines of code, compared to about 50,000 or so lines in the 1980s. updates now often require multiple decentralized ecus to be updated at the same time, which requires coordination and increases the size of the software delivery. this, in turn, means more time and bandwidth are required. that growth shows no signs of stopping. software size and complexity will continue to increase as advanced driver assistance systems, autonomous vehicle mapping data, connectivity applications, and other current capabilities continue to evolve.another challenge is software integration. the operating systems, their services, and the application logic are often not optimized for software deliveries. as a result, vangelov said, ﬁif i have to deliver an update to a module, i™m updating everything.ﬂ one opportunity for the industry to improve update deliveries would be to structure the architectures in a way that allows updating of single ecus, he said. this would software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.50drastically reduce the time it takes to deliver updates, without losing any functionality of other components.steven lipner, an independent consultant, asked vangelov to delve deeper into this problem in the discussion. vangelov said that some os components are better partitioned, but other systems have a conglomerated binary that requires coordination for updates. also, software updates themselves are often structured in a way that only allows delivery of the entire package at once, which takes a long time. ideally, each specic component™s software could be partitioned, vangelov said, but unfortunately ecus are not written that way, and even if they were, that could create a different problem because multiple parts and subparts would all need to be individually managed and updated across a distributed system of ecus. a car™s power supply presents additional challenges. as computerized as cars have become, the vast majority are powered by a lead acid battery and internal combustion engine, a power supply system that is simply not optimized for long software updates without additional charging. very large updates could risk draining the battery, which could erase the module being updated and even deprogram some of the car™s ecus, making them inoperable, vangelov said.dealing with legacy productsas in many industries, legacy products pose another software challenge for automotive ecus. they are not typically included in verication and validation cycles done for new product releases and so must be pursued in a different development track, vangelov noted. a further complication is that any update issued to ecus in older vehicles must be veried to meet requirements for cars on the road today, which could be different from the requirements for which the systems were initially designed years ago. in addition to the development challenges this raises, software updates extensive enough to meet new requirements can sometimes exceed the capabilities or the memory available on the original system, making it essentially impossible to implement the x, he said. the technology supporting software update delivery is also constantly changing. companies take away old products or services in order to free up space for new product offerings. for example, he noted, at&t recently retired its 2g network, and customers with 2gconnected phones can no longer receive updates. it may be only a matter of time before 3g or 4g, which some cars use for software updates, meet a similar fate. even before technologies become obsolete, regional differences can undermine their utility for delivering software updates reliably. globally and even domestically, cellular software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.51service can be inconsistent or intermittent, which can affect update speed, time, or even whether ford can connect to a vehicle at all. user experience is another important factor, and the challenges for the automotive industry are in some ways re˚ective of those seen in the technology industry more broadly. while ﬁtech guysﬂ like vangelov are interested in the latest and greatest software capabilities, many average users just want their devices to work, without having to know how it works or navigate cumbersome solutions, he said. one important need is to better communicate the need for software updates. ﬁwe really need to focus on how we drive the expectations for software updates to our customers,ﬂ vangelov said. other changes could help make the update process more palatable for drivers. for example, many devices have to be of˚ine while they are updated, which means a car can™t be driven at all. longer update times also mean that certain accessory functions, like the radio, could be unavailable during drives. minimizing the update time would improve the update experience for customers.in the discussion, will drewry, google, inc., followed up on this point, asking whether doubling the amount of storage would help to improve the user experience of updates by allowing the car to operate the old system while the new one is being installed. vangelov said that ford™s new sync 3 system uses this approach to run updates in the background while all of the car™s functions remain in use.security concernsforum chair fred schneider asked vangelov to speak to the issue of security, inquiring specically about whether it is possible to ﬁbrickﬂ a car. vangelov explained that when a car gets an update, it™s not an update for ﬁan entire computerﬂ but rather ﬁa conglomeration of multiple ecus.ﬂ in order to brick a vehicle, everything would have to be updated at the same time and the lead acid battery would be drained in the process. if, in the middle of updating certain critical components, such as the engine controller itself, the update were interrupted and it couldn™t resume operations, that would leave an opening, he said. ford is aware of this possibility and is looking for ways to strengthen securityšnot just for safetycritical components, but ensuring that the update mechanism is robust against all potential failure modes for all ecu modules. vangelov emphasized that update security is a primary aspect of his work at ford. for example, ford does verify keys on ecus and signs binaries that are delivered over the air. before a software update can be downloaded, a user must rst go through several steps that determine both an update™s validity and the validity of the vehicle and user. software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.52tadayoshi kohno, university of washington, asked if ford was concerned about the potential impacts of aftermarket components such as stereos or replacement transmissions in terms of software compatibility or security. vangelov agreed that this phenomenon poses a problem, irrespective of how software updates are delivered. before any updates are delivered, the system is designed to conduct an interrogation of all a vehicle™s parts, which should help determine whether a new component could compromise an update, or if it will react safely and as expected. ﬁif the interrogation results in something that seems foreign for that particular vehicle, it™s not a build that we recognize, we will actually not deliver the update because we don™t have a deterministic understanding of what the expectation would be if you were to deliver it downstream,ﬂ said vangelov. peter swire, georgia institute of technology, asked vangelov to explain whether the connections among different ecus in a car could allow a hacker to get further into the car™s controls after breaching one component. vangelov explained that while the ecus do interact, that interaction is at the networking signal communication level. for example, an antilock braking system (abs) module can read certain speed information from the can bus. however, that doesn™t mean the abs module can alter what is on the can bus, and so if the abs module were being updated, the update couldn™t affect the can bus, because it™s not involved in the update. if, however, the update was meant to x a communication problem with the abs module reading the can bus data, then the two systems would have to be xed together.swire asked if there were one main component of a car, central to its operation and connected to all the other accessory components, whose software, if hacked, could allow the car to be turned into a weapon. vangelov replied that there are some systems, particularly those related to powertrain systems or the chassis, that are obviously essential to a car™s operation. some models have these systems segregated and some don™t, and vangelov noted that he could see a situation ﬁpotentially go awry if there were a dependency between the two and they weren™t both updated at the same time.ﬂ software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.53the nist perspective on software updates9 paul e. black and lee badger, national institute of standards and technologypaul e. black and lee badger serve at the national institute of standards and technology (nist), the nonregulatory laboratory and agency of the u.s. department of commerce that advances standards in the information technology sector. black is in nist™s software quality group and badger is in the security components and mechanisms group. black spoke about software updates from the agency™s perspective, and both elded questions in the discussion period.key challengesblack opened with a discussion of the multifaceted challenges to creating software update infrastructure. processing power is one important factor, black said, because speed and capabilities vary greatly among chips. some, such as rfid chips, have very little power for updates, while others have massive computing power that larger updates require. in addition, some chips, such as readonly memory chips, have to be physically removed in order to be updated, while internetconnected chips can be updated wirelessly. for those updates that involve connectivity, network availability can also become an issue. for software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.54phones, cellular connectivity can be assumed, while other devices might be infrequently connected or might need to be updated in areas without reliable cellular service. as noted in other workshop sessions, the user can be a factor, too, black noted. most users do not have the expertise to understand what exactly a security update will do, what to install, and what to avoid.software incompatibility is a key concern that can have security implications, inadvertently leading to bugs, crashes, or even system failure. for example, there could be a downstream, isolated component that relies on a format that wasn™t included in a new update. a software update could even introduce new vulnerabilities to a system that had previously been secure, such as by creating vulnerabilities when two previously secure modules interact in a new way. program shepherding, which monitors control˚ow transfers during program execution, can become an important mechanism to monitor for potential intrusions during an update, as well, he said. as noted throughout the workshop, software updates can also alert attackers to vulnerabilities. for example, hackers might be able to compare the old software to the updated version, identify the vulnerability being patched, and attack private information on systems that haven™t been updated yet. black suggested that there may also be some overlooked challenges surrounding updates to newer systems like virtual machines, containers, or microservers. although these are software packages, they are handled differently than typical software. virtual machines, for example, can execute multiple operating system congurations, depending on their use, and would need all the corresponding software updates to remain secure.building on a theme raised earlier in the workshop, richard danzig, johns hopkins university applied physics laboratory, asked how the growth of cloud computing and machine learning might be affecting this landscape, in nist™s view. black responded that the cloud, in one sense, is just another environment for operations, and in fact, the isolation of cloud systems make them easier to deal with in some respects. another nuance is that the cloud business model is founded on offering uptodate, secure, wellcongured computing. this model turns operations from a business expense into a protmaking center, which could potentially work in users™ favor because there is perhaps more of an incentive for companies to put resources behind frequent, highquality updates, black suggested. software incompatibility is a key concern that can have security implications. software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.55machine learning (or articial intelligence) could be used to support security in a number of ways, black said. for example, these technologies could be used to create more intelligent mechanisms for identifying vulnerabilities, monitoring intrusions, and responding to breaches. black said his group is experimenting with google™s opensource software library, tensorflow, to recognize software vulnerabilities. to be successful, we must learn from both good and bad experiences with applying machine learning in this context, he said. another challenge in the current landscape that is sometimes overlooked, black noted, is ephemeral code. a lot of software is written in javascript, which is itself constantly being updated, and it™s difcult to know which version of javascript certain code is relying on. nist doesn™t have an answer to this problem yet, black said, but ﬁwe™re raising the problem so that smarter people can think about it.ﬂfinally, the relationship between software vendors and users can also be problematic for appropriate use and updating of software. most software is licensed to a user instead of sold outright, in order to protect the maker™s intellectual property rights. however, the licensing agreement doesn™t set forth security requirements for the user. this licensing arrangement thus gives software makers ﬁthe best of both worlds,ﬂ with fewer protections for the consumer, black said.solutions being pursuedblack presented some possible solutions to address some of these key challenges. one idea nist is exploring to keep hackers from reverseengineering patches is a ﬁoneway function,ﬂ he said. he introduced a hypothetical scenario with a software component, ﬁs,ﬂ that has an input vulnerability, ﬁv.ﬂ typically a patch would be designed to detect a v input and lter it out but otherwise run s as usual. but this approach reveals to hackers that v is the input that causes the vulnerability. an alternative idea is to create a patch that uses a oneway function on the input, so instead of ltering out v inputs, it would be detected with a hash signature and compared to a given value (or range of values). ﬁbecause it™s oneway, it™s infeasible to reverseengineer that and gure out what the vulnerability is from that patch,ﬂ black explained. if such oneway functions were feasible, this type of patch would allow a system to recognize v and reject it without broadcasting its vulnerabilities. because oneway functions tend to require a lot of computation, black said it would be ideal to issue a code x at some point, but that could be done in a way that separates the patch information from the code change and delivers them at different software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.56times. this could help address the challenge of sending an update quickly enough to prevent hackers from reverseengineering an exploit. regarding the idea of a software inventory, suggested earlier in the workshop, black suggested that such a mechanism would indeed be helpful in shedding light on the building blocks inside complicated software modules, and he noted that nist is working on enabling a software identication tag (swid) that could be complementary to this approach. swid is an international organization for standardization (iso) standard that gives every version of software a unique id. ﬁit doesn™t solve problems,ﬂ black said, ﬁbut at least this way there™s an iso standard to communicate the information.ﬂswid tags could create an inventory of all the software on a system, which would help users know, for example, how many different versions of a piece of software are running or which software needs to be updated rst. facilitating automated updates like this would also help control the costs of software updates, black suggested.circling back to this notion of software transparency in the discussion, bob blakley, citigroup, noted that containers, complete systems that contain everything software needs to run and can be easily installed on servers, could help advance transparency because they are discrete parts with known materials, making it easier to see and address any vulnerabilities discovered within them. he suggested that more of these containerbased models could meet the need for a ﬁbill of materials.ﬂblack also addressed the issue of conguration updates, which are more complicated than software updates. even if the system is properly congured for the old software, an update can introduce new parameters that essentially wipe the old conguration or create a potential mismatch between the old conguration and the new parameters.in the discussion, tony sager, center for internet security, noted that in his experience with the department of defense (dod), conguration was a major consideration when evaluating the need for updates. if a system™s conguration eliminated the bug that the software update was trying to address, then there might be no need for the update in a particular situation. ﬁgetting that right is hard to do,ﬂ sager said, ﬁbut it really is, i think, a key part of the decision.ﬂ conguration updates typically come with specic instructions from the vendors, who use can nist™s checklist program to guide what to update, how to communicate updates to users, and how to make sure the settings are correct. in some cases, nist reviews the checklists, but in others, such as with openssl, the process is centralized and users receive one update message. checklists can sometimes be out of date, or they might be for updating software only, as opposed to the entire conguration, ﬁbut at least the information may get out there,ﬂ black noted.software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.57another relevant nist project is the security content automation protocol (scap), which is also meant to automate updates. scap veries system details (such as which versions, privileges, or daemons are running) in advance, so that updates run more smoothly and only change what each particular conguration requires.prompted by a question from sager, black elaborated on scap in the discussion. sager wondered whether nist faces a chickenandegg problem in trying to get industry adoption for this idea. standard naming and enumerations could simplify the problem, while trying to update an unknown number of variations on a theme could make it a much more difcult problem. black agreed that industry can be hesitant to adopt new tools, pointing to swid tags, which have also created a chickenandegg problem, as one example. very few software packages provide swid tags, because there aren™t a lot of swid tools out there for them to use in the rst place. to remedy this problem, nist is producing tens of thousands of swid tags for existing packages to get them into wider circulation. to the question of industry adoption challenges for scap, badger said that the antivirus sector has relatively good adoption rates, although it™s been difcult to get wider adoption in the industry as a whole. one barrier is that scap is complex and has a considerable learning curve. sager suggested this might be a case in which buyers need to be educated to know what protections to demand, but the standard itself must be sufciently mature to drive this demand. buyers like dod and the national security agency were able to ratchet up the demands in their contracts, which led to the creation of the common vulnerabilities and exposures and open vulnerability and assessment language, for example, noted sager. but when buyers and vendors lose momentum, the demand can wane. nist also is seeking ways to encourage and reward highquality, rapid, and secure software development, black said. for example, the agency is running a secure toolchain competition, in which it presents a problem and gives teams 1 day to develop a x. through many rounds of these challenges, more and better secure tools are created, which raises the security bar higher and higher.steven lipner, an independent consultant, noted that such competitions can have downsides and lead to false conclusions if the lessons from successfully handling ﬁtoy problemsﬂ are extrapolated too far. black agreed that this is a risk and said it is a factor nist is seeking ways to encourage highquality, rapid, and secure software development. software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.58they have tried to account for. while these contests are not likely to draw out solutions that would apply to the development of a new os, he noted, they are potentially very useful for creating better security solutions for smaller apps, which are often ﬁslapped togetherﬂ rapidly and often have signicant security vulnerabilities.a recent nist report, dramatically reducing software vulnerabilities,1 identies specic technical methods such as proofcarrying code, wellanalyzed frameworks, and potential update mismatches to improve software security, noted black. wellanalyzed frameworks, for example, enable updates to insert small bits of code around a framework, instead of updating an entire piece, thus increasing the security of updates.1national institute of standards and technology, 2016, dramatically reducing software vulnerabilities, november, http://nvlpubs.nist.gov/nistpubs/ir/2016/nist.ir.8151.pdf.software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.59protecting consumers from software update risks10ruth yodaiken, federal trade commissionruth yodaiken is a senior attorney in the bureau of consumer protection at the federal trade commission (ftc), the agency that protects consumers from unfair or deceptive business practices across all industries. in her talk, yodaiken described the ftc™s approach to consumer protections in the internet of things (iot) sector, including software update challenges. she specied that she was speaking at the workshop for herself and not on behalf of the ftc. the ftc has two primary methods of ensuring that consumers are treated fairly: law enforcement and policy. the agency takes a comprehensive view of unfair or deceptive business practices, such as misleading claims or outright fraud, that could open up consumers to risk, before considering crafting new policies or taking legal action. the ftc is active in the technology industry in general, including the iot landscape, said yodaiken. but, the agency has not issued any blanket rules or requirements for security or update protocols in iot devices. rather, it has focused on the context that a particular business is operating in, recognizing that different devices and different ecosystems require very different update approaches.yodaiken said the main questions driving the ftc™s work are the following: what are the benets to the consumer? what is the risk of harm to the consumer? can that risk be lessened? and is a business taking reasonable measures to do that? in the iot industry, software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.60the main challenge, she said, is that ﬁa consumer very often has no idea what is going on with their devices, [or] if their devices are compromised.ﬂ yodaiken noted that companies are responsible for taking reasonable measures to protect consumers from security risks, and if they don™t, the ftc can step in. in 2013, for example, the ftc alleged that trendnet™s baby monitors and video cameras lacked adequate security protections, leaving consumers vulnerable to privacy breaches. the ftc alleged that the company failed to encrypt credentials, provide adequate security training to its employees, or conduct vulnerability testing. trendnet settled the highly publicized case, but unfortunately, yodaiken said, the ftc continues to see many of the same issues in today™s consumer products.working with businessesin addition to its legal work, a big part of the ftc™s work is to educate businesses and consumers about security issues. taking a close look at iot devices, for example, the agency found that different businesses have different denitions of ﬁbasic security.ﬂ some companies were extremely experienced and engaged in security issues, yet they still struggled to address vulnerabilities and deploy software updates in iot devices, often for many of the reasons being discussed at the workshop. other companies might have a less experienced security team or focus on product features at the expense of security. other companies might not even consider security a priority. ﬁall of these pieces become parts of the ecosystem and obviously create problems,ﬂ yodaiken said. when those problems occur, software updates are, of course, a key remedy. by initiating conversations about security and providing educational materials, the ftc encourages developers to design software with security in mind and plan for updates.in the discussion, richard danzig, johns hopkins university applied physics laboratory, asked whether the ftc was considering using insurance companies to compel businesses to better secure their software products. yodaiken replied that the ftc has had some internal discussions about incentives, but noted that the national telecommunications and information administration™s multistakeholder process on the ftc encourages developers to design software with security in mind and plan for updates. software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.61software updates has a subgroup focusing on economic incentives that might be another appropriate forum for further discussing such an approach.educating consumerseducating consumers is also a key piece of the puzzle. as an example, to combat phishing and malware hacking, the ftc has tried to educate people not to download unfamiliar email attachments, yodaiken said. the iot space poses some unique types of challenges. while the ftc does not want to shift the responsibility for security to the consumers, the agency is grappling with how to help consumers better understand the risks inherent to iot devices. ﬁthere are a lot of consumers who don™t understand that their devices are connected to anything, they don™t really understand how the magic works once they™ve set it up,ﬂ yodaiken said. without this basic understanding, it™s difcult to convey the importance of keeping up with software updates. some companies prioritize security and deploy updates seamlessly behind the scenes, but unfortunately this is not always the case. a witness at a recent house subcommittee on energy cybersecurity hearing described some iot devices as having ﬁconsumergradeﬂ security, by which he meant poor security. ﬁthat™s not how it should be,ﬂ yodaiken said.asking consumers to keep up with security updates while also warning them of phishing and malware attacksšclearly both important factors for enhancing securityšcan sow confusion. some companies are not in frequent contact with their customers, and so a user might receive a message about an update from an unfamiliar source. how could we expect the user to evaluate and trust that message in order to determine which notications are valid and which could be dangerous? another problem is the ﬁupdate fatigueﬂ that can result when a user is constantly bombarded by update notications, leading them to take notications less seriously or avoid spending the time needed to install them and perhaps the need to reboot. the risk of dissuading users from installing updates rises when updates wind up changing device settings. ﬁyou like things the way they are, and the device seems to work anyway, so why would you do the update?ﬂ yodaiken summarized.in the discussion, eric grosse, an independent consultant, suggested that one opportunity for better educating consumers is for the ftc to counter common security myths or unhelpful advice that is often shared, such as ﬁnever click on a link in an email.ﬂ yodaiken agreed that dispelling myths could be a useful approach to complement consumer guidance. software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.62toward a new approachyodaiken described a competition the ftc is holding as part of its efforts to empower users to access needed updates and protect their security, the iot home inspector challenge. the competition is designed to spur the creation of a centralized tool for consumers that enables them to better understand the workingsšand vulnerabilitiesšof iot devices in their homes. the exact form such a tool would take is unknown, and the ftc is open to all ideas, but the crux is that the tool would free the consumer from complicated detective work and help people protect themselves against iotbased vulnerabilities and breaches. of course, to avoid creating ﬁa gift for hackers,ﬂ security is a foremost concern of the tool™s structure. ﬁwe don™t want to create a conduit or a list of all the devices you have with vulnerabilities,ﬂ yodaiken emphasized. there are many questions that such a tool would need to address, such as the following: what devices are in a home? what are their software components? what should be their software components (e.g., are they running the latest versions)?, and how are updates facilitated? the basic goal is to nd a way to empower consumers to identify the vulnerabilities they have and take the steps necessary to mitigate them. while the contest is focused on software updates to iot devices, she said, submissions may also address other security challenges, such as the use of default passwords, privacy issues, or updating of separate components. in the discussion, danzig asked about whether the underwriters laboratories (ul) project might offer another mechanism for this type of consumer empowerment. yodaiken replied that the ftc is aware of ul and its effort to review and rate consumer software products. that is promising for the future, yodaiken agreed, but the ftc is focused more on consumers who have already purchased devices and are struggling with them right now. software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.63discussion11 the workshop concluded with an overarching re˚ection on the workshop by deirdre mulligan, university of california, berkeley, followed by a short open discussion session. despite the clear need for an update infrastructure to support security throughout the software life cycle, the workshop underscored just how complex that proposition is, mulligan said. the presentations demonstrated a great deal of variation in the approaches being used as well as the perceptions of what™s possible, from both a technical and a managerial perspective. there also was a great deal of variation in how different people and organizations perceive what they do and do not have control over, as well as how the external landscape in˚uences their decisionmaking. mulligan re˚ected that she was surprised to learn how little overlap there seems to be in the types of software update challenges faced by different sectors. while some challenges are universal, the list of challenges seemed to grow longer and longer with each presentation. the workshop surfaced some important differences in terms of the technical factors and the business factors at play in various types of situations, she noted, highlighting, as an example, the differences between linux and microsoft in terms of how updates are created and deployed. while opensource development allows for a lot of innovation and iteration, staging and rolling out updates in a closed system, such as microsoft, has its own distinct advantages. also, working in a business environment that can be software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.64tightly controlled and producing singlepurpose products can also bring advantages, as exemplied by the experience of schweitzer engineering laboratories, inc. (sel). mulligan suggested that makers of other singlepurpose devices, such as perhaps those making medical devices, could learn from the sel approach. mulligan highlighted the idea that if actual software updates to a particular device aren™t feasible, then perhaps signatures, rewalls, patches, or other mechanisms that affect other parts of the system could be used to help limit attacks or the damage they can cause. alternatively, at the other end of the spectrum, if a device or software can™t be updated, it is useful to explore ways for it to be disabled or at least disconnected from the network to limit the damage of a potential breach while retaining the device™s core functionality. for example, a ﬁgatekeeperﬂ could contain vulnerable software and compel a user to patch it, giving people both an education and an incentive to attend to updates while adding a layer of protection. while ﬁcutting offﬂ a device could frustrate users, it might be necessary to craft a cybersecurity policy that denes the situations in which doing so is justied in order to protect the greater society as whole, mulligan suggested. the appropriate timeline for supporting a product once it is sold, an issue that arose on multiple occasions, is also an important factor to consider, mulligan re˚ected. she noted, for example, that it is useful to hear that microsoft generally supports updates for 10 years on its operating systems, and cisco supports updates for 5 years on its routers. it would be helpful to know how companies come to those decisions and how that could be applied in other markets, she suggested. while it™s not reasonable to expect everything to be maintained for 20 years, like sel™s products are, some kind of guidance or transparency around these support timelines for products could be very helpful for consumers, consumer advocates, and decision makers. mulligan also highlighted the discussion around software inventories and other technical solutions that would allow users to assess the state of their software stack and determine whether updates are needed, a vein that the national institute of standards and technology (nist) is supporting with its software identication (swid) project. this idea, she suggested, could be very helpful for both businesses and customers. in addition, another important factor that arose multiple times is that updates are often released in a way that can alert hackers to the vulnerabilities they are xing, underscoring the need to think about ways to mitigate that.if a device can™t be updated, explore ways to limit the damage of a potential breach while retaining core functionality. software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.65one aspect not covered very extensively in the workshop was the process by which companies discover software vulnerabilities and what in˚uences their update process. mulligan suggested this topic could perhaps be the basis for a future workshop. other important related issues that were only touched on brie˚y but that could warrant further discussion include privacy implications, future business models, new software trends such as ephemeral code, and the need for a mechanism to involve the public in advancing conversations about what the appropriate limits to monitoring might be, mulligan concluded. launching the discussion session, butler lampson, microsoft corporation, suggested that the workshop focused too much on how software operated in the past, when it was downloaded and expected to perform one function. today, he said, software is embedded into complex, cloudbased systems that run across multiple devices. ﬁi think most of what was said at the very least would need to be rethought in a fairly serious way in order to meet this new reality,ﬂ he said. while he acknowledged that in the future, many devices will indeed operate on the model described in today™s presentations, ﬁthey™re just going to be an increasingly small fraction of everything that™s going on,ﬂ he emphasized.bob blakley, citigroup, said he was struck by the lack of a ﬁbaseline threat modelﬂ on the part of manufacturers and consumers alike. if such a model existed, he suggested, ﬁit might be more obvious why [software] should be designed properly for updates, and it also might be more obvious why you want to update them.ﬂ for example, it™s not obvious to a consumer why a networkconnected light bulb might need a software update, but there are nonetheless potential threats. for example, a hacker could gain control of an individual light bulb and program it to ˚ash in such a way to induce seizures. or, large number of light bulbs could be controlled and used to originate a distributed denialofservice (ddos) attack. ﬁbut,ﬂ he cautioned, ﬁin the absence of at least some notion of what each of these devices do, it™s hard [for consumers] to become psychologically fond of the idea that updating them is important.ﬂsoftware update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.66 afterworddiscussions at this workshop and among forum on cyber resilience members during its planning and after the workshop make clear that software update is more complicated than it seems at rst glance. this afterword is offered to distill and share some of the insights shared during those discussions. software update raises different sets of concerns, depending on who needs to address it. in particular, policymakers face different sorts of questions than engineering managers. below are checklists of concerns that might arise for the two groups, based on points raised during the workshop. additional detail can be found in the previous chapters.first is the question of market mechanisms. this topic was not discussed at length during the workshop, but it merits careful consideration. developers and engineers ought to plan for supporting updates to artifacts they create and respond to software update for building blocks they incorporate, because situations change and customers and/or their data may be put at risk. questions enterprise purchasers could raise as they negotiate with vendors, especially with regard to internet of things (iot) devices include the following: how would i know this device has failed or been compromised? what is the surprising worst that can happen if this device is successfully attacked? can i afford to replace this device every few years?software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.67 if not, what penalties ensure continued support? is there escrow to a ﬁsoftware orphanageﬂ in case support is abandoned, as discussed in chapter 4? this device is just one piece of a network of many connected systems; how do i avoid endless nger pointing if it fails? can i buy insurance, and what sorts of failures or breaches would it cover?the rise of externalities from software that is not readily updateable, such as seems plausible now that iot devices are surreptitiously used in denial of service attacks, makes software update not just something to leave to the market, but a public policy issue. the security of iot is a public good.1 what options are there to disincentivize lax maintenance by vendors, developers, and purchasers that could equitably reduce harm to innocent third parties? below is a partial list of policy options that could lead to improvements: a vendor could clearly state how many years of security support come after the last sale, ensure that there is a viable economic model behind those promises, and ensure the appropriate entity is balancing risks of enabling software update versus not. vendors could make clear to customers what, if any, updates are mandated.  information about installed software could help a purchaser or user have more information for assessing risk (e.g., scanning one™s own systems for instances of vulnerable libraries). software identication (swid) tags are one proposed approach for providing such information. the privacy implications of the update channel should be considered along with the security implications. recognize what is reasonable to expect of a small startup company and avoid blanket requirements. for instance, one could set a minimum number of devices or revenue before certain requirements or regulations become applicable. a wellmanaged cloud commonly makes updates easier because such an installation would likely have a large professional security staff, uniform hardware, and software control procedures already in place. the iot and cyberphysical systems can lack these properties, and thus cannot take advantage of the security benets that a wellmanaged cloud environment provides.in addition to policy and regulatory challenges, there are numerous technical issues that engineering managers and developers need to consider with regard to software 1d. mulligan and f. schneider, 2011, doctrine for cybersecurity, dædalus, the journal of the american academy of arts and sciences 140(4).software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.68update. this list is intended to serve only as a starting point for those grappling with how best to implement and deploy software update capabilities. software update is more complicated than it might seem at rst. managing it appropriately during the development process and life cycle of the device or system will take resources, so it will need a budget early.  updates should almost always be safe or trust could be destroyed, making user acceptance much harder to obtain. secure development life cycle, test via tooling, daily builds, and employee use all help to improve safety. however, managing update dissemination is much more difcult if the customer or end user can pick and choose which updates to deploy. synchronized global update is a best practice that helps keep the vulnerabilities, which are inevitably disclosed by updates, from becoming live exploits used against users who have not yet received the update. signicant bandwidth would be needed in most cases. the client update software ﬁagentﬂ that accepts and performs the update needs to be exceptionally robust and metaphorically paranoid. ideally it would be linked to the boot process so an adversary cannot bypass updates undetected by just writing over disk image. the update agent best practices include the following:ł ensure that a power failure or other interruption of the updating process does not brick the device or system.ł design with the understanding that there are often only minutes, or even seconds, from initial network connection of a device to the rst probing attacks.ł design to expect advanced attackers, and do not assume a rewall will provide sufcient protection. consider designing a failsafe mode for the productšfor example, a mode that disables all communications except for update or perhaps is triggered automatically (after a warning period) if the product has not been updated. observe trial users managing the updates, and design the process in ways that would make their lives easier, including the following:ł involve the product marketing team in persuading customers to accept updates and ensure that the process to accept updates is straightforward.software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.69ł consider that bad actors will mimic your update screens to trick users into installing malware; ideally avoid the need to ﬁpopupﬂ any screen at all, and instead rely on signed automatic updates.ł schedule updates to happen at convenient times.ł maintain user conguration choices and make intelligent extensions and do what you can to prevent updates from resulting in loss of user dataš something that occurs occasionally today and motivates end users to disable automatic updates. be sure that your own systems are getting updates from all your own suppliers, including open source. avoid suppliers whose devices have proprietary drivers for which only limited or no future support is provided. updates themselves need to be done in a trustworthy manner. the best technical practices at the moment include the following: ł test thoroughly but swiftly, accept feedback, and do postmortems after deployment;ł provide quickrollback mechanisms to mitigate the impact of failed updates;ł protect against subversion of the update channel;ł avoid using ﬁsecurity updateﬂ to advance other business interests; and  ł carefully consider whether to separate security updates from feature updates. such separation can be helpful to enterprise and other large users who are cautious about system reliability and perceive a need to verify that security updates will not have unexpected impacts; however, some suppliers, notably the linux kernel, do not distinguish. very large proprietary rmware (such as the unied extensible firmware interface) is often problematic, even with support, because of the large attack surface unmitigated by compartmentalization. updates (and all boottime executables) need to be digitally signed.2 as demonstrated by stuxnet and other malware, those signing keys are highvalue targets and deserve extraordinary protective measures. it will also be important 2see the forum on cyber resilience™s recent exploration of cryptographic agility and interoperability challenges in national academies of sciences, engineering, and medicine, 2017, cryptographic agility and interoperability: proceedings of a workshop, the national academies press, washington, d.c., https://doi.org/10.17226/24636. software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.70to ensure rollback protection against active attackers, as discussed in chapter 7. design veriably identical updates made to everyone to prevent targeted malware distribution.we offer these thoughts as an additional personal perspective inspired by conversations with workshop participants and forum members. our thanks to them for their insightful discussions and comments on this important topic.  eric grosse, member, forum on cyber resilience  fred b. schneider, chair, forum on cyber resiliencesoftware update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.71appendixes software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.73workshop agenda and participants listaworkshop on software updatefebruary 6, 2017keck center of the national academies of sciences, engineering, and medicinewashington, d.c. agenda11:00 a.m. welcome and overview fred b. schneider, forum chair11:05 deirdre mulligan, university of california, berkeley11:35 kevin fu, university of michigan and virta labs12:05 p.m. working lunch 12:45 carlos picoto, microsoft corporation1:15 nicko van someren, linux foundation1:45 break2:00 ed paradise, cisco systems, inc.2:30 dave whitehead and edward schweitzer,  schweitzer engineering laboratories3:00 break3:15 will drewry, google, inc.3:45 john vangelov, ford motor company4:15 break4:30 paul e. black and lee badger,  national institute of standards and technology5:00 ruth yodaiken, federal trade commission5:15 wrapup discussion and q&a moderator: deirdre mulligansoftware update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.74participants listlee badger, national institute of standards and technologynat beuse, national highway trafc safety administrationpaul e. black, national institute of standards and technologybob blakley, citigroup, inc. arthur carter, national highway trafc safety administrationfred cate, indiana universitydavid clark, massachusetts institute of technology richard j. danzing, center for a new american security donna dodson, national institute of standards and technologywill drewry, google, inc. kevin fu, university of michigan and virta labseric grosse, independent consultant cem hatipoglue, national highway trafc safety administrationrobert heilman, department of transportation/national highway trafc safety administrationdavid hoffman, intel corporation nicole hughes, department of defense paul kocher, cryptography research, inc. tadyoshi kohno, university of washington jim kurose, national science foundation butler lampson, microsoft corporation susan landau, worcester polytechnic institute steve lipner, independent consultant brad martin, national security agency deirdre mulligan, university of california, berkeleyedward paradise, cisco systems, inc. carlos picoto, microsoft corporationtony sager, center for internet security fred schneider, cornell university edmund schweitzer, schweitzer engineering peter swire, georgia institute of technology nicko van someren, linux foundation frank taylor, department of defense john vangelov, ford motor company kelly vangelov, ford motor company eric wenger, cisco systems, inc.david whitehead, schweitzer engineering ruth yodaiken, federal trade commission mary ellen zurko, independent cybersecurity consultantsoftware update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.75bsteering committee biographiesbfred b. schneider is the samuel b. eckert professor of computer science at cornell university and chair of the department. he joined cornell™s faculty in fall 1978, having completed a ph.d. at stony brook university and a b.s. in engineering at cornell in 1975. schneider™s research has always concerned various aspects of trustworthy systems šsystems that will perform as expected, despite failures and attacks. most recently, his interests have focused on system security. his work characterizing what policies can be enforced with various classes of defenses is widely cited, and it is seen as advancing the nascent science base for security. he is also engaged in research concerning legal and economic measures for improving system trustworthiness. schneider was elected a fellow of the american association for the advancement of science (aaas, 1992), the association of computing machinery (acm, 1995), and the institute of electrical and electronics engineers (ieee, 2008). he was named professoratlarge at the university of tromso (norway) in 1996 and was awarded a doctor of science honoris causa by the university of newcastleupontyne in 2003 for his work in computer dependability and security. he received the 2012 ieee emanuel r. piore award for ﬁcontributions to trustworthy computing through novel approaches to security, faulttolerance, and formal methods for concurrent and distributed systems.ﬂ the national academy of engineering (nae) elected schneider to membership in 2011, and the norges tekniske vitenskapsakademi (norwegian academy of technological sciences) named him a foreign member in 2010. he is currently a member of the naval studies board and the computer science and telecommunications board of the national academies of sciences, engineering, and medicine, and is founding chair of the national academies™ forum on cyber resilience.anita l. allen is the henry r. silverman professor of law and professor of philosophy at the university of pennsylvania law school, where she is also the university™s vice provost for faculty. she is an expert on privacy law, bioethics, and contemporary values, and is recognized for her scholarship about legal philosophy, women™s rights, and race relations. in 2010 she was appointed by president obama to the presidential commission for the study of bioethical issues. her books include unpopular privacy: what must we hide (2011); privacy law and society (2011); the new ethics: a guided tour of the 21st century moral landscape (2004); why privacy isn™t everything: feminist reections on software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.76personal accountability (2003); and uneasy access: privacy for women in a free society (1988). she coedited (with milton regan) debating democracy™s discontent (1998). allen, who has written more than a 100 scholarly articles, has also contributed to popular magazines and blogs and has frequently appeared on nationally broadcast television and radio programs. she has served on numerous editorial and advisory boards and on the boards of a number of local and national nonprots and professional associations, including the hastings center, the electronic information privacy center, and the bazelon center for mental health law. eric grosse is a senior member of the google security team and was previously vice president, security & privacy engineering, at google in mountain view, california, leading a team of 512 who ensure systems and data stay safe and users™ privacy remains secure. improved and wider use of ssl, stronger consumer authentication technology, detection and blocking of espionage, transparency on legal requests for data, sophisticated malware analysis, tools and frameworks for safer building of web applications are among the achievements of the google security team. before google, grosse was a research director and fellow at lucent bell labs where he worked on security, networking, algorithms for approximation and visualization, software distribution, and scientic computing. he has a ph.d. in computer science from stanford university.butler w. lampson is a technical fellow at microsoft corporation and an adjunct professor at the massachusetts institute of technology (mit). he has worked on computer architecture, local area networks, raster printers, page description languages, operating systems, remote procedure call, programming languages and their semantics, programming in the large, faulttolerant computing, transaction processing, computer security, wysiwyg editors, and tablet computers. he was one of the designers of the sds 940 timesharing system, the alto personal distributed computing system, the xerox 9700 laser printer, twophase commit protocols, the autonet lan, the spki system for network security, the microsoft tablet pc software, the microsoft palladium highassurance stack, and several programming languages. he received the acm software systems award in 1984 for his work on the alto, the ieee computer pioneer award in 1996, the von neumann medal in 2001, the turing award in 1992, and the nae™s draper prize in 2004. he is a member of the national academy of sciences and the nae and a fellow of the acm and the american academy of arts and sciences.susan landau is a professor of cybersecurity policy in the department of social science and policy studies at worcester polytechnic institute. landau has been a senior software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.77staff privacy analyst at google, a distinguished engineer at sun microsystems, a faculty member at the university of massachusetts, amherst, and at wesleyan university. she has held visiting positions at harvard, cornell, yale, and the mathematical sciences research institute. landau is the author of surveillance or security? the risks posed by new wiretapping technologies (2011) and coauthor, with whiteld dife, of privacy on the line: the politics of wiretapping and encryption (1998, rev. ed. 2007). she has written numerous computer science and public policy papers and opeds on cybersecurity and encryption policy and testied to congress on the security risks of wiretapping and on cybersecurity activities at national institute of standards and technology™s information technology laboratory. landau currently serves on the computer science telecommunications board of the national academies. a 2012 guggenheim fellow, landau was a 2010œ2011 fellow at the radcliffe institute for advanced study, the recipient of the 2008 women of vision social impact award, and a fellow of the aaas and the acm. she received her b.a. from princeton university, her m.s. from cornell university, and her ph.d. from mit.software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.78cspeaker biographieslee badger is a computer scientist at the national institute of standards and technology (nist) and manages the security components and mechanisms group in the computer security division of nist™s information technology laboratory. badger has more than 20 years of experience with computer security research, with a focus on operating systems and access control. prior to joining nist in 2008, badger served as a defense advanced research projects agency (darpa) program manager for 6 years, where he funded and managed a variety of programs focusing on selfregenerating systems, intrusion tolerance, selfdefending applications, software security analysis, and software producibility. prior to joining darpa, badger led development efforts culminating in implementations of domain and type enforcement (dte) for unix, a dteenforcing rewall, a generic software wrappers system for unix, and application of software wrappers for intrusion detection. he holds an m.s. in computer science from the university of maryland, college park, awarded in 1987.paul e. black is a computer scientist in the software quality group, systems and software division, information technology laboratory at nist. black has nearly 20 years of industrial experience in areas such as developing software for ic design and verication, assuring software quality, and managing business data processing. the website he began and edits at nist, the online dictionary of algorithms and data structures (http://www.nist.gov/dads), was accessed almost 20,000 times a day from all over the world. black began his ph.d. at university of california, berkeley, then transferred to brigham young university where he graduated in 1998. he has taught classes at brigham young university and johns hopkins university. black has published in the areas of static analysis, software testing, software conguration control, networks and queuing analysis, formal methods, software verication, quantum computing, and computer forensics. he has been awarded the department of commerce bronze medal for leadership in the development of software assurance test methods and reference data and the itl outstanding authorship award in recognition of his publication, ﬁquantum computer and communications.ﬂ he is a senior member of the institute of electrical and electronics engineers (ieee) and a member of ieee computer society and the association for computing machinery (acm). software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.79will drewry is a principal software engineer at google leading security efforts for chrome os and pixel. joining in 2003, his contributions have spanned initiatives ranging from largescale infrastructure assurance to dening and driving security and privacy for consumer products. starting in 2009, drewry built and led security and privacy engineering for chrome os ensuring a holistic and coherent product design. along the way, he designed and implemented key enabling technology  (dmverity, seccompbpf) now in use across the industry. drewry received his b.a. in computer science from boston university and holds more than 20 patents.kevin fu is an associate professor of computer science and engineering at the university of michigan, where he conducts research on computer security and health care as part of the national science foundation™s (nsf™s) trustworthy health and wellness (thaw.org) frontiers project. he also directs the archimedes center for medical device security, whose mission is to improve medical device security through research and education, and he cofounded virta labs, a healthcare cybersecurity company based in ann arbor, michigan. over the last decade, fu has given nearly 100 invited talks on medical device security to industry, government, and academiašincluding u.s. senate and u.s. house hearings, the institute of medicine, and national academy of engineering (nae) events. beginning with his 2006 security seminar at food and drug administration cdrh, fu™s medical device security efforts were recognized with a fed100 award, sloan research fellowship, nsf career award, the massachusetts institute of technology (mit) tr35 innovator of the year award, and best paper awards on medical device security by organizations such as ieee and acm. fu earned a ph.d., master™s degree, and bachelor™s degree from mit.ed paradise is the vice president of engineering for the security and trust organization. he is also the site executive for cisco™s research triangle park site. as vice president of engineering, paradise is responsible for the security and trustworthiness of cisco™s product portfolio. he leads the engineering team that focuses on developing trustworthy systems by developing new tools, processes, and technologies that further enhance the security of cisco product portfolios. paradise joined cisco in 1993. he has held various leadership positions in cisco™s engineering organization, including general manager of the mobile wireless group and general manager of the ip communication business unit. he also became the rtp site executive in 2002. in this role, he leads the secondlargest u.s. cisco site, also being the liaison between cisco and the local community, including local and state governments, and its philanthropic interests. paradise holds an m.s. in electrical engineering from syracuse university and a b.s. in electrical engineering from the university of hartford.software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.80carlos picoto is an engineering general manager at microsoft. he started his career with microsoft in 1997. he received his m.s. in computer science from the instituto superior técnico and his b.s. in computer science from the universidade de lisboa. edmund o. schweitzer iii is recognized as a pioneer in digital protection and holds the grade of fellow in the ieee, a title bestowed on less than 1 percent of ieee members. in 2002, he was elected as a member of the nae. schweitzer received the 2012 medal in power engineering, the highest award given by ieee, for his leadership in revolutionizing the performance of electrical power systems with computerbased protection and control equipment. schweitzer is the recipient of the regents™ distinguished alumnus award and graduate alumni achievement award from washington state university and the purdue university outstanding electrical and computer engineer award. he has also been awarded honorary doctorates from both the universidad autónoma de nuevo león, in monterrey, mexico, and the universidad autónoma de san luis potosí, in san luis potosí, mexico, for his contributions to the development of electric power systems worldwide. he has written dozens of technical papers in the areas of digital relay design and reliability and holds nearly 180 patents worldwide pertaining to electric power system protection, metering, monitoring, and control. schweitzer received his bachelor™s and master™s degrees in electrical engineering from purdue university and his doctorate from washington state university. he served on the electrical engineering faculties of ohio university and washington state university, and in 1982, he founded schweitzer engineering laboratories, inc. (sel), to develop and manufacture digital protective relays and related products and services. john vangelov is the embedded modem features manager at ford motor company. he began his career at ford in 2002, previously holding positions at siemens, lear corporation, and airtouch cellular. vangelov™s experience includes leading the production delivery of vehicle ecu software; the development of embedded operating systems, diagnostic kernels, and software bootloaders; vehicle electrical system and architecture design; rf engineering; and the development and delivery of cloudbased services for software update and consumer features for connected vehicles. he has 16 patents issued or in process in the domain of software updates. he received his m.s. in software engineering from the university of michigan and his b.s. in electrical engineering from lawrence technological university.nicko van someren is the linux foundation™s chief technology ofcer (cto), focused on the core infrastructure initiative and other securityfocused efforts at the organization. software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.81he has extensive experience across the security and networking industries. most recently, he was the cto of good technology, and prior to this he served as chief security architect at juniper networks, where he was responsible for the company™s network security products. before joining juniper, he was founder and cto of the security technology company ncipher plc. van someren holds a doctorate and rstclass degree in computer science from cambridge university in the united kingdom. he is a fellow of both the royal academy of engineering and the british computer society.david e. whitehead, p.e., is the vice president of research and development at sel. he also oversees the company™s government services division and serves on the board of directors. after joining sel in 1994, whitehead worked as a hardware engineer, research engineer, and chief engineer of the government services division before taking on the leadership of sel r&d in 2006. whitehead has been a passionate driver of product and talent development at sel, and has had a hand in the steady stream of inventions and innovations to come out of u.s. basedtechnology company. he currently holds 55 patents worldwide. whitehead is a leader in utility and industrial control system cybersecurity. he has presented at conferences, testied before ferc, chairs the ieee power and energy society substations c6 group that addresses serial cryptographic protocols, and has authored numerous papers on the topic. whitehead received his b.s.e.e. from washington state university in 1989 and his msee from rensselaer polytechnic institute in 1994. he is a registered professional engineer in michigan, new york, north carolina, and washington. ruth yodaiken is a data protection attorney in the division of privacy and identity protection at the federal trade commission. her work revolves around how entities comply with existing laws and protect information about individuals from misuse. software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.software update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.the national academies press 500 fifth street, nw washington, dc 20001this project was supported by the national science foundation under award number cns14194917 and the national institute of standards and technology under award number 60nanb16d311. any opinions, ndings, conclusions, or recommendations expressed in this publication do not necessarily re˚ect the views of any organization or agency that provided support for this project.international standard book number13: 9780309462884international standard book number10: 0309462886digital object identier: https://doi.org/10.17226/24833additional copies of this publication are available for sale from the national academies press, 500 fifth street, nw, keck 360, washington, dc 20001; (800) 6246242 or (202) 3343313; http://www.nap.edu.copyright 2017 by the national academy of sciences. all rights reserved.printed in the united states of americasuggested citation: national academies of sciences, engineering, and medicine. 2017. software update as a mechanism for resilience and security: proceedings of a workshop. forum on cyber resilience workshop series. washington, dc: the national academies press. doi: https://doi.org/10.17226/24833.consensus study reports published by the national academies of sciences, engineering, and medicine document the evidencebased consensus on the study™s statement of task by an authoring committee of experts. reports typically include ndings, conclusions, and recommendations based on information gathered by the committee and the committee™s deliberations. each report has been subjected to a rigorous and independent peerreview process and it represents the position of the national academies on the statement of task.proceedings published by the national academies of sciences, engineering, and medicine chronicle the presentations and discussions at a workshop, symposium, or other event convened by the national academies. the statements and opinions contained in proceedings are those of the participants and are not endorsed by other participants, the planning committee, or the national academies.for information about other products and activities of the national academies, please visit www.nationalacademies.org/about/whatwedo.other recent reports of the computer science and  telecommunications boardcryptographic agility and interoperability: proceedings of a workshop (2017)foundational cybersecurity research: improving science, engineering, and institutions (2017)information technology and the u.s. workforce: where are we and where do we go from here? (2017)a 21st century cyberphysical systems education (2016)continuing innovation in information technology: workshop report (2016)data breach aftermath and recovery for individuals and institutions: proceedings of a workshop (2016)exploring encryption and potential mechanisms for authorized government access to plaintext: proceedings of a workshop (2016)future directions for nsf advanced computing infrastructure to support u.s. science and engineering in 20172020 (2016)privacy research and best practices: summary of a workshop for the intelligence community (2016)bulk collection of signals intelligence: technical options (2015)cybersecurity dilemmas: technology, policy, and incentives: summary of discussions at the 2014 raymond and beverly sackler u.s.u.k. scientic forum (2015)interim report on 21st century cyberphysical systems education (2015)a review of the next generation air transportation system: implications and importance of system architecture (2015)telecommunications research and engineering at the communications technology laboratory of the department of commerce: meeting the nation™s telecommunications needs (2015)telecommunications research and engineering at the institute for telecommunication sciences of the department of commerce: meeting the nation™s telecommunications needs (2015)at the nexus of cybersecurity and public policy: some basic concepts and issues (2014)future directions for nsf advanced computing infrastructure to support u.s. science and engineering in 20172020: an interim report (2014)geotargeted alerts and warnings: report of a workshop on current knowledge and research gaps (2013)professionalizing the nation™s cybersecurity workforce? criteria for future decisionmaking (2013)public response to alerts and warnings using social media: summary of a workshop on current knowledge and research gaps (2013)computing research for sustainability (2012)continuing innovation in information technology (2012)the safety challenge and promise of automotive electronics: insights from unintended acceleration (2012, with the board on energy and environmental systems and the transportation research board)limited copies of cstb reports are available free of charge from:computer science and telecommunications boardkeck center of the national academies of sciences, engineering, and medicine500 fifth street, nw, washington, dc 20001(202) 3342605/cstb@nas.eduwww.cstb.org r03217 software security cover final.indd 469/6/17 12:10 pmsoftware update as a mechanism for resilience and security: proceedings of a workshopcopyright national academy of sciences. all rights reserved.annespine = .198"software update as a mechanism for  resilience and security resilienceworkshop seriesforum onproceedings of a workshopforum on cyber resilience workshop seriessoftware update as a mechanism for resilience and security cyber r03217 software security cover final.indd 139/6/17 12:10 pm
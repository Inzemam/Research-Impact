detailsdistribution, posting, or copying of this pdf is strictly prohibited without written permission of the national academies press. (request permission) unless otherwise indicated, all materials in this pdf are copyrighted by the national academy of sciences.copyright © national academy of sciences. all rights reserved.the national academies pressvisit the national academies press at nap.edu and login or register to get:œ œ 10% off the price of print titlesœ special offers and discountsget this bookfind related titlesthis pdf is available at sharecontributorshttp://nap.edu/12172preliminary observations on dod software research needs andpriorities: a letter report32 pages | 8.5 x 11 | paperbackisbn 9780309118767 | doi 10.17226/12172committee on advancing softwareintensive systems producibility; computerscience and telecommunications board; division on engineering and physicalsciences; national research councilpreliminary observations on dod software research needs and priorities: a letter reportcopyright national academy of sciences. all rights reserved.preliminaryobservationsondodsoftwareresearchneedsandpriorities a letter report      committee on advancing softwareintensive systems producibility   computer science and telecommunications board division on engineering and physical sciences preliminary observations on dod software research needs and priorities: a letter reportcopyright national academy of sciences. all rights reserved.preliminary observations on dod software research needs and priorities: a letter reportcopyright national academy of sciences. all rights reserved.iiicomputer science and telecommunications board500 fifth street, nw washington, dc 20001 phone: 202 334 2605 fax: 202 334 2318 email: cstb@nas.edu www.cstb.org dr. andre m. van tilborg deputy under secretary of defense for  science and technology 3030 defense pentagon room 3c913a washington, dc 203013030dear dr. van tilborg: the committee on advancing softwareintensive systems producibility is pleased to transmit its preliminary observations on department of defense (dod) needs and priorities for software research, as well as its suggestions for a research agenda that would be executable within dod™s science and technology framework. this committee was appointed by the national research council (nrc) and convened under the auspices of the nrc™s computer science and telecommunications board. preliminary observations on dod software research needs and priorities: a letter report contains only the early and interim conclusions of the committee. these observations and other issues relating to the advancement of softwareintensive systems producibility will be considered more comprehensively in the committee™s final report.a short summary presents the committee™s main points. the first section of this letter report examines the significance of software to the defense mission. it is followed by an exploration of the role of industry and universities in software innovation, along with dod involvement in software advancement. the report then provides some preliminary conclusions on the research challenge posed by softwareintensive systems producibility. respectfully submitted, william scherlis, chaircommittee on advancing softwareintensive systems producibility preliminary observations on dod software research needs and priorities: a letter reportcopyright national academy of sciences. all rights reserved.preliminary observations on dod software research needs and priorities: a letter reportcopyright national academy of sciences. all rights reserved.summarythe committee on advancing softwareintensive systems producibility was appointed by the national research council (nrc) and convened under the auspices of the nrc™s computer science and telecommunications board (cstb) to assess the nature of the national investment in software research and, in particular, to consider ways to revitalize the knowledge and human resource base needed to design, produce, and employ softwareintensive systems for tomorrow™s defense needs. this letter report responds to a request from the department of defense (dod) for preliminary feedback from the committee regarding its observations on dod needs and priorities for software research as well as suggestions for a research agenda that would be executable within the dod™s science and technology framework. in its response, the committee on advancing softwareintensive systems producibility focuses on three specific questions: first, to what extent is software capability significant for dod, and is it becoming more significant or less so? second, will the advances in software producibility needed by dod emerge unaided from the defense industrial base at a pace sufficient to meet evolving defense requirements? third, in which technology areas should dod invest in research to advance defense software producibility? in response to the first question, software has become essential to all aspects of military system capabilities and operations. manifesting military system capability in software offers formidable advantages such as enormous functional agility, unique scalability in capabilities and interoperation, and, of course, nearzero replication costs. software producibility is an increasingly significant determinant of overall system capability. although software is similar to other engineering disciplines in the need for project leaders to address tradeoffs between risk and value, it is unique in that such tradeoffs must be made in the context of the astonishingly rapid growth both in software technology capability and in the underlying hardware, networks, and storage systems. additionally, it must do so in an environment where expectations about value (as manifest in systems capability, flexibility, and interoperability, for example) are also growing rapidly. given software™s importance to dod and the ongoing rapid advances in software capability worldwide, it is vital to ensure that the department can meet its software needs now and well into the future. a key question is, to what extent can dod rely on industryšspecifically the domestic defense industrial basešto innovate at a rate fast enough to allow it to fully meet future defense software requirements? that is, without explicit r&d stimulus from the dod, will industry produce software innovations in areas of interest to dod at the rate they are needed to keep up with dod software requirements and enable the dod to stay ahead of potential adversaries? the committee™s answer to this question is no: dod™s needs will not be sufficiently met through a combination of demand pull from the military and technology push from rapid innovation in the commercial sector. defense has leading demand in certain critical areas: in these areas, which include architectural innovation, software assurance, and requirements management, defense needs are more demanding than the corresponding needs in commercial markets. moreover, even where industry is highly innovative, firms may not have sufficient incentives to produce the kinds of technology and supporting tools necessary for others to take advantage of those software innovations. the committee sees a crucial role for the government in accelerating innovation in the core technologies related to software producibility. the academic research community has traditionally worked on the core technical problems surrounding software producibility. the overall directions and priorities for sponsored research that leads to universityoriginated invention, however, are greatly influenced by funding levels and agency priorities. for example, darpa™s deliberately strong relationship with the it research community, which began in the 1960s and endured for nearly 40 years, has had a profound influence on it research priorities, the overall culture of computer science research, and the massive economic and national 1preliminary observations on dod software research needs and priorities: a letter reportcopyright national academy of sciences. all rights reserved.outcomes. informal reports indicate that when dod shifted funding away from university it r&d, researchers in many areas key to dod™s software future scaled back their research teams and redirected their focus to other fields that were less significant to dod in the long term. the impact of r&d cutbacks generally (excluding healthrelated r&d) has been noted by the top officers of major it firms that depend on a flow of innovation and talent.this letter report summarizes three technology areas where dod has ﬁleading demand.ﬂ in these areas, dod™s requirements are more sophisticated and cuttingedge than those in the rest of the marketplace. technological advancement would significantly benefit dod™s ability to produce the software it needs, providing a clear rationale for dod investment in the needed research. one area where the committee believes that new research would benefit dod is the management of engineering risk in unprecedented large and ultrascale systems. such systems have engineering risks associated with early design commitments related to system functionality, nonfunctional attributes, and architecture. the research would focus on ways to mitigate these engineering risks at early stages of the process through new approaches to early validation, modeling, and architectural analysis. the second area where dod has leading demand and could benefit from technological advancement is software quality assurance for defense systems. software assurance encompasses reliability, security, robustness, safety, and other qualityrelated attributes. defense systems often include commercial offtheshelf components and may involve global developmentšglobal sourcing is a reality for major commercial software products and, additionally, for commercial custom software and service provisioning. the needed research would focus on new ways for producers and consumers to create (and validate) a body of technical evidence to support specific claims in support of an overall judgment of fitness.the third area, which is just as important as the first two, is the reduction of requirementsrelated risk in unprecedented systems without too great a sacrifice in systems capability. the challenge in this area has two parts. first, how can consequences of early commitments related to functional or nonfunctional requirements be understood at the earliest possible time during development? and, second, how can we make ﬁrequirementsﬂ more flexible over a greater portion of the system life cycle? the committee believes that the most useful research for dod would look at ways to achieve early validationšfor example, through modeling, protoptying, and simulationšand also look at how iterative development cycles can be supported more effectively and, from the standpoint of risk in program management, more safely. these and other areas will be elaborated in greater technical depth in the committee™s final report, which will answer in more detail the questions of where management attention and research activity should be focused. 2preliminary observations on dod software research needs and priorities: a letter reportcopyright national academy of sciences. all rights reserved.preliminary observations on dod software research needs and priorities the committee on advancing softwareintensive systems producibility (appendix a) was appointed by the national research council (nrc) and convened under the auspices of the nrc™s computer science and telecommunications board (cstb) to assess the nature of the national investment in software research and, in particular, to consider ways to revitalize the knowledge and human resource base needed to design, produce, and employ softwareintensive systems for tomorrow™s defense needs.1the statement of task for the study is as follows: this study will bring together academic and industry software systems researchers, software and software tool vendors (suppliers), and systems integrators who comprise the community of skills required for future successes in complex software intensive systems required by the dod. they will (1) assess the emerging situation with respect to the national investment in relevant software research, the present state of and future requirements for tools for software production, testing and maintenance, and the adequacy of human resources; (2) examine the needs, relationships and interdependencies expected of future dod software research, development and maintenance needs, and consider what advances are needed for continuous improvements in the design, production and evolution of dod software intensive systems; (3) make recommendations to responsible agency, executive branch and legislative officials, and to the software technical community, about how to improve the present state of affairs and achieve future goals. on november 16, 2007, following informal discussions with the sponsor, the national research council received a written request from the sponsor, the department of defense (dod), for a short letter report in the spring 2008 time frame. this request, which was within the scope of the original charge to the committee, sought preliminary feedback from the committee regarding its observations on dod needs and priorities for software research as well as research agenda suggestions that would be executable within the dod™s science and technology framework. in this letter report, the committee on advancing softwareintensive systems producibility focuses on three specific questions: first, to what extent is software capability important for dod? second, will the advances in software producibility needed by dod emerge unaided from the defense industrial base (which includes both civilian and defense producers) at a pace sufficient to meet evolving defense requirements? third, in which technologies should dod invest in research to advance software producibility? a more comprehensive consideration of these and other questions relating to the advancement of softwareintensive systems producibility will be provided in the committee™s final report. the additional questions that will be addressed in the committee™s final report include these: what actions can dod take to accelerate the pace of innovation in software producibility, where such acceleration is necessary to meet dod™s particular needs? what are the most pressing research challenges that must be faced to enable dod to meet its evolving needs? another important consideration, related to the second question above, merits mention here, to spotlight its importance: what would be some potential consequences for dod if the leadership in innovation for development of custom software were to move offshore?  1support for this project was provided by the office of the secretary of defense, department of defense with assistance from the national science foundation under sponsor award number cns0541636 and by the office of naval research under sponsor award number n000140410736. 3preliminary observations on dod software research needs and priorities: a letter reportcopyright national academy of sciences. all rights reserved.this letter report builds on the discussion of technical and organizational issues captured in the committee™s report summary of a workshop on software intensive systems and uncertainty at scale.2this report also builds on additional briefings received by the committee. appendix b contains the names of all these briefers. the next section examines the significance of software in defense. the section after that explores the role of industry and universities in software innovation, along with dod involvement in software advancement. the letter report finishes with some preliminary conclusions on the research challenge for softwareintensive systems producibility. thesignificantroleofsoftwareindefense the pivotal role of software in defense has been noted in multiple studies. software is a key enabler of netcentricity and of integrated systems of systems (ﬁultrascale systemsﬂ). the ability to achieve these integrations and to maintain agility as these configurations of interconnected systems evolve is determined by the ability of the dod to produce and evolve software. a software capability is thus a unique source of strategic and military advantage, and software producibility is a key component of military strength and capability. the defense science board™s (dsb™s) task force on mission impact of foreign influence on dod software, which explored the essential role of software in defense, released its report in september 2007.3 the report notes that ﬁeach year the department of defense depends more on software for its administration and for the planning and execution of its missions. this growing dependency is a source of weakness exacerbated by the mounting size, complexity, and interconnectedness of its software programsﬂ4 and ﬁin the department of defense, the transformational effects of information technology (it), joined with a culture of information sharing, called netcentricity, constitute a powerful force multiplier. dod has become increasingly dependent for missioncritical functionality upon highly interconnected, globally sourced, it of dramatically varying quality, reliability and trustworthiness.ﬂ5 manifesting system capability in software presents a classic tradeoff between risk and value. the research challenge, in short, is to mitigate engineering risk while enhancing value to the mission. the most obvious risks relate to unprecedented requirements and the need for innovative system architectures. the value is in the extent of systems capability embodied in software, the enablement of interoperation, and, perhaps most significantly in view of today™s environment of asymmetric, agile warfare, the ease and flexibility of adaptation. also, as scale and interconnection grow, a third dimension becomes increasingly important, which is the ability of a system to continuously evolve and interconnect with other evolving systems. as the role of software becomes more important, it becomes more urgentšindeed more strategicšto vigorously address this challenge. the rapid growth of software in defense systems parallels the growing role of software in other domains and is a natural outcome of the special engineering characteristics of software. software is uniquely unbounded and flexible, having relatively few limits on the degree to which it can be scaled in complexity and capability. software™s ability to be remotely and electronically upgraded adds even more value with respect to dod™s need to rapidly adapt to changes in adversary threats, mission priorities, technology, and the environment. the overall number of lines of dod code in service has been increasing by more than an order of magnitude every decade; similar growth has been exhibited in  2nrc (national research council),summary of a workshop on software intensive systems and uncertainty at scale,thenational academies press, washington, d.c., 2007.3dsb (defense science board), report of the defense science board task force on mission impact of foreign influence on dod software, office of the under secretary of defense for acquisition, technology, and logistics, washington, d.c., september 2007.4ibid., p. v. 5ibid., p. vii.4preliminary observations on dod software research needs and priorities: a letter reportcopyright national academy of sciences. all rights reserved.individual, longlived military systems.6 in addition to this growth in size (as well as growth in other system aspects such as resource usage), overall system capabilities and complexities are increasing. a key attribute of software in any domain is that its potential capability is less constrained by the laws of physics and more by the ability of the human intellect to develop conceptual and engineering tools to gain insight into, master, and provide assurance of greater levels of complexity. the value that software contributes to major systems is increasing rapidly and becoming more fundamental to system capability. the dsb task force report on defense software (2000)7 illustrates this in the case of combat aircraft. the percentage of system functions performed by software rises from 8 percent of the f4 in 1960, to 45 percent of the f16 in 1982, to 80 percent of the f22 in 2000.8software has become essential to all aspects of military system capabilities and operations, and softwarespecific investment is critical to them.9 macroeconomic data show analogous growth in the role software plays in the commercial world. this is significant because commercial vendors are key contributors to the defense software supply chainšfor future combat systems,10 for example, 27 million source lines of code (over 42 percent of the total delivered executable source lines of code) are commercial offtheshelf (cots) or open source.11 it is also significant because software capability has become a strategic source of market differentiation in many industries, from financial services and health care to telecommunications and entertainment. a 2002 report by the national research council™s board on science, technology, and economic policy noted that since 1995 the it and networking industries had accounted for 20 percent of the nation™s economic growth, even though they accounted for only 3 percent of gross domestic product.12 comparable figures exist in the european community.13this critical role of software in defense is also noted in the more recent dsb task force report on foreign software, which states, ﬁthe dod now relies upon networked, highlyinterconnected systems for many missioncritical capabilities, and this reliance is projected to increase. the software in these systems is the key ingredient that provides much of the increased capability delivered to the warfighter, just as it represents the key factor in increased productivity and new capabilities for industry today. for the dod, this advanced technology is a force multiplier.ﬂ14 given software™s importance to dod, a vital  6ibid., figure 5. an estimate of overall growth in dod software in terms comparable to those used for hardware is provided in barry boehm, ﬁmanaging software productivity and reuse,ﬂ ieee computer, september 1999: 111113; also available as cssetr2000508 at http://sunset.usc.edu/csse/techrpts/2000/2000main.html. accessed february 20, 2008. see figure 1 for growth of dod code in service. 7dsb,report of the defense science board task force on defense software, office of the under secretary of defense for acquisition and technology, washington, d.c., november 2000.8ibid., table 3.3a. available at http://www.acq.osd.mil/dsb/reports/defensesoftware.pdf. accessed february 25, 2008. 9boehm, kind, and turner quote an unidentified u.s. air force general, ﬁabout the only thing you can do with an f22 without software is take a picture of it.ﬂ barry boehm, richard turner, and peter kind, ﬁrisky business: seven myths about software engineering that impact defense acquisitions,ﬂ program manager, may 1, 2002. 10future combat systems (fcs) is ﬁthe army™s modernization program consisting of a family of manned and unmanned systems, connected by a common network, that enables the modular force, providing our soldiers and leaders with leadingedge technologies and capabilities allowing them to dominate in complex environments.ﬂ u.s. army, ﬁfuture combat systems.ﬂ available at http://www.army.mil/fcs/. accessed march 3, 2008. 11dsb,report of the defense science board task force on mission impact of foreign influence on dod software, op. cit., p. 77. 12nrc,measuring and sustaining the new economy: report of a workshop, the national academies press, 2002, p. 52. available at http://www.nap.edu/openbook.php?recordid=10282&page=52.accessed february 20, 2008. 13stephen mcgibbon, ﬁgrowth and jobs from the european software industry,ﬂ european review of political technologies, december 2005, viz., ﬁthe latest eu25 data show that the [ict] sector represents just over 5% of the eu gdp. but this 5% drives 25% of overall growth and about 40% of our increase in productivity, which is the fundamental source of new wealth in the economy.ﬂ 14dsb,report of the defense science board task force on mission impact of foreign influence on dod 5preliminary observations on dod software research needs and priorities: a letter reportcopyright national academy of sciences. all rights reserved.question is how the department can ensure that it will be able to meet its software needs now and into the future. the next section explores this issue. theroleofindustryanduniversitiesinsoftwareinnovationa key question regarding how dod can meet its ongoing software needs is to what extent it can rely on industry, and specifically the domestic defense industrial base, to fully address its requirements now and into the future. this question needs to be answered in the context of two significant shifts in the environment of technology innovation. the first is the growing globalization of the software industry, with rapid gains in capability in asia and russia as well as steady gains in europe.15 the second shift is the reduction in recent years of direct dod investment in advancing software capability in the defense industrial base and its supply chain.16these two shifts raise additional considerations. first, to what extent can the dod successfully address its mission assurance requirements17 given the increasing extent to which dod software will be developed in foreign countries? the cybersecurity dimensions of this question were taken up in the 2007 dsb task force report mission impact of foreign influence on dod software18 and are therefore not covered in this letter report.19the second consideration, which this letter report does address, is whether industry, without explicit r&d stimulus from the dod, will produce innovations in areas of interest to dod at the rate they are needed to meet the ongoing rapid growth20 in dod software requirements. the dsb task force findings regarding the shifting global center of gravity of software development are highly relevant to this question. dod has particular requirementsšfor example, in highperformance embedded systems, largescale systems with unprecedented architecture, highly interconnected systems, software assurance for critical systems, and the management of complex and evolving requirements. moreover, these dod requirements must be dealt with on systems that are both very large scale and have lifecritical mission requirements. it is tempting but overly optimistic to conclude that dod needs such as these will somehow be addressed in a sufficiently timely way through a combination of demand pull from the dod  software, op. cit., p. 12. 15for a general discussion of the increasing globalization of the software industry, see association for computing machinery job migration task force, globalization and offshoring of software, w. aspray, f. mayadas, and m. vardi, eds., association for computing machinery, washington, d.c., 2006, and nrc, assessing the impacts of changes in the information technology r&d ecosystem: retaining leadership in an increasingly global environment, forthcoming 2008. 16for example,the 2000 dsb task force report on defense software addressed the need to ﬁstrengthen and stabilize the technology baseﬂ in order to be able to leverage commercial technology and retain key researchers in dod research organizations. dsb, report of the defense science board task force on defense software, office of the under secretary of defense for acquisition and technology, washington, d.c., november 2000, pp. 3034. 17mission assurance includes test and evaluation related to a variety of issues such as cybersecurity, reliability, and other quality attributes. 18dsb,report of the defense science board task force on mission impact of foreign influence on dod software, op. cit. the full report is on the dsb web site at http://www.acq.osd.mil/dsb/reports/ 200709missionimpactofforeigninfluenceondodsoftware.pdf.  accessed february 21, 2008. 19the committee notes, however, that the dsb task force recommends that dod fund ﬁa comprehensive science and technology strategy and programs to advance the stateoftheart in vulnerability detection and mitigation. . . . this program should monitor what markets are delivering, identify gaps between what the market is delivering and what dod needs, and fill this gap.ﬂ the task force also recommends that the most critical software be developed by cleared united statesbased providers. 20here, ﬁgrowthﬂ is used to capture the increase in both number and complexity of requirements, as well as the increasing distinctiveness (compared to the commercial sector) of some dod requirements where dod leads demand. 6preliminary observations on dod software research needs and priorities: a letter reportcopyright national academy of sciences. all rights reserved.and technology push resulting from rapid innovation in the commercial sector. in many other industries, this may be a legitimate conclusion. in those industries, the best policy may be for dod to follow the market. however, this is not generally true for all software technology, where dod has leading demand in certain areas (see section ﬁthe need for dod involvement in software advancementﬂ). moreover, even where industry is highly innovative, it may not have sufficient incentives to produce the technology and supporting tools necessary for others to take advantage of those software innovations. this is a key element of the need for government to play a role in accelerating core technological innovation in software producibility, especially where dod requirements are more demanding than the corresponding requirements in commercial markets and where commercially driven advances therefore will not sufficešfrom the standpoint of either function or time to marketšfor dod™s purposes. in many of these areas, other countries are making concerted government investments in software technology development.21in response to dod™s request, this letter report focuses on priorities for software research. this section, ﬁthe role of industry and universities in software innovation,ﬂ describes the importance of the dod role in facilitating that research and eventual innovation, emphasizing four areas: (1) the diverse sourcing of the software components and technologies used in dod software; (2) the enabling technologies (including software architectures) that are critical to dod systems, and the importance of maintaining a national role in the definition of these technologies, (3) the role and effect of dod involvement in r&d aimed at the advancement of software producibility; and (4) the role of academic r&d in software innovation generally. dod supply chains and sourcing of software components and technologies the supply chain structure for modern defense software is significantly more complex, and international than it was even just a decade ago. this complexity is due to a combination of the powerful economic forces of globalization, a ubiquitous internet, the availability of a trained workforce, and great demand for repetitive projects and associated infrastructure.22 all of this is also coupled with the rapid maturation of key technological enablers, such as advanced networking, software architectures and frameworks, libraries, tools, programming and scripting languages,23 and team collaboration capability  21see, for example, nrc, funding a revolution: government support for computing research, national academy press, washington, d.c., 1999; nrc, innovation in information technology, the national academies press, washington, d.c., 2003; and businesses roundtable, securing cyberspace: business roundtable™s framework for the future, washington, d.c., may 2004. for discussion of other countries™ initiatives in software, see, for example, from underdogs to tigers, ashish arora and alfonso gambardella, eds., oxford university press, oxford, england, 2005, pp. 171206; rafiq dossani and martin kenney, ﬁthe evolving indian offshore services environment: greater scale, scope and sophistication,ﬂ sloan industry studies working papers, 2007 number wp200734, 2007. available at http://www.industry.sloan.org/industrystudies/workingpapers/index.php.accessed february 26, 2008; and organisation for economic cooperation and development (oecd), ﬁchina will become world™s second highest investor in r&d by end of 2006, finds oecd,ﬂ 2006. available online at http://www.oecd.org/document/26/0,2340,en2649201185377705221111,00.html. accessed february 26, 2008. 22with globalization, firms are increasingly seeking out and using offshore resources, whether these be offshore corporate facilities or outsource suppliers. a ubiquitous internet facilitates geographically distributed workforces and suppliers, taking advantage of trained workforces in different countries. historically, repetitive, routine projects are regarded as well suited for outsourcing or offshoring. but offshore suppliers are moving up the value chain, shifting from an initial emphasis on blackbox testing to coding, design, and beyond. use of foreign suppliers and offshore facilities introduce particular complexities for the dod supply chain. a general discussion of globalization and information technology will be available in nrc, assessing the impacts of changes in the information technology r&d ecosystem: retaining leadership in an increasingly global environment, forthcoming 2008. 23advances in objectoriented programming languages with firstclass encapsulation (java and c# principally) 7preliminary observations on dod software research needs and priorities: a letter reportcopyright national academy of sciences. all rights reserved.including process support, collaborative engineering environments, and advanced software build technologies. beyond simply writing code, software today is much more about defining appropriate and scalable architectures; selecting, using, and adapting infrastructure such as frameworks, components, and libraries; deploying best practices and tools for collaboration, process support, and validation; and doing all of this in the context of an increasingly complex supply chain structure. the complexity of software supply chain structures is evident in diverse sectors. a single enterprise software firm, for example, may develop software at dozens of separate sites around the world, and this software depends on infrastructure elements from dozens of vendors, each of whom may also have global operations. the richness of modern software technologyšparticularly objectoriented frameworks, emerging serviceoriented architecture (soa) concepts, team and collaboration tools, and process supportšspecifically enables the complexity of the modern supply chain structure for software systems. dod is applying these ideas in the serviceoriented netcentric enterprise services (nces) program at disa,24 which builds on commercial soa foundations. the framework and soa concepts create interfaces within a system that are intended to enable participation by diverse suppliers, resulting in complex supply chains. recent developments highlight the potential for enriched supply chains and the flexibility of diverse suppliers, but considerable technical and management challenges remain to deliver on this potential, particularly in a way that is effective for dod. it is becoming apparent first of all that the economic factors driving the supply chain structure include not only the direct cost of development, but also management agility (such as the ability to revisit choices in infrastructure, technology, and particular suppliers) and rapid access to specialized expertise (domain knowledge and requirements, code development, vendor components, testing and evaluation, process structuring, software architecture, and so on) and, secondly, that these factors combine to enable large firms to quickly adapt and enhance their business models to address competitive challenges. as international suppliers provide increasingly sophisticated functions (see below), the need to offer them incentives for improved quality increases accordingly. an important element of the globalization phenomenon is the pace at which global suppliers outside the united states are moving up the value chainšthat is, accounting for an increasing share of the overall value embodied in a product or service. global suppliers, who in the early days focused primarily on offerings such as providing blackbox testing services for webbased software systems developed in the united states and elsewhere or on provisioning remote technical support capability, are now developing the software for those systems directly, as well as engaging in requirements analysis, architecture, and design for those systems. this commercial trend exacerbates dod concerns about the mission impact of foreign influence on dod softwarešnamely, the risk of unwanted functionality in delivered software.25as noted both in the workshop report issued by this committee26 and in the recent sei report on ultrascale systems,27 these issues may be made worse by the extent of architectural innovation and overall scale required for modern interconnected defense systems. these systems experience a great deal of architectural risk due to the often long delay until the consequences of early engineering decisions are felt and understood. additionally, central decision making and coordination can often focus risk and amplify  are essential to the success of the nowubiquitous software frameworks in application areas ranging from ecommerce to mobile systems.24 see http://www.disa.mil/nces/about.html for more information. 25this tension was a focus of the dsb™s 2007 report of the defense science board task force on mission impact of foreign influence on dod software. how to mitigate risk from cots software, given global supply chains, continues to be a focus of dod activities, including those of the national security agency (nsa), which is seeking a cots strategy (proposal forthcoming). 26nrc,summary of a workshop on software intensive systems and uncertainty at scale, the national academies press, washington, d.c., 2007.27sei (software engineering institute), ultralarge scale systems: the software challenge of the future, 2006. 8preliminary observations on dod software research needs and priorities: a letter reportcopyright national academy of sciences. all rights reserved.rather than mitigate it. also, overly conservative choices regarding how to measure progress and earned value can lead toward local optima but away from overall systemsscale success. finally, overcommitment to particular requirements early in the process can result in lost opportunities for radical cost savings or capability improvements downstream. these risks could potentially be mitigated by both technological and process measures.in the next section, on research showing promise for advancing software producibility, the committee suggests research that could lead to more effective approaches for largescale systems with unprecedented architectures. these approaches include both technological advances and organizational measures. they could include, for example, incentives for (the many) participants in largerscale systems development efforts and the development of better tools and practices to manage tradeoffs between risk and value at different levels of structure within large projects. the key insight is that this is not a simple tradeoff between higher levels of capability (mission ﬁvalueﬂ) and the engineering risks that must be accepted to potentially achieve that capability. rather, there are practices and techniques that can ﬁpush outwardﬂ and improve the tradeoff curve by making the risk mitigation process more efficient through, say, iteration, prototyping, and technical and economic modeling. these ideas are also elaborated in that section, and more will be said in the committee™s final report. technical innovation leadership the united states has generally retained leadership in software innovation in two key technical areas.28 one of these is the structure of the ﬁstacksﬂšthe internal industry standard interfaces that define key architectural elements of many systems such as network protocols and the principal ecommerce application programming interfaces (apis) and frameworks.29 the other leadership area is the set of core technical and design concepts for many of the infrastructural elements of the architectural stacks on which systems are builtšsuch as operating systems, databases, application servers, and realtime kernels. these ﬁstacksﬂ define the conventional interfaces and elements, generally in the form of de facto industry standards that exist within major complex systems.30 in addition to their core technical layers (for example, the operating systems, databases, application servers, and network protocol stacks) these stacks also typically include key system frameworks and libraries, as well as the languages, tools, standards, and quality assurance technologies used in systems development. such conventional aggregations of interfaces and components exist for most major categories of systems, including internetbased systems of all kinds, ecommerce systems and web services, mobile applications, and embedded and realtime control applications. they are emerging in areas ranging from robotic systems to dataintensive supercomputing. over the years, dod has attempted to codify its preferences regarding the components and interfaces in these conventional aggregates with efforts such as the defense information infrastructure common operating environment (diicoe), the joint technical architecture (jta), and the system of systems common operating environment (soscoe). a particular challenge for dod in  28the workforce has also been a significant factor in u.s. innovation leadership. ceding workforce development to other nations is clearly a cost to the united states in terms of defense work per se and also in terms of the innovation ecosystem that industry, academia, and the government have nurtured. the success of additional investment by dod in computing research is heavily dependent on corresponding investments in innovation and competitiveness throughout the nation.29for example, owing to their broad utility, robustness, and low adoption risk, infrastructure, frameworks, and libraries for ecommerce are sometimes employed in defense systems that have no connection with ecommerce. 30the use of the term ﬁstackﬂ follows the industry convention for referring to the aggregation of infrastructural system elements organized according to conventional or standard interfaces. this aggregation is typically complex and, in fact, is not generally structured in a stacklike fashion. the term probably came from the layered structure of the familiar internet network protocols. dod uses the term ﬁcommon operating environmentﬂ to convey similar meaning.9preliminary observations on dod software research needs and priorities: a letter reportcopyright national academy of sciences. all rights reserved.defining such standards is to keep up with rapidly evolving technology31 and to select those for which certified components and/or trusted suppliers exist. stacks in different systems and system categories may share elements and typically support diverse ranges of applications. modern ecommerce frameworks, for example, are ubiquitous in internetbased commerce, but they have also been adopted as internal coordination frameworks for largescale dod systems.32the stacks contribute enormous value to software and systems projects that rely on them by allowing developers to leverage an enormous investment whose costs are spread across a wide base of users rather than taking on the full effort and expense of developing an entire software system from the ground up, and the extent of that value is constantly growing. as capabilities that previously were innovative become commonplace across firms, the task of advancing them is shifted from internal resources to external ones (outsource suppliers), enabling the firms to redirect their internal resources to new areas where they can differentiate themselves from their competitors. this is how, for example, the central database for many firms evolved from early network and hierarchical databases into relational transactional databases into virtualized application server capabilities wrapped around relational databases with the full functionality being provided by outside vendors. an issue for the dod, however, as for other entities seeking to maintain leadership in software use and development, is how to effectively track the evolution of the conventional interfaces and architectures and not fall behind (see discussion of ﬁsurprise reduction,ﬂ below). another issue, more directly related to innovation, is how to work with the broad technology community to ensure that where dod has leading demand its requirements can be met as the infrastructure evolves. the modern stack, and particularly its upper levels, is enabled by a wide range of computer science and software engineering advances. the modern software application frameworks essential to webbased systems, ecommerce, and graphical user interfaces of all kinds are enabled by the same advances in programming language design that led to languages such as java, c#, and ada95. many of these advances are legacies of past dod investment in computing technology r&d, primarily in the form of 6.1 and 6.2 extramural research funding.33 the bestknown example is the networking foundation provided by the internet protocol suite that stemmed from defense investment in arpanet, but lesser known examples such as the operating system architectures for networkbased, distributed computing have had similar impacts.34that global suppliers are moving up the value chain suggests the possibility that u.s. leadership may be eclipsed in many of the core technologies related to systems architecture, languages and tools, and software assurance, as well as with respect to key design elements of the software infrastructure.35 this suggests a key question: is there, in fact, strategic value in retaining u.s. leadership? in addition to making a number of recommendations to improve the overall quality of defense software and provide for more knowledgeable acquisition, the dsb task force report on foreign software asks this question in the particular area of software assurance, noting the essential requirement that the united states maintain  31standards setting can involve a number of challenges and tradeoffs, including a tradeoff between currency and stability. this is why many firms follow industry conventions, which may evolve relatively more rapidly than formally ratified standards; this can further complicate matters for dod. 32the extent to which dod moves to purchase software services rather than to own or create certain types of softwareintensive systems may be an indicator that it is moving toward a networkcentric services support philosophy. 336.1 is the dod budget category for basic research; 6.2 is the category for applied research. ﬁextramuralﬂ research is that done outside government. 34see, for example: nrc, funding a revolution: government support for computing research, national academy press, washington, d.c., 1999; and nrc, innovation in information technology, the national academy press, washington, d.c., 2003, especially the tire tracks diagram in figure 1 of that report (pp. 67). 35much of the technical progress now being made in software assurance for critical systems is in europe (at companies such as praxis, esterelle, and others), due largely to sustained investment in creating the technologies and to extensive early experimentation in adoption by industry and government. 10preliminary observations on dod software research needs and priorities: a letter reportcopyright national academy of sciences. all rights reserved.advanced capability for ﬁtest and evaluationﬂ of it products.36 in other words, reputationbased credentialing of software needs more and more to be augmented by direct, artifactfocused means to support acceptance evaluation.37 the task force recommends more effective direct evaluation by consuming organizations throughout the software supply chain, including better ways for producers to create software for which direct evidence of critical quality and functionality attributes can be provided. in other words, the task force concluded that test and evaluation should be supported by a broad range of software engineering technologies and interventions, not just those employed at the late test phase of development. both the 2007 dsb task force report on foreign software and the dsb 2000 report on defense software also highlight the importance of commercial technology to dod, including the essential elements (operating system, databases, application servers, and so on) of most of the predominant software stack architectures.38in summary, previous studies highlight two priorities: (1) effective use of cots technologies and components and (2) the ability to be as effective as possible at custom software engineering to rapidly achieve high levels of capability, then adapt with maximum agility to changes in the operating environment. a significant loss of u.s. leadership in either area could threaten dod™s ability to produce and assure the software it requires. the need for dod involvement in software advancementwill the advances in softwareintensive systems producibility needed by dod emerge unaided from the defense industrial base at a pace sufficient to meet evolving defense requirements? this is a central question for softwareintensive systems producibility. many of the industry™s advances are not undertaken with a focus on dod priorities. as dod relies more on the software capabilities of its supply chain,39 this becomes more of a problem.40 the issue is not areas where dod has ﬁuniqueﬂ requirements, but the much broader category of areas where it has leading demand with respect to particular kinds of requirements, such as software assurance and riskmanaged, unprecedented architectural design of the  36the phrase ﬁtest and evaluationﬂ is widely used in dod to refer to a broad range of activities related to validation and verification. for the purposes of this report, a broad interpretation is given, to include the more essential (and, arguably, cost effective) preventive measures related to requirements, architecture, design, and implementation. 37for a discussion of how to credential and certify software systems, see nrc, software for dependable systems: sufficient evidence?, the national academies press, washington, d.c., 2007. a new nrc study on improving processes and policies for the acquisition and testing of information technologies in the department of defense will focus on testing and evaluation of it; see http://www.cstb.org for more information. 38ﬁthe system of systems common operating environment (soscoe) and the integrated computer system/operating system (ics/os) [rely] predominantly on cots and open source software. the ics/os is almost 99% cots/os. the soscoe, essentially the ‚middleware™ for fcs, is almost 80% cots/os.ﬂ dsb, report of the defense science board task force on mission impact of foreign influence on dod software, office of the undersecretary of defense for acquisition, technology, and logistics, washington, d.c., september 2007, p. 77. see also dsb, report of the defense science board task force on defense software, office of the under secretary of defense for acquisition and technology, washington, d.c., november 2000, p. 17. 39see, for example, dsb, report of the defense science board task force on mission impact of foreign influence on dod software, office of the undersecretary of defense for acquisition, technology, and logistics, washington, d.c., september 2007, which grapples with the implications of foreign entities in its cots supply chain.40the overall supply of programmers is not a large problem, but the supply of highly capable program managers, software architects, and senior technical talent definitely is. see csis (center for strategic and international studies), defenseindustrial initiatives group, ﬁan assessment of the national security software industrial base,ﬂ october 16, 2006. available at http://www.diigcsis.org/pdf/chaosoftwareindustrialbase ndiasoftware.pdf. accessed february 21, 2008. 11preliminary observations on dod software research needs and priorities: a letter reportcopyright national academy of sciences. all rights reserved.kind required to create highinterconnectivity systems such as fcs, netcentric systems, and many other major defense platforms that have few commercial precedents or analogues. the committee notes that, historically, the answer to this question has been that needed advances will not emerge at sufficient pace without an explicit and substantial investment by dod. the evidence for this is dod™s role in initially creating and sustaining the innovation advantage of the united states in it. this role was evident from the earliest days of computing during world war ii until recently. the extent to which dod funding has had a leveraged impact on innovation in information technologies throughout the economy is documented in several national studies.41 it has enabled the united states to retain innovation leadership, but in recent years software issues critical to dod have not been adequately addressed. there appears to be less direct dod investment in advancing software capability in its industrial base and the associated supply chain. additionally, this supply chain increasingly includes cots, open source components, and globallysourced components. given the magnitude, cost, and criticality of dod™s softwareintensive projects, the potential impacts from research and other initiatives focused on reducing the cost of supplychain and other software problems in these projects could be substantial.threats to leadership there are at least three factors that could cause the united states to lose innovation leadership in software areas important to dod. first, the dod investment in software producibility has in recent years diminished considerably from its prior levels, which had been sustained over more than three decades.42the second factor is the ramping up of investment by foreign governments in their national it capabilities, including in software.43 the third factor is the inexorable trend of globalization, driven not just by simple cost economics but also by the potential for agility and rapid access to expertise, all enabled by modern software architectural advances coupled with advanced, internetbased collaboration technologies. of course, very strong shifts overseas have happened in other sectors, such as consumer electronics, and there is still debate regarding the strategic impact of these shifts. it is the committee™s view, however, that the leveraged role of software and the particular special role of software in defense and national security systems of all kinds make this kind of shift much more consequential for defense software producibility and for u.s. ability to advance overall defense system capability.44 41see kenneth flamm, creating the computer: government, industry, and high technology, brookings institution press, washington, d.c., 1988; nrc, funding a revolution: government support for computing research, national academy press, washington, d.c., 1999; and nrc, innovation in information technology, the national academies press, washington, d.c., 2003. 42according to the annual r&d budget request data by component area published by the national coordination office for networking and information technology research and development (nitrd), in fy 2007/2008 budget requests for software design and productivity decreased by almost an order of magnitude from the requests in fy 2002/2003. seehttp://www.nitrd.gov/pubs/bluebooks/2002/bb2002final.pdf, p. 35; http://www.nitrd.gov/pubs/bluebooks/2003/03bbfinal.pdf, p. 37; http://www.nitrd.gov/pubs/2007supplement/07%20supp%20entire%20book/07suppfinal022306.pdf, p. 20; and http://www.nitrd.gov/pubs/2008supplement/08suppfinalaugust.pdf, p. 20. 43see oecd, information technology outlook 2006, available via http://www.oecd.org/document/10/ 0,3343,en2649374413748685811137441,00.html#tocat. accessed february 26, 2008;and nrc, assessing the impacts of changes in the information technology r&d ecosystem: retaining leadership in an increasingly global environment, forthcoming 2008. see also from underdogs to tigers, ashish arora and alfonso gambardella, eds., oxford university press, oxford, england, 2005, pp. 171206; rafiq dossani and martin kenney, ﬁthe evolving indian offshore services environment: greater scale, scope and sophistication,ﬂ sloan industry studies working papers, 2007, number wp200734, 2007. available at http://www.industry.sloan. org/industrystudies/workingpapers/index.php. accessed february 26, 2008; and oecd, ﬁchina will become world™s second highest investor in r&d by end of 2006, finds oecd,ﬂ 2006. available at http://www.oecd.org/ document/26/0,2340,en2649201185377705221111,00.html. accessed february 26, 2008. 44see also dsb, report of the defense science board task force on mission impact of foreign influence on 12preliminary observations on dod software research needs and priorities: a letter reportcopyright national academy of sciences. all rights reserved.economic drivers for federal r&d there is no compelling return on investment (roi) case for industry to produce the needed innovations that have a nonappropriable character. this is a familiar issue to those involved in defining industrywide best practices, standards, and other commonalities. many of the most important and highly leveraged, governmentoriginated innovations are in the economic ﬁcommons.ﬂ a recent nrc report on software and the economy notes that ﬁthe economic rationale for government investment is based on the nonappropriability of many significant it innovations, including the most widely used idiomatic data structures and algorithms, as well as design and architectural patterns. moreover, the it industry relies on a number of technical and process commonalities or standards such as the suite of internet protocols, programming languages, core design patterns, and architectural styles.ﬂ45 these innovations effectively raise everyone™s ﬁboatﬂ in the same way as do government investments in bioscience, health care, and other strategically important scientific disciplines. this includes many of the most highly leveraged areas of software research such as improvements in abstraction mechanisms, design notations, programming languages, software analysis and model checking, basic algorithms, design patterns and architecture concepts, and other core techniques.one of the significant challenges associated with creating value of this nonappropriable kind, which diffuses broadly into the engineering discipline and the economy, is the difficulty of measuring that value. since the value has broad and diffuse benefits, direct measurement of roi is probably not possible. moreover, the way in which software is protected as intellectual property is often distinct from what is done in other fields (such as biomedicine). when dealing with a software system, it is often a combination of protected elements that are at issue, which makes the nonappropriable, yet valuable, aspects of the work even harder to identify. when research results are not appropriable, researchers are less likely to be able to secure patents. thus, it can be hypothesized that direct revenues from licensing universityowned patents are likely to be significant underestimates of the value created by federally funded research, especially in the case of softwarerelated university inventions. one problem with looking to the software industry for needed r&d is that the industryšin terms of both firms and revenuesšis shifting away from a focus on software products to a focus on integration, custom development, and other services.46 more than half the revenues of software product companies are now coming from services rather than product sales, which tend to be the most scalable and profitable part of the business.47 additionally, the softwareproduct sector is shrinking in numbers, going from more than 400 to less than 150 publicly listed software product companies on u.s. stock exchanges in the last 8 years.48 with the industry in a consolidation mode and facing declining revenues from products, the ability of software product companies to do new research is weakening. generally speaking, moreover, the research done by software product companies is primarily focused on improving their products. while individual companies have the incentive to improve their  dod software, office of the undersecretary of defense for acquisition, technology, and logistics, washington, d.c., september 2007. 45nrc,measuring and sustaining the new economy software, growth and the future of the u.s. economy: report of a symposium, the national academies press, washington, d.c., 2006, footnote 14, p. xvii. these commonalities include frameworks, serviceoriented architecture concepts, infrastructure apis, and so forth.46for quite a few years, about twothirds of global revenues in the software industry have actually been from services (such as custom software development, maintenance, it consulting, and technical support) and only onethird of revenues have come from the product companies. see michael a. cusumano, the business of software,free press, new york, n.y., 2004, p. 46, footnote 19, citing standard & poor™s annual data.47thus, only about onesixth of global software industry revenues (half of the onethird of revenues from products) is from product sales. see michael a. cusumano, ﬁthe changing software business; moving from products to services,ﬂ ieee computer, january 2008, pp. 2027. 48michael a. cusumano, ﬁthe changing software business; moving from products to services,ﬂ ieee computer, january 2008, p. 22.13preliminary observations on dod software research needs and priorities: a letter reportcopyright national academy of sciences. all rights reserved.own productivity, there is less incentive to engage in research that is focused on industrywide improvements, especially since (as is evident historically) many of those improvements come only after sustained commitments and much technical exploration. in a competitive market, individual companies generally have few market incentives for such investments. even when productivity products for software development do find their way into the market, they are most often targeted for normalscale enterprise it systems, not for verylargescale architectures, realtime embedded architectures, or other less conventional architectures that characterize dod systems. these architectures, critical to dod but not common elsewhere, may require topurpose tools and practices or adaptations to existing tools and practices. the scale of the nondod market is too small to justify investment in advancing these areas unless dod is a partner in that investment. there may also be cases where industry has little economic incentive to acknowledge fundamental gaps in knowledge. this is not so unusual. one obvious example is illstructured contracts, often from the government, where project difficulties may accrue to a contractor™s economic benefit in the form of increased contract costs and profits, along with longterm revenue streams resulting from costly postdeployment repair and maintenance requirements. a second example is the consequence of poor measurement capability, particularly relating to quality and securityšﬁassurance metricsﬂ in the terminology of the 2007 dsb task force report. when metrics and observables are lacking, it is difficult to construct a business case for improvement of the underlying phenomena of concernšquality and security in this case. a third example is inadequate best practices. when metrics are weak, we must rely increasingly on best practices and process maturity to achieve productrelated goals. process compliance is relatively easier to achieve and certify than quality, but in software it is often a weak correlate.49worse, fundamental improvements in best practices to enhance what can be achieved in terms of systems capability, productivity, quality, agility, and other characteristics are often in the category of nonappropriable innovations discussed above and thus may not be readily shared. these factors combine to lower industry economic incentives to address the producibility challenge. role of academic r&d the academic research community has traditionally addressed core technical problems related to software producibility. it is the committee™s impression,50 however, that in recent years many of the researchers in these areas have moved into other fields or scaled down their research efforts as a result of, among other things, dod™s having shifted funding priorities away from softwarerelated r&d, apparently on the assumption that industry can address the problems without government intervention.51more aggressive engagement with academic software researchers would enable dod to take advantage of the unique value that universitybased r&d would afford to dod.52 49for more on the limitations of process compliance, see nrc, software for dependable systems: sufficient evidence?, the national academies press, washington, d.c., 2007.50external views have shared the committee™s impression. see john markoff, ﬁpentagon redirects its research dollars,ﬂ the new york times, april 5, 2005, quoting academic researchers and industry research managers. 51the roi required by industry tends to be very short term. as a result, incentives are lacking to support the longerterm, innovative research that is needed to support the escalating demands of the dod. 52an excellent example of the payoff of academic research in middleware is provided in a paper tracing in considerable detail how ph.d. dissertations in middleware evolved into major commercial middleware capabilities. see w. emmerich, j. sventek, and m. aoyama, ﬁthe impact of research on the development of middleware technology,ﬂ acm transactions on software engineering and methodology 17(4), 2008. available at http://www.cs.ucl.ac.uk/staff/w.emmerich/publications/impactmiddleware/tosem.pdf. accessed february 22, 2008. 14preliminary observations on dod software research needs and priorities: a letter reportcopyright national academy of sciences. all rights reserved.value from academic r&d the academic value proposition has several direct components: the first is workforce. university graduates are the core of the engineering workforce. the most talented and highly trained graduatesšthose who contribute to innovation in a primary wayštend to come from ph.d. programs. more generally, the research community generates a steady supply of peoplešgraduates at all levelsšeducated at the frontiers of current knowledge in important areas of specialization. the economics of these programs depend on externally funded research projects. it is perhaps too obvious to say so, but cleared individuals with top technical qualifications53 are most likely to be graduates of u.s. universities.54the second component is new knowledge.the research community is focused on creating new knowledge that provides solutions to, or at least progress on, important open problems. while industry does play a limited role in performing research relevant to fundamental open problems, there is no institution in the united states other than the research community, located primarily at universities, that focuses on broad, nonappropriable advancements to practice. indeed, most major corporate labs that do not focus primarily on appropriable research (such as bell labs and xerox parc) have been restructured or scaled back in recent years. academic r&d is also a major generator of entrepreneurial activity in it. the small companies in that sector have an important role in developing and market testing new ideas. the infrastructure to support these ventures is an important differentiator of the u.s. innovation system.55 this infrastructure includes university intellectual property and people supported by university r&d projects. these companies may sometimes disrupt the comfortable market structures of incumbent firms, but not to the same extent as foreign innovation. regardless, weak incumbents tend to fall by the wayside when there is any disruption. strong incumbents become stronger. this constant disruption is a characteristic of it. it is essential that the dod itself be effective as a strong incumbent that is capable of gaining strength through disruptive innovations. the intelligence community™s disruptive technology office (dto, now part of intelligence advanced projects research agency) can be presumed to have been founded upon this model. a third area of value provided by universitybased r&d is surprise reduction.computing technology is continuing to experience very rapid change, at a rate that has been undiminished for several decades. given the rapid change intrinsic to it, the research community (in academia and in industry, especially startup companies) serves not only as a source of solutions to the hardest problems, of new concepts and ideas, and of trained people with high levels of expertise, but also as a bellwether, in the sense of anticipating technological changes. for software, the potential for surprise is heightened by a combination of the rapid growth of globalization, the concurrent movement up the value chain of places to which r&d has been outsourced, and the explicit investments from national governments and the european commission in advancing national technological capability. given the role of externalities in it economics, it is not unreasonable to consider the innovation center of gravity changing rapidly in many key areas, which could shift control in critical areas of the technology stack described above. this is  53see dsb, report of the defense science board task force on mission impact of foreign influence on dod software, office of the undersecretary of defense for acquisition, technology, and logistics, washington, d.c., september 2007, p. xi. 54data on computer science and engineering ph.d. production are available from the taulbee surveys conducted by the computing research association. for 20052006, over half of new ph.d. students came from outside north america. since about 2000, nonresident aliens have received the majority of ph.d.™s granted by u.s. institutions. see http://www.cra.org/statistics/survey/0506.pdf, table 5a and figure 5. accessed march 28, 2008. 55the information technology r&d ecosystem, including the role of academia and funding sources, is the focus of the nrc report assessing the impacts of changes in the information technology r&d ecosystem: retaining leadership in an increasingly global environment, forthcoming 2008. 15preliminary observations on dod software research needs and priorities: a letter reportcopyright national academy of sciences. all rights reserved.already happening in several areas of it infrastructure, such as chip manufacturing. in this sense, the research community has a critical role in defensecritical areas that are experiencing rapid change. the fourth component of the academic r&d value proposition is nonappropriable invention, as described above. this is one of the several forms of innovation carried out by the university research community. in a market economy, this is a role nearly unique to universities and similar institutions. for it in particular, is essential to national competitiveness and to increases in marketwide value. although the openness of university research is sometimes considered a negative factor with respect to the advancement of technology for national security, it also the case that universities have unique incentives, unlike industry, to advance the discipline even when the hardwon results are nonappropriable or difficult to fully appropriate. as noted above, it is evident from the history of the field that the advancement of it and software producibility disproportionately depends on this kind of technology advance.56 of course, universities also create an enormous body of appropriable intellectual property that has the potential to be transitioned into practice. dod influence on academic r&d the overall directions and priorities for sponsored research that leads to universityoriginated invention are greatly influenced by funding levels and agency priorities. for example, darpa™s deliberately strong relationship with the it research community, which began in the 1960s and endured for nearly 40 years, has had profound influence on it research priorities, the overall culture of computer science research, and the massive economic and national outcomes.57 when dod shifted funding away from university it r&d, informal reports indicate that researchers in many areas key to dod™s software future scaled back their research teams and redirected their focus to other fields that were less significant to dod in the long term. for example, relevant to the topic of this report, dod budget requests for research in software design and productivity fell from $60 million in fy 2003 (predominantly from darpa) to $6.8 million in fy 2007; the fy 2009 request is $7.8 million (predominantly from osd and service research organizations).58 the impact of r&d cutbacks generally (excluding healthrelated r&d) has been noted by the top officers of major it firms that depend on a flow of innovation and talent.59 56in the area of cybersecurity, for example, ﬁthere is an enormous distance between the development of a good idea and its widespread use. . .and traversing that distance often entails additional research activity that is significant in its own right.ﬂ nrc, toward a safer and more secure cyberspace, the national academies press, washington, d.c., 2007, p. 62. 57in addition to the nrc reports previously cited, see arthur l. norberg, judy e. o™neill, and kerry j. freedman, transforming computer technology: information processing for the pentagon, 19621986, the johns hopkins university press, 2000. 58annual r&d budget request data by component area are provided in the supplements to the president™s budget published by the national coordination office for nitrd. these indicate that budget requests for software design and productivity were over $45 million for fy 2002 (mostly from darpa) and $60 million for fy year 2003 (mostly from darpa). however, for fys 2007, 2008, and 2009, these requests had decreased to only $6.8 million, $4.3 million, and $7.8 million, respectively (from osd and dod service research organizations, not darpa). seehttp://www.nitrd.gov/pubs/bluebooks/2002/bb2002final.pdf, p. 35; http://www.nitrd.gov/pubs/ bluebooks/2003/03bbfinal.pdf, p. 37; http://www.nitrd.gov/pubs/2007supplement/07%20supp%20entire% 20book/07suppfinal022306.pdf, p. 20; http://www.nitrd.gov/pubs/2008supplement/08suppfinalaugust.pdf, p. 20; andhttp://www.nitrd.gov/pubs/2009supplement/nitrd09suppfinalweb.pdf, p. 21. by contrast, nsf™s fy 2009 budget request in this area was $70.8 million. developing recommendations that would strengthen the research infrastructure in areas of critical importance to national security was the focus of k. mckeown, l. clarke, and j. stankovic (organizers), ﬁcra workshop on research related to national security: report and recommendations,ﬂ computing research association, 2002, available at http://www.cra.org/crn/articles/sept03/mckeown.html. accessed february 26, 2008. 59see, for example, ﬁthe future of information technology: growing the talent critical for innovation,ﬂ microsoft research, july 2006. available at http://research.microsoft.com/workshops/fs2006/papers/ 16preliminary observations on dod software research needs and priorities: a letter reportcopyright national academy of sciences. all rights reserved.academic r&d, looking forward there are some challenges to proceeding with a new program of academic r&d related to softwareintensive systems producibility. these challenges relate generally to saliency, realism, and risk. university faculty tend to be aware of broadly needed advances, but they generally have inadequate visibility into the particular characteristics of the leading demand of very largescale, complex industrial and military systems. this awareness is hindered by many things, including national security classification, professional connectivity, and cost, in the sense of time and effort required to move up the learning curve.60 in a different domain, darpa took a positive step in this regard by initiating the darpa computer science study group, wherein junior faculty are given clearances and so are able to gain direct exposure to military challenge problems.61 several specific dod programs have undertaken similar efforts to give faculty a domain exposure, often with great success. one example is the command and control university (c2u) created by the command post of the future (cpof) program, and the committee understands that prototype systems from this program are now deployed in iraq.62with respect to scale, companies such as google and yahoo!, and national laboratories such as los alamos, have developed collaborative programs to expose faculty and graduate students to highperformance computing systems and the software approaches being taken with those systems. these companies, like the dod, have worked out a level of exposure that enables researchers to productively engage without compromising core intellectual property. dod has a track record of success in this regard as well.generalresearchareasofferingpromiseforadvancingproducibility in the preceding sections, the committee addressed the significant role of software in defense. it also provided an economic and historical rationale for the active involvement of dod in fostering advances in the producibility of software and not resting its future on the hope that (1) industry will address its needs and (2) offshoring the center of gravity of innovation in software and software infrastructure will be acceptable from a national security standpoint. in this section, the committee summarizes three technology areas where dod has leading demand and where technological advancement would benefit dod™s capability to produce the software it needs.in the first two areas, a loss of innovation leadershipšnational competitive advantagešcould adversely affect dod™s relative technological advantage in building the complex systems of the future. the committee notes, additionally, that all three areas will help to achieve the vision articulated by john young (then acting under secretary of defense for acquisition, technology, and logistics) regarding prototyping early in the systems development process to reduce softwarerelated engineering risk and support design validation, cost estimation, and specification refinement.63 thefutureofinformationtechnology.pdf, accessed february 26, 2007; michael d. lemonick, ﬁare we losing our edge?ﬂ time, february 5, 2006, available at http://www.time.com/time/magazine/article/0,9171,11565751,00.html. accessed february 26, 2008; and chappell brown, ﬁresearch funding teeters,ﬂ ee times, no. 1396, november 7, 2005, p. 1. see also nrc, rising above the gathering storm: energizing and employing america for a brighter economic future, the national academies press, washington, d.c., 2007. 60additionally, many problems facing dod may not be otherwise interesting to (or may even be considered ﬁsolvedﬂ by) academics. moreover, the huge gap between a research paper and a finished piece of software is difficult to bridge.61for more information on the darpa computer science study group, see https://cs2p.ida.org/. accessed february 26, 2007. 62for information on the command and control university (c2u), see http://www.cs.cmu.edu/~waisel/c2u.htm. accessed february 26, 2008.63john j. young, jr., acting under secretary of defense for acquisition, technology, and logistics, ﬁmemorandum for secretaries of the military departments, chairman of the joint chiefs of staff, commander, u.s. 17preliminary observations on dod software research needs and priorities: a letter reportcopyright national academy of sciences. all rights reserved.these areas will be elaborated in greater technical depth in the committee™s final report, which will respond in greater detail to the question of where attention and research should be focused. in this report, the committee provides an overview of three key highlevel areas wherein advancement would offer dod significant leverage.unprecedented ultrascale systems in the foregoing discussion, the committee noted that software architecture is often the key to successful development. there is ample experience in commercial practice and, in some instances within dod, to validate software architecture™s importance. despite some successful programs, however, dod has not focused directly on this issue. nevertheless, it is important that the dod research agenda address software architectural issues such as those discussed in this section if dod is to have the potential to achieve the operational benefits promised by these technology developments. as noted above, defense systems are increasingly complex and interconnected. they consist of multiple components interacting and include functionality that cuts across multiple traditional defense functional areas. fcs is a good example. previous platformsšconventional tanks and armored vehiclesšgenerally combined in one colocated system an array of sensors, battlecommand and human interfaces, and weaponry such as cannons. platforms communicated with each other through human speech by radio and relatively simple telemetry. in the fcs model, by contrast, sensors, battle command, and weaponry are no longer colocated but are interconnected over a battlefield network.this enables, for example, battle command to exploit data from multiple sensors and to direct fire from cannons or mortars at those specific locations in theater from which the mission can be accomplished most effectively. this model enables a shooter to be guided by a multitude of geographically dispersed sensors. through the use of autonomous and teleoperated vehicles, the model enables the positioning of sensors and shooters in highrisk locations. it thus affords tremendous power and agility to theater commanders. additionally, because the architecture is fundamentally driven by interoperation requirements, if it is suitably managed, it can be a great enabler for joint (multiple military services, including air, land, sea, space, and cyber) and combined (international and coalition) warfare. from the standpoint of systems engineering, however, this power comes at a significant price, which is the high level of complexity and engineering risk that comes from the extent of coupling required among the multitude of sensors, weapons, and battle command centers. for example, how can architectures be developed and validated to support the kind of local autonomy necessary for a vehicle to navigate effectively over mixed terrain? how can software and systems architectures be evolved, for example, as algorithms and machinelearning capabilities improve? moreover, by specifying interfaces where testing or measurement is possible, by defining reusable components, and by separating critical from noncritical parts of the system, architecture plays an essential role in assurance. fcs is but one example of the emerging architectural model of modern networkcentric warfighting. and, indeed, the trend to networked distributed computing, which was foreseen by darpa 40 years ago, leads not only to systems such as fcs but also to the horizontally linked, distributed computing models that characterize the most modern enterprise information systems. these systems have shifted from functionally focused departmental systems (analogous to a single tank or airplane) to processfocused enterprise systems (analogous to fcs and other networkcentric systems concepts). indeed, the processfocused systems now include links not only within the enterprise but also deep into supply chains (as was the case with the boeing 777 global development project 20 years ago) and into the customer infrastructure. as was described to the committee several times in the january 17, 2007, workshop on uncertainty at scale, the successful design of scalable architectures for this category of systems is extremely challenging. presentations to the committee from companies such as boeing and amazon  special operations command, directors of defense agencies: prototyping and competition,ﬂ september 19, 2007.18preliminary observations on dod software research needs and priorities: a letter reportcopyright national academy of sciences. all rights reserved.reinforce this point. the challenge derives, in large measure, from the unprecedentedness of such systems. while the lack of precedent creates engineering risk, it is also important to recognize that acceptance and management of this engineering risk is fundamental to success in achieving the potential new value that can be derived from the new concepts.64 this is not to say that the value side of this equation is nonnegotiable. it seems plausiblešindeed, nearly certainšthat there will be situations where the risk is sufficiently high that reducing the target value is an appropriate decision. moreover, there can be a significant political/managerial dimension to increased risk. that is, the concept of ﬁengineering riskﬂ as addressed routinely by technical experts in making internal design decisions is different from the concept of overall ﬁproject riskﬂ as considered by executives and senior leaders, which relates to the likelihood of a project failing or falling short of goals. two consequences are worth noting. first, in software there are techniques to mitigate and manage risk without necessarily compromising value. these techniques primarily involve various kinds of wellmanaged iteration, including prototyping, simulation, modeling, and various other approaches to the exploration of tradeoffs among requirements, architectural, design, and quality assurance. system architecture should not be considered a given, and using architectures that are more partitioned can reduce risk at the expense of performance. a second consequence is that, in principle, the success or failure of any approach to risk reduction is best viewed over a larger set of projectsšextrapolating from a small number of data points (or even, as is common, from anecdotes) is inappropriate but is, unfortunately, highly likely if the process is not understood in this added political/managerial dimension. the engineering challenge, therefore, is not how to eliminate the risk but rather how to manage it successfully. in all engineering projects, and particularly software engineering projects, this usually means moving as early in the process as possible the time at which the consequences of provisional or ﬁriskyﬂ decisions can be understood. if the consequences are understood only late in the process, then the costs of unwinding previous bad decisions may have become prohibitive, and instead the architecture becomes a legacy infliction that is constantly worked around. if, instead, consequences can be understood early, then it remains realistic to refactor and optimize the architecture. from a research standpoint, there are a number of approaches that could be taken to address this issue. one is to further the development of modeling and simulation tools suitable to informing architectural decisions. this creates a trybeforeyoubuy approach to key architectural decisions, wherein architectural concepts are modeled using tools and analysis and testing can be done to assess scalability, performance, robustness, and resiliency to failures and attacks. in this context, the committee means something broader than the current theory and practice of testing and analysis (see footnote 34), which focuses on conformance of program behavior to specified behavior. the goal is to augment this with tests and analyses that provide information to support evaluation and validation of architecture concepts at the earliest possible stages of the process. another approach is to develop audit and instrumentation tools to provide early data once architectures are designed and initially populated. another approach is to develop and analyze a family of precedented ﬁscalable architectural patternsﬂ that could provide a wellunderstood infrastructure of building blocks out of which verylargescale architectures could be designed. this could facilitate the use of multiple suppliers at the architectural level.65 additionally, if tools are in place that can support more aggressive restructuring, then a more principled approach can be taken to architectural design that includes iterative development, currently almost always impossible at the architectural level. this could also enable constructive response even to relatively latebreaking news about the consequences of early architectural commitments. some combination of all these approaches will likely be necessary.  64a summary of briefers™ presentations and the workshop discussion can be found in nrc, summary of a workshop on software intensive systems and uncertainty at scale, the national academies press, washington, d.c., 2007. for discussion of the limitations of testing, see national research council, software for dependable systems: sufficient evidence?, the national academies press, washington, d.c., 2007. 65software engineering ﬁpatternsﬂ may be defining a new dimension to ﬁsoftware reuse.ﬂ 19preliminary observations on dod software research needs and priorities: a letter reportcopyright national academy of sciences. all rights reserved.assurance and early and continuous validationone of the great challenges for both defense and civilian systems is software quality assurance. software assurance encompasses reliability, security, robustness, safety, and other qualityrelated attributes. diverse studies suggest that overall software assurance costs account for 3050 percent of total project costs for most software projects.66 despite this cost, current approaches to software assurance, primarily testing and inspection, are inadequate to provide the levels of assurance required for many categories of critical systems.67 as systems grow in size, complexity, interconnection, and use of thirdparty components, these challenges will grow substantially. a further source of challenge is the dynamic nature of modern software architectures, including soas, architectures for autonomy and robotic systems, and other emerging architectural concepts. to respond to assurance needs, a number of approaches are being explored in the research community, including model checking, static and dynamic analysis, verification, semanticsbased testing, and others. leading vendors have invested internally in developing various kinds of semanticsbased tools and associated practices to address quality issues. additionally, and perhaps most importantly, the core technologies of programming languages, frameworks, development tools, and process support are all being adapted to better support assurance requirements.68 that is, assurance can no longer be thought of as a phase of systems development, but rather a consideration that needs to be taken into account from the earliest phases of systems conceptualization.  66in ﬁsoftware debugging, testing, and verification,ﬂ ibm systems journal (41)1, 2002, b. hailpern and p. santhanam say, ﬁin a typical commercial development organization, the cost of providing this assurance via appropriate debugging, testing, and verification activities can easily range from 50 to 75 percent of the total development cost.ﬂ in estimating software costs (mcgrawhill, 1998), capers jones provides a table relating (percentage of defects removed; to percentage of development effort devoted to testing), with data points, including (90; 39), (96; 48), and (99.9; 58). in software cost estimation with cocomo ii (prentice hall, 2000), b.w. boehm, c. abts, a.w. brown, s. chulani, b.k. clark, e. horowitz, r. madachy, d. reifer, and b. steece indicate that the cost of test planning and running tests is typically 2030 percent plus rework due to defects discovered. in balancing agility and discipline (addison wesley, 2004), b. boehm and r. turner provide an analysis of the cocomo ii architecture and risk resolution scale factor, indicating that the increase in rework due to poor architecture and risk resolution is roughly 18 percent for typical 10ksloc (ksloc stands for thousand software lines of code) projects and roughly 91 percent for typical 10,000ksloc projects. (note: cocomo ii, or coonstructive coost model ii, is a software cost, effort, and schedule estimation model.) 67the challenges relating to assurance were highlighted by several briefers to the committee. in addition, this issue is a core concern in dsb, report of the defense science board task force on mission impact of foreign influence on dod software, office of the undersecretary of defense for acquisition, technology, and logistics, washington, d.c., september 2007, pp. 3038. the 2007 nrc report software for dependable systems also addressed the issue of testing and noted that ﬁtesting. . . will not in general suffice, because even the largest test suites typically used will not exercise enough paths to provide evidence that the software is correct nor will it have sufficient statistical significance for the levels of confidence usually desired.ﬂ (p. 13)in balancing agility and discipline (addisonwesley, 2004), b. boehm and r. turner provide an analysis of the cocomo ii architecture and risk resolution scale factor, indicating that the increase in rework due to poor architecture and risk resolution is roughly 18 percent for typical 10ksloc (ksloc stands for thousand software lines of code) projects and roughly 91 percent for typical 10,000ksloc projects. this analysis suggests that improvements are needed in upfront areas as well as in testing, as well as supporting the importance of architecture research, especially for ultralarge systems.68for example, the firstclass encapsulation in languages such as java, c#, and ada95 permits much more effective analysis and inspection than the fullaccess model of the c language, another example is development tools: the slam model checking tool used at microsoft, for example, checks whether device driver code is consistent with a set of finitestate models that describe protocol requirements for the windows device driver api. this checker eliminated the cause of most of the ﬁblue screenﬂ failures that were so evident in the 1990s. 20preliminary observations on dod software research needs and priorities: a letter reportcopyright national academy of sciences. all rights reserved.assurance is becoming more important across society for many reasons, including the increasingly critical role of software in national security systems, infrastructural systems, core financial systems, health care, utilities, transportation, mobile devices, and other sectors. the challenges in these sectors are diverse, but there are nonetheless common technical themes that can be addressed through a wellmanaged research program that addresses scalable techniques for error prevention and for evaluation and assurance and that also addresses opportunities to improve core software engineering technologies and practices that range from programming languages and frameworks to development tools and process and architectural principles. an important aspect of tool capability is the development of precise engineering models that represent intermediate steps from requirements to software code. these models can express key aspects or perspectives on an evolving system and can serve as links in a chain of evidence that creates traceability between requirements and implementation. modern software engineering tools can assist in assuring consistency between models and implementations and also consistency among various kinds of models. this represents a significant shift from earlier techniques, where models were informal and toolassisted consistency management was infeasible. software technology continues to evolve rapidlyšand dod, like other technology users who have leading demand, can be an active participant in fostering advances in the technology that will enable its needs to be better met. such participation will likely include significant dod involvement with, and encouragement of, research that addresses issues of unprecedented scale and quality assurance. an important consideration in the development of such a research program, is that, in addition to the progress in achieving scalable technical approaches, there are also some developments in the operating environment that exacerbate the difficulties. one of these is the increasing complexity and interconnection of systems, as noted in the discussion on architecture. it is even more essential that the designs for these new ultralarge systems are framed with assurance considerations in mind. that is, assurability needs to be addressed at the earliest stages of the life cycle. another source of challenge is composability, resulting from the success of frameworks, the emerging serviceoriented approaches, interoperation infrastructure, and other means by which large systems can be built from separately developed components.69 these successes highlight the importance of developing software evaluation techniques that can support some degree of composabilityšthe ability to achieve a systemlevel assurance on the basis of assurances achieved separately for separate components, including cots black box components.70another source of challenge is the increasing success in carrying out large software development projects with teams in geographically dispersed locations. an important specific case of this phenomenon is global outsourcing, with various development and other software engineering tasks allocated to locations around the globe that can offer lower costs, greater expertise, or more timely and flexible access to available developers. another important specific case is opensource software development. this phenomenon suffers from much misunderstanding but in any case would not exist without the technology and practices that support wellorganized, but highly distributed development projects. regardless, the new capabilities for global development and even distributed development within an organization heighten the importance of addressing the assurance challenges related to composability. these capabilities also heighten the importance of developing techniques for robust architecture concepts supported by api designs that support ﬁassurabilityﬂ of the separately developed components.  69for composability to work well, components may have to be designed to be reusable. this generally means added attention to the design of software interfaces that incorporate an appropriate level of generality and robustness. thus, costeffective development of reusable components is a related challenge. 70this issue of assurance for cots software components is beyond the scope of this letter report. the subject has been taken up in a number of studies (including dsb™s 2007 report of the defense science board task force on mission impact of foreign influence on dod software) and most recently by the nsa in its forthcoming cots strategy proposal. 21preliminary observations on dod software research needs and priorities: a letter reportcopyright national academy of sciences. all rights reserved.with respect to composability and geographic dispersion, there is a theme of ﬁcomponent acceptance evaluation.ﬂ this phrase may suggest an afterthefact approach whereby components are developed and later evaluated.an approach that involves ﬁdesign for assurabilityﬂ and that includes active effort by software component producers to create a body of evidence that can effectively support an efficient evaluation process may be beneficial in such circumstances. thus, for example, an operational test and evaluation (ot&e) organization could initiate collaboration with system program managers early in the process to assist in achieving designs, processes, and implementations that can support efficient and effective operational test and evaluation.71from requirements to criteria unlike many organizations that rely deeply on software, dod must often create systems whose requirements and architecture are relatively less precedented than systems in other sectors. the lack of precedent creates engineering risk because it is difficult to predict the downstream consequences of particular early decisions on requirements or architecture. with precedented systems, there is greater ability to predict on the basis of experience in the form of both informal anecdote and analytic models. why does dod need to break away from precedent? the rationale is clear: if the new systems concepts and architectural innovations are successful, then dod will be more effective in meeting its particular mission requirements related to the capability of defense systems and the often challenging characteristics of the operating environment for the software that is developed. in business terms, the added engineering risk is balanced by the potential for increased value. the opportunity for researchers, therefore, is to assist dod in reducing engineering risk without compromising the potential value gained in the form of systems capability, flexibility, interoperation, and so on. there are many different kinds of interventions in the process that might shift the balance more toward value. one example is techniques to support early validation of choices made during requirements engineering. in oldstyle acquisition processes, the operational consequences of a particular decision regarding requirements may not be understood until years after the decision was made, coming to light, for example, during an operational test and evaluation process. modern acquisition processes, by contrast, can incorporate storyboarding and prototyping, for example, to achieve an early validation of potential requirements and associated architectural commitments regarding the structure of the humanœsystem interaction.72 this affords early opportunity to adjust requirements in response to early feedback from key stakeholders. it may also be true that the models and simulations used to connect requirements to the eventual software systemšall during its developmentšcan be used to drive out the bad elements in stated requirements (often derived from naïve overspecification) earlier in the acquisition process.one of the challenges of this early validation and requirements adjustment approach is measurement of progress. how can developing and discarding a prototype, for example, be counted as  71it is important to note, however, that all components have properties that are not defined as part of their interface (information hiding). this leads to a situation where, in practice, component providers argue that they can change anything not defined as part of the interface, while component users over time become to depend on some of these undefined aspects, making them a de facto part of the interface. this is a challenge that must also be addressed when evaluating components and generating the body of evidence to support the evaluation. r walker and g murphy refer to this implicit context as ﬁextraneous embedded knowledgeﬂ (r. walker and g. murphy, ﬁimplicit context: easing software evolution and reuse,ﬂ proceedings of the 8th acm sigsoft international symposium on foundations of software engineering: twentyfirst century applications, acm (association for computing machinery), new york, n.y., 2000). see also d. garlan, r. allen, and j. ockerbloom, ﬁarchitectural mismatch or why it™s hard to build systems out of existing parts,ﬂ proceedings of the 17th internationalconference on software engineering, may 1995, pp. 179185. available athttp://citeseerx.ist.psu.edu/viewdoc/ summary?doi=10.1.1.48.3774. accessed april 23, 2008. 72see nrc, humansystem integration in the systems development process, the national academies press, washington, d.c., 2007. 22preliminary observations on dod software research needs and priorities: a letter reportcopyright national academy of sciences. all rights reserved.progress? from an engineering perspective the value can be understood: it is the extent to which the prototype serves to reduce the uncertainty associated with particular engineering commitments. the question is, how can this, from the standpoint of objective measures of progress such as earned value management systems,73 be accomplished easily on a routine basis? the more general issue is, what technical steps can be taken to make iterative development more routine? for iterative development, the key to successful application of the spiral development model74 is an identification and prioritization of ﬁrisksﬂ in the sense of engineering risks.75iterations in requirements, design, and, indeed, diverse aspects of implementation can be conducted, often with significant concurrency, with each iteration addressing some subset of the overall set of engineering risks. for example, in humancentered systems, it may be prudent to address the humanœsystem interaction design in early iterations, since the outcomes of those iterations could affect architectural decisions later. one might expect the result of an iteration to be some segment of code to be delivered as part of a deliverable artifact. but in the prototyping example above, this is not the case. instead, the result can be considered as evidence, which is constructed to support a particular claim concerning a design commitment. in this approach, evaluation of progress toward milestones can be based on an accumulation of evidence of various kinds to support the soundness of various design decisions.this idea also applies to the identification of specific requirements. starting, for example, with a general definition of the scope of a system, iterations involving various stakeholders can lead to evidence supporting particular requirements. this may be in the form of more restricted definitions of scope, or scenarios and use cases, or identification of domain objects and relationships, or architectural commitments, and so on. from the standpoint of systems management, this iterative approach could be used to advance the point in the process at which the highorder engineering risks are addressed and to reward development teams that can resolve these risks early through evidencebased early validation of key design commitments. this approach shifts the focus from traditional ordering of requirements, architecture, design, implementation, and so on to an ordering based on engineering risk. this enables, for example, a program manager to focus in early stages on architectural feasibility, if that is the focus of risk, or on humanœsystems interface, if that is the focus of risk. thus a systems development effort could start by defining the scope of the mission and include in its iterative process the refinement of requirements concurrently with architectural risk reduction and commitment. this approach could have some value for ultrascale systems, which are often in a constant state of development, in the sense that they are constantly evolving. this is not an unusual scenariošmost successful commercial software products, from desktop productivity applications to infrastructural components such as databases and application servers, are developed in what amounts to an endless series of iterations of scoping, feature definition, design, implementation, and release, all followed by feedback in support of defining priorities for the next release cycle.76 with ultrascale systems a similar kind of  73earned value management is a project management practice used across dod as well as in the federal government and the commercial sector. according to dod, it is ﬁthe use of an integrated management system that coordinates the works scope, schedule, and cost goals of a program or contract, and objectively measures progress toward these goals.ﬂ see http://www.acq.osd.mil/pm/faqs/faq.htm. accessed march 3, 2008. 74see, for example, barry boehm, ﬁspiral development: experience, principles, and refinements,ﬂ wilfred j. hansen, ed., cmu/sei2000sr008, july 2000. aavailable at http://www.sei.cmu.edu/pub/documents/00.reports/pdf/00sr008.pdf. accessed february 28, 2008. 75engineering risk, roughly, is the product of the probability of an unexpected outcome and the consequences of that particular outcome. or, more generally, it is the sum of a set of such terms for various possible outcomes.76to be sure, many largescale commercial systems succeed because they are designed to be selfhealing or fault resistantšthey do not have to work flawlessly 100 percent of the time, so long as critical functions work correctly. for software, these faults include design faults as well as the transient or intermittent faults affecting attached physical components in a system. thus, software can have varying levels of criticality depending on the context in 23preliminary observations on dod software research needs and priorities: a letter reportcopyright national academy of sciences. all rights reserved.endless iteration is possible, except that the components of such systems are likely all evolving concurrently. in these circumstances other techniques are needed. rather than trying to refine and reduce the risk in any given area, research is needed into design precepts that support adaptivity77 and agility to allow ultrascale systems to evolve. the research questions should be evident from the foregoing. what are the particular kinds of evidence that might be produced? how does this evidence relate to the modeling formalisms that are important for architecture, design, and assurance (as noted in the previous two area descriptions)? how can iterative processes be defined so they are feasibly executed for mainstream defense software development? how must these processes be adapted for the constant development cycles of ultrascale (or systemofsystems) programs? this may appear to be a management topic, but there is in fact substantial technical challenge in the identification and evaluation of the particular kinds of models that can be used to frame the evidence that is created. research topics in the context of the overall study the foregoing overview of three research topics provides the committee™s interim feedback to dod on research that holds promise for improving the producibility of softwareintensive systems. these and additional research areas that emerge from committee deliberations will be addressed in more depth in the final report for this study. although a clear message in this letter report is that additional, focused research is necessary and has the potential to alleviate many difficult problems, merely funding additional research will not completely solve the software producibility problem for dod. a multifaceted, carefully managed, ongoing approach is necessary. this is because software technology, unlike other engineering disciplines rooted in physical artifacts, is essentially unbounded. indeed, it is characteristic of both software technology and defense program requirements that it impossible to completely solve this problem or even fully routinize the core value creation in software development. we can, however, and will (with proper support) make genuine progress. continuous progress is in fact a necessity given the growing need for software, the value contribution of software, and thus the demands placed on expertise and experience in software producibility. through this growth cycle there will likely always be some critical dimensions of software engineering that appear to be primary sources of cost and risk. understanding the nature of progress in software technology and producibility, as contrasted with progress in other engineering disciplines, is essential to create appropriate expectations for how these risks can be managed and, more generally, how the risk/value balance can be addressed as requirements and technology continue to evolve.as part of an overall research program, the issues that the dod faces must be addressed in the short to medium term as well. these intermediateterm results are a risk mitigator for the overall research investment, and the feedback from those results can provide midcourse guidance for the longerterm work. the issues that research funding alone cannot solve include institutional as well as technical problems, such as industry incentive structures, the quality and quantity of technical talent within dod and its software industrial base, and development practices. addressing these issues, as well as issues of research management and strategy, may have as much or more impact as specific technical breakthroughs in a research project.particularly with respect to industry, a complementary approach that adds developmentstage investments for industrialbase and systemofsystems toolsets, knowledge, and capabilities would be beneficial. these and related considerations will be covered in the committee™s final report. which it operates. 77see nrc, toward a safer and more secure cyberspace, washington, d.c., the national academies press, 2007. the report has a focus on security research, looking at security holistically and including research to address adaptability and resilience.24preliminary observations on dod software research needs and priorities: a letter reportcopyright national academy of sciences. all rights reserved.appendix a members of the committee onadvancing softwareintensive systems producibility william scherlis, carnegie mellon university, chairrobert behler, mitre corporation barry w. boehm, university of southern california lori clarke, university of massachusetts at amherst michael cusumano, massachusetts institute of technology mary ann davidson, oracle corporation larry druffel, software engineering institute russell frew, lockheed martin james larus, microsoft corporation greg morrisett, harvard university walker royce, ibm doug c. schmidt, vanderbilt university john p. stenbit, independent consultant kevin j. sullivan, university of virginia stafflynette i. millett, study director and senior program officer joan d. winston, program officer margaret marsh huynh, senior program assistant (until november 2007) morgan motto, senior program assistant (beginning december 2007) 25preliminary observations on dod software research needs and priorities: a letter reportcopyright national academy of sciences. all rights reserved.appendix bbriefers to the committee on advancing softwareintensive systems producibility september2728,2006,firstcommitteemeeting annmarie bunts, lockheed martin systems integration grady campbell, software engineering institute larry druffel, scra (retired) robert gold, office of the deputy under secretary for science & technology/information systems ronald t. kadish, booz allen hamilton james larus, microsoft research robert nesbit, mitre center for integrated intelligence systems linda northrop, software engineering institute tom rodgers, lockheed martin walker royce, ibm andre van tilborg, office of the deputy under secretary for science & technology/information  systemsjanuary17,2007,workshoponuncertaintyatscalecynthia andres, three rivers institute kristen j. baldwin, office of the under secretary of defense, acquisition,  technology, and logistics kent beck, three rivers institute kris britton, national security agency, center for assured software mary ann davidson, oracle corporation joe jarzombek, department of homeland security patrick lardieri, lockheed martin gary mcgraw, cigital, inc. richard w. selby, northrop grumman alfred spector,* google, inc. john vu, boeing werner vogels, amazon.com april24,2007,thirdcommitteemeetingthomas blann, office of the director of operational test and evaluation  *as of november 2007. at the time of the workshop, dr. spector was an independent consultant. 26preliminary observations on dod software research needs and priorities: a letter reportcopyright national academy of sciences. all rights reserved.appendix c reviewers for this letter report this letter report has been reviewed in draft form by individuals chosen for their diverse perspectives and technical expertise, in accordance with procedures approved by the national research council™s (nrc™s) report review committee. the purpose of this independent review is to provide candid and critical comments that will assist the institution in making its published letter report as sound as possible and to ensure that the letter report meets institutional standards for objectivity, evidence, and responsiveness to the study charge. the review comments and draft manuscript remain confidential to protect the integrity of the deliberative process. we wish to thank the following individuals for their review of this report: john m. gilligan, sra international anita k. jones, university of virginia butler lampson, microsoft corporation alan maccormack, harvard university david notkin, university of washington harry d. raduege, jr., deloitte center for network innovation alfred z. spector, google, inc. although the reviewers listed above have provided many constructive comments and suggestions, they were not asked to endorse the conclusions or recommendations, nor did they see the final draft of the letter report before its release. the review of this letter report was monitored by william h. press, los alamos national laboratory. appointed by the nrc, he was responsible for making certain that an independent examination of this letter report was carried out in accordance with institutional procedures and that all review comments were carefully considered. responsibility for the final content of this letter report rests entirely with the authoring committee and the institution. 27preliminary observations on dod software research needs and priorities: a letter reportcopyright national academy of sciences. all rights reserved.28
detailsdistribution, posting, or copying of this pdf is strictly prohibited without written permission of the national academies press. (request permission) unless otherwise indicated, all materials in this pdf are copyrighted by the national academy of sciences.copyright © national academy of sciences. all rights reserved.the national academies pressvisit the national academies press at nap.edu and login or register to get:œ œ 10% off the price of print titlesœ special offers and discountsget this bookfind related titlesthis pdf is available at sharecontributorshttp://nap.edu/12979critical code: software producibility for defense160 pages | 8.5 x 11 | paperbackisbn 9780309159487 | doi 10.17226/12979committee for advancing softwareintensive systems producibility; computerscience and telecommunications board; division on engineering and physicalsciences; national research councilcritical code: software producibility for defensecopyright national academy of sciences. all rights reserved.committee for advancing softwareintensive systems producibility computer science and telecommunications boarddivision on engineering and physical sciencescritical code: software producibility for defensecopyright national academy of sciences. all rights reserved.the national academies press 500 fifth street, n.w. washington, dc 20001notice: the project that is the subject of this report was approved by the governing board of the national research council, whose members are drawn from the councils of the national academy of sciences, the national academy of engineering, and the institute of medicine. the members of the committee responsible for the report were chosen for their special competences and with regard for appropriate balance.support for this project was provided by the office of the secretary of defense, department of defense, with assistance from the national science foundation under sponsor award number cns0541636 and by the office of naval research under sponsor award number n000140410736. any opinions expressed in this material are those of the authors and do not necessarily reflect the views of the agencies and organizations that provided support for the project.international standard book number13: 9780309159487 international standard book number10: 0309159482 additional copies of this report are available from the national academies press, 500 fifth street, n.w., lockbox 285, washington, dc 20055; (800) 6246242 or (202) 3343313 (in the washington metropolitan area); internet, http://www.nap.edu.copyright 2010 by the national academy of sciences. all rights reserved.printed in the united states of americacritical code: software producibility for defensecopyright national academy of sciences. all rights reserved.the national academy of sciences is a private, nonprofit, selfperpetuating society of distinguished scholars engaged in scientific and engineering research, dedicated to the furtherance of science and technology and to their use for the general welfare. upon the authority of the charter granted to it by the congress in 1863, the academy has a mandate that requires it to advise the federal government on scientific and technical matters. dr. ralph j. cicerone is president of the national academy of sciences.the national academy of engineering was established in 1964, under the charter of the national academy of sciences, as a parallel organization of outstanding engineers. it is autonomous in its administration and in the selection of its members, sharing with the national academy of sciences the responsibility for advising the federal government. the national academy of engineering also sponsors engineering programs aimed at meeting national needs, encourages education and research, and recognizes the superior achievements of engineers. dr. charles m. vest is president of the national academy of engineering.the institute of medicine was established in 1970 by the national academy of sciences to secure the services of eminent members of appropriate professions in the examination of policy matters pertaining to the health of the public. the institute acts under the responsibility given to the national academy of sciences by its congressional charter to be an adviser to the federal government and, upon its own initiative, to identify issues of medical care, research, and education. dr. harvey v. fineberg is president of the institute of medicine.the national research council was organized by the national academy of sciences in 1916 to associate the broad community of science and technology with the academy™s purposes of furthering knowledge and advising the federal government. functioning in accordance with general policies determined by the academy, the council has become the principal operating agency of both the national academy of sciences and the national academy of engineering in providing services to the government, the public, and the scientific and engineering communities. the council is administered jointly by both academies and the institute of medicine. dr. ralph j. cicerone and dr. charles m. vest are chair and vice chair, respectively, of the national research council.www.nationalacademies.orgcritical code: software producibility for defensecopyright national academy of sciences. all rights reserved.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.vcommittee for advancing softwareintensive systems producibilitywilliam l. scherlis, carnegie mellon university, chairrobert f. behler, the mitre corporationbarry w. boehm, university of southern californialori a. clarke, university of massachusetts, amherstmichael a. cusumano, massachusetts institute of technologymary ann davidson, oracle corporationlarry druffel, software engineering instituterussell frew, lockheed martinjames larus, microsoft corporationgreg morrisett, harvard universitywalker royce, ibmdouglas c. schmidt, carnegie mellon universityjohn p. stenbit, independent consultantkevin j. sullivan, university of virginiastaffjon eisenberg, director, cstb lynette i. millett, senior program officerjoan d. winston, program officer (until may 2008)enita a. williams, associate program officereric whitaker, senior program assistantcritical code: software producibility for defensecopyright national academy of sciences. all rights reserved.vicomputer science and telecommunications boardrobert f. sproull, oracle corporation, chair prithviraj banerjee, hewlettpackard company steven m. bellovin, columbia university seymour e. goodman, georgia institute of technology john e. kelly iii, ibmjon m. kleinberg, cornell university robert kraut, carnegie mellon university susan landau, radcliffe institute for advanced study david e. liddle, us venture partners william h. press, university of texas, austin prabhakar raghavan, yahoo! labs david e. shaw, d.e. shaw research alfred z. spector, google, inc. john a. swainson, silver lakepeter szolovits, massachusetts institute of technology peter j. weinberger, google, inc. ernest j. wilson, university of southern californiastaffjon eisenberg, director virginia bacon talati, associate program officershenae bradley, senior program assistantrenee hawkins, financial and administrative manager herbert s. lin, chief scientistemily ann meyer, program officer lynette i. millett, senior program officer eric whitaker, senior program assistantenita a. williams, associate program officerfor more information on cstb, see its web site at http://www.cstb.org, write to cstb, national research council, 500 fifth street, n.w., washington, dc 20001, call (202) 3342605, or email the cstb at cstb@nas.edu.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.viiprefacethe committee for advancing softwareintensive systems producibility was appointed by the national research council (nrc) and convened under the auspices of the nrc™s computer science and telecommunications board (cstb) to assess the nature of the national investment in software research and, in particular, to consider ways to revitalize the knowledge base needed to design, produce, and employ softwareintensive systems for tomorrow™s defense needs. the statement of task is provided in box p.1.this report contemplates department of defense (dod) needs and priorities for software research and suggests a research agenda and related actions. this is the final report of the committee, and it builds on two prior reportsšsummary of a workshop on software intensive systems and uncertainty at scale1 and preliminary observations on dod software research needs and priorities.2 this report draws on the briefings listed in appendix a.the committee considered four sets of questions: ł to what extent is software capability significant for the dod? is it becoming more or less significant and strategic in systems development? ł will the advances in software producibility needed by the dod emerge unaided from industry at a pace sufficient to meet evolving defense requirements? ł what are the opportunities for the dod to make more effective use of emerging technology to improve software capability and software producibility?ł in which technology areas should the dod invest in research to advance defense software capability and producibility?chapter 1 of this report addresses the first two of these questions. it discusses the essential and evolving role of software in defense systems and the distinctive and unusual characteristics of the software 1  national research council (nrc), 2007, summary of a workshop on software intensive systems and uncertainty at scale, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=11936. last accessed august 10, 2010.2  nrc, 2008, preliminary observations on dod software research needs and priorities: a letter report, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=12172. last accessed august 10, 2010critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.viii prefaceused in such systems. the chapter also contemplates the extent to which the dod can rely on industry to innovate at a rate fast enough to allow it to fully meet future defense software requirements. chapters 2, 3, and 4 of this report focus on three principal clusters of challenges to software producibility wherein the dod has particularly unusual needs or ﬁleading demand.ﬂ these chapters address the third question presented in the statement of task and describe process management for innovative software systems development (chapter 2), architectural leadership for largescale softwareintensive systems (chapter 3), and the need to take a strategic approach to assurance (chapter 4). these chapters, taken together, address the core features of what we mean by software producibilityšthe capacity to design, produce, assure, and evolve softwareintensive systems in a predictable manner while effectively managing risk, cost, schedule, quality, and complexity.chapter 5 discusses the value of research in enhancing software producibility for the dod. it addresses the role of academic research, the synergy between industry and academic research, and the impact of past investments. it then tackles the fourth question and offers a sevenpart agenda for advancing dod software capability: architecture, assurance, process and economic models, requirements, language and tools, cyberphysical systems, and humansystems interaction.the committee thanks all those who participated in its workshops and contributed to its deliberations (appendix a). the committee would also like to thank the computer science and telecommunications board staff, including enita williams, jon eisenberg, lynette millett, joan winston, and eric whitaker, who have ably managed the project and coordinated the team effort through three separate reports. enita williams and jon eisenberg deserve special thanks and appreciation for their heroic effort in the preparation and editing of this final report, which would not have been possible without their highly capable support and collaboration.william l. scherlis, chaircommittee for advancing softwareintensive systems producibilitybox p.1 statement of taskthis study will bring together academic and industry software systems researchers, software and software tool vendors (suppliers), and systems integrators who comprise the community of skills required for future successes in complex softwareintensive systems required by the department of defense (dod). they will:(1) assess the emerging situation with respect to the national investment in relevant software research, the present state of and future requirements for tools for software production, testing and maintenance, and the adequacy of human resources;(2) examine the needs, relationships, and interdependencies expected of future dod software research, development and maintenance needs, and consider what advances are needed for continuous improvements in the design, production, and evolution of dod softwareintensive systems;(3) make recommendations to responsible agency, executive branch, and legislative officials, and to the software technical community, about how to improve the present state of affairs and achieve future goals.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.ixacknowledgment of reviewersthis report has been reviewed in draft form by individuals chosen for their diverse perspectives and technical expertise, in accordance with procedures approved by the national research council™s (nrc™s) report review committee. the purpose of this independent review is to provide candid and critical comments that will assist the institution in making its published report as sound as possible and to ensure that the report meets institutional standards for objectivity, evidence, and responsiveness to the study charge. the review comments and draft manuscript remain confidential to protect the integrity of the deliberative process. we wish to thank the following individuals for their review of this report:rick buskens, lockheed martin advanced technology laboratories grady campbell, software engineering institutewilliam campbell, bae systemsjohn gilligan, gilligan group william griswold, university of california, san diegoanita jones, university of virginiaannette krygiel, independent consultantsteve lipner, microsoft, inc.david notkin, university of washingtonfrank perry, saicalfred z. spector, google, inc.daniel c. sturman, google, inc.john swainson, ca, inc.mark n. wegman, ibm although the reviewers listed above have provided many constructive comments and suggestions, they were not asked to endorse the conclusions or recommendations, nor did they see the final draft of the report before its release. the review of this report was overseen by william h. press, university of texas at austin. appointed by the nrc, he was responsible for making certain that an independent examination of this report was carried out in accordance with institutional procedures and that all review comments were carefully considered. responsibility for the final content of this report rests entirely with the authoring committee and the institution.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.xicontentssummary 1 1  recognize the pivotal role of dod software innovation 17 the role of software in defense, 17 precedent and innovation in software, 22 the role of the dod in addressing its software needs, 35 the necessity of innovation in software, 39 2 accept uncertainty: attack risks and exploit opportunities 45 innovation, precedent, and dynamism, 45 managing risk at scale, 47 managing requirements and architecture, 55 estimations, contracting, and iterative development, 57 realizing dod software benefits via dod instruction 5000.02 and  evolutionary acquisition, 60 intrinsic dod software expertisešbeing a smart customer, 61 3 assert dod architectural leadership for innovative systems 68 software architecture and its critical role in producibility, 68 software architecture in industry, 72 architectural problems as a source of software problems, 73 the dod experience with architecturebased development, 74 supporting technology and research needs, 78 strengthening dod capabilities with respect to architecture, 81  4 adopt a strategic approach to software assurance 86 software assurance and evidence, 86 software assurance fundamentals, 98 challenges for defense and similar complex systems, 102 two scenarios for software assurance, 105 critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.xii contents5 reinvigorate dod software engineering research 112 the role of academic research in software producibility, 113  investing in research in software producibility, 117 areas for future research investment, 122 appendixesa briefers to the committee 141b biosketches of members of the committee 143critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.1summarythe national research council™s committee for advancing softwareintensive systems producibility was commissioned by the office of the secretary of defense (osd) to examine the nature of the national investment in software research and ways to revitalize the knowledge base needed to design, produce, and employ softwareintensive systems for tomorrow™s defense needs. this report contemplates department of defense needs and priorities (chapter 1) for software producibilityšthat is, the capacity to design, produce, assure, and evolve innovative softwareintensive systems in a predictable manner while effectively managing risk, cost, schedule, and complexity. it suggests feasible actions related to software process and measurement (chapter 2), architecture (chapter 3), and assurance (chapter 4), and it suggests a research agenda (chapter 5) that focuses on issues critical to department of defense (dod) software capability. box s.1 summarizes several of the key messages of the findings and recommendations by showing how they address eight ﬁmythsﬂ regarding software producibility. the key findings and recommendations of the committee are presented in this summary, and additional findings and recommendations are offered in subsequent chapters. a complete set is presented in box s.2.this final project report builds on two prior reportsšthe discussion of technical and organizational issues in summary of a workshop on software intensive systems and uncertainty at scale1 and a subsequent letter report focused on the rationale for investment in software research.21  national research council (nrc), 2007, summary of a workshop on software intensive systems and uncertainty at scale, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=11936. last accessed august 10, 2010.2  nrc, 2008, preliminary observations on dod software research needs and priorities: a letter report, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=12172. last accessed august 10, 2010 critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.2 critical code: software producibility for defense1. recognize the pivotal role of dod software innovationthe continued increase in the dod™s dependency on software is well documented by the defense science board (dsb) and in multiple national academies reports.3,4,5,6 this increase amounts to an order of magnitude of lines of software code every decade, and it is a natural consequence of the distinctive advantages of software as an engineering medium. software is uniquely unbounded and flexible, can 3  defense science board (dsb), september 2007, report of the defense science board task force on mission impact of foreign influence on dod software, washington, dc: office of the under secretary of defense for acquisition, technology, and logistics. available online at http://stinet.dtic.mil/oai/oai?&verb=getrecord&metadataprefix=html&identifier=ada473661. last accessed august 20, 2010. 4  dsb, november 2000, report of the defense science board task force on defense software, washington, dc: office of the under secretary of defense for acquisition, technology, and logistics. available online at http://oai.dtic.mil/oai/oai?verb=getrecord&metadataprefix=html&identifier=ada385923. last accessed august 20, 2010.5  national research council (nrc), 2010, achieving effective acquisition of information technology in the department of defense, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=12823. last accessed august 20, 2010.6  nrc, 1999, realizing the potential of c4i: fundamental challenges,washington, dc: national academy press. available online at http://www.nap.edu/catalog.php?recordid=6457. last accessed august 20, 2010.box s.1 eight myths about defense software producibility1. the dod™s software producibility challenges are predominantly challenges of management and process but not of technology. (see findings 11, 13, 14, 25, 42, 52 and recommendations 11, 42, 51.)2. the dod and its contractors can rely on industry to innovate at a rate fast enough to solve the dod™s hard technical problems and to stay ahead of its adversaries.(see findings 13, 14 and recommendation 11.)3. software technology is approaching a plateau, which diminishes the need to invest in technology innovation.(see findings 15, 52 and recommendations 42, 51.)4. the software research community is doing potentially relevant theoretical work, but it has not led to advances of compelling importance to the dod. (see finding 51.)5. we have not yet developed effective mechanisms to mitigate the risks, particularly those related to scale and adoptability, associated with the transition to practice of innovative softwaredevelopment technologies. (see findings 32, 34, 35, 42, 43 and recommendations 21, 34, 42, 43.)6. we will never create perfectly reliable and secure software, so we should focus primarily on provenanceštrusted sourcesšrather than attempting to achieve assurance through improvements in practices and tools for evaluating artifacts directly.(see findings 41, 42 and recommendations 41, 43.)7. there is sufficient software research already underway, sponsored primarily by nsf and other basic science agencies, to meet the dod™s software needs. (see recommendations 11, 51.)8. earned value management approaches based on code accumulation are a sufficient basis for managing software development programs, including incremental iterative development. (see findings 23, 24 and recommendations 21, 22.) critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.summary 3be delivered and upgraded electronically and remotely, and has the potential to be rapidly adapted to changing threats, operating environments, and platform technologies. because it is unconstrained by traditional physical engineering limitations, the principal limits on what we can accomplish with software derive from human intellectual capacity to conceptualize and understand systems, to build tools to develop and manage them, and to provide assurance regarding critical functional and quality attributes. the same reports also indicate that the dod would benefit from strategic steps to improve its ability to design, develop, and assure complex software. software not only is expanding in use but also is shifting into a more strategic and fundamental role in diverse systems. a vital question is how the dod can ensure that it will be able to meet its software needs now and into the future. finding 11: software has become essential to a vast range of military system capabilities and operations, and its role is continuing to deepen and broaden, including interlinking diverse system elements. this creates both benefits and risks. compounding these issues are the growing size, complexity, and geography of the supply chain structure for major software systems. this is a consequence of two powerful forcesšthe advance of technology that has enabled greater software modularization, and the globalization of software development activity. although the united states continues to retain innovation leadership in software areas important to the dod, there are factors that could cause the loss of that leadership. some observers have speculated that software and information technology generally are reaching a plateau of capability and performance. this is a false and dangerous speculationšthe capability and the complexity of hardware7 and software systems are both rising at an accelerating rate. finding 15: it is dangerous to conclude that we are reaching a plateau in capability and technology for software producibility. to avoid loss of leadership, the dod will need to become more fully engaged in the innovative processes related to software producibility.a key question addressed by the committee is to what extent the dod, without providing any explicit r&d stimulus, can rely on industryšspecifically the domestic defense industrial base and supporting vendorsšto produce software innovations in areas of defense significance at a rate fast enough to allow the dod to fully meet software requirements and remain ahead of potential adversaries. finding the answer to this question is made more urgent by the expected continued rapid evolution of software capability worldwide. a loss of leadership could threaten the ability of the dod not only to manifest worldleading capability, but also to achieve adequate levels of assurance for the diversely sourced software it intends to deploy. it will thus be essential for the dod to reengage directly in the innovation process if it is to retain this necessary leadership. (see also recommendation 51.) finding 14: the dod™s needs will not be sufficiently met through a combination of demandpull from the military and technologypush from the defense or commercial information technology sectors. the dod cannot rely on industry alone to address the longterm software challenges particular to defense.defense requirements for software are in many respects similar to requirements in other sectors. but there are important areas where the dod must push the envelope beyond mainstream capability 7  moore™s law is an informal predictive model created by gordon moore in 1965 for the number of transistors on integrated circuit chips. for decades, there has been a close correlation of transistor count with both processor clock speeds and overall computing capacity. recently, due to a combination of factors, clock speeds have leveled off or even diminished, while the growth in generalpurpose computing capacity has been achieved through the provisioning of multiple processors (called ﬁcoresﬂ). this has created an added challenge related to concurrency for software developers, as elaborated in chapters 4 and 5.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.4 critical code: software producibility for defensein order to meet its mission needs. these areas of ﬁleading demandﬂ include, for example, software assurance in the presence of highly sophisticated adversaries, architectural innovation and complexity, criticality with respect to safety, overall complexity and scale, and the arm™slength relationship that the dod has with its development teamsšwhere mission stakeholders are often required to engage with development teams only through a legal and contractual interface. recommendation 11: the dod, through its director of research and engineering (ddr&e), should regularly undertake an identification of areas of technological need related to software producibility where the dod has ﬁleading demandﬂ and where accelerated progress is needed to support the defense mission.2. accept uncertainty: attack risks and exploit opportunitiesthe management of innovative software development is largely a process of managing risks. experience shows that, in the absence of advanced process models, there is a correlation between the degree of precedent and routinization, on the one hand, and the ability to deliver results with predictable cost, schedule, and success in acceptance evaluation, on the other. with regard to the precedented elementsšwhose users can benefit, in terms of design costs and risks, from the experience of existing and prior usersšthe dod benefits by adjusting its practices to conform to government and industry conventions, enabling it to exploit a broader array of more mature market offerings. when applied to innovative systems, however, the familiar sequential (ﬁwaterfallﬂ) processes can often lead to costly surprises and increased programmatic risk. that is, what appears to be a ﬁsafeﬂ conservative decision to follow the most basic process is in fact a dangerous decision that can drastically increase programmatic risk and the possibility of total project failure. the largest producibility challenges for the dod, therefore, arise from its need to develop innovative, unprecedented software systems. such efforts at development necessarily build on precedented elements, and the unprecedented aspects may create substantial programmatic risk unless managed effectively. effective management means identifying and mitigating the engineering risks that derive primarily from the innovative elementsšarchitecture, assurance, requirements, design, scale, performance, etc. a wellmanaged incremental and iterative process, supported by appropriate iterative evaluation and measurement approaches, can more reliably lead to successful outcomesšlowering programmatic risk, even when there are significant engineering risks. modern software governance is about managing uncertainty. this means treating project scope, plans, and resources as variables (not frozen baselines) and explicitly managing the variances in these variables until they converge to acceptable levels. this requires honest and wellinformed assessments of engineering risks to effectively trade off cost, schedule, overall programmatic risk, and functionality.when there is substantial softwaremanifest functionality as well as softwarerelated risks, there should be a close coupling of design and process decisions relating to hardware, software, and humansystems integration, with prioritization based on identified criteria.8finding 21: modern practice for innovative software systems at all levels of scale is geared toward incremental identification and mitigation of engineering uncertainties, including requirements uncertainties. for defense software, the challenge is doing so at a larger scale and in ways that are closely linked with an overall systems engineering process. following the practice of other organizations that manage large engineering projects, the dod has 8  fred brooks, 2010, the design of design: essays from a computer scientist, boston: addisonwesley. see also nrc, richard pew and anne mavor, eds., 2007, humansystem integration in the system development process: a new look, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=11893. last accessed august 20, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.summary 5adopted earned value management (evm), which is ﬁa means of determining the financial health of a project by measuring whether the work completed to date is in line with the budget and schedule planning.ﬂ one of the reasons for using evm is to get early warning of potential problems. evm tracks plans, progress, cost, earned value (the planned cost of actual progress), and variances in cost and schedule. the underlying technique is seemingly straightforward, but the application of evm to innovative and unprecedented softwareintensive systems poses challenges. these derive from the choice of evm assessment and measurement strategies. significant improvements are needed in our ability to value the creation of software assets such as validated architecture and design commitments or evidence in support of quality assurances. finding 23: extensions to earned value management models to include evidence of feasibility and to accommodate practices such as timecertain development are necessary conditions to enable successful application of incremental development practices for innovative systems.finding 24: research related to process, measurement, architecture, and assurance can contribute to the improvement of measurement practice in support of both routine management of engineering risks and value assessment as part of earned value management.the committee focuses (in chapter 2) on six areas for improvement in the management of innovative software projects: (1) improved measurement and associated technology, (2) architecture validation using models, simulation, prototyping, etc., (3) program manager training and perceived career risks, (4) accretion of an accessible experience base and other shared resources that can facilitate sound decision making over the long term, (5) acceptable shifts of earlystage emphasis for innovative systems from detailed functional requirements to architecture, scope, and process definition, and (6) the need for flexibility and adaptation in longlived projects. recommendation 21: the dod should take aggressive actions to identify and remove barriers to the broader adoption of incremental development methods, including iterative approaches, staged acquisition, evidencebased systems and software engineering, and related methods that involve explicit acknowledgment and mitigation of engineering risk.an additional difficulty is the lack of a common basis for judging cost estimates. there are wellused metrics for hardware, but a uniform set of standards for measurement in software development is lacking, although there are candidate models.recommendation 22: the dod should take steps to accumulate highquality data regarding project management experience and technology choices that can be used to inform cost estimation models, particularly as they apply to innovative software development projects. it is widely acknowledged, including within the dod, that the department does not have sufficient organic personnel with the software expertise to meet its needs for today™s more softwareintensive programs. this includes the expertise to effectively purchase the larger and less precedented systems as well as the precedented systems for which sensitivity to issues such as the choice of ecosystem is key. the necessary expertise includes understanding of process, architecture, requirements, and assurance, as well as of the trajectories and adoption trends for both the major commercial ecosystems and any involved dodintrinsic software ecosystems. because the dod does not currently have the requisite expertise and talent it needs for effective software producibility and the rapid pace of software development demands ongoing interaction with the field, the dod must engage experts outside of the dod and its primes. the dod should adapt processes to facilitate input from outside experts throughout the systemsengineering lifecycle for softwareintensive systems.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.6 critical code: software producibility for defensefinding 26: the dod has a growing need for software expertise, and it is not able to meet this need through intrinsic resources. nor is it able to fully outsource this requirement to dod primes. the dod needs to be a smart software customer. this need is particularly significant for largescale innovative softwareintensive projects for which there are crosscutting software architectural requirements and validation challenges.3. assert dod architectural leadershipthe increasing complexity and scale of innovative software systems demand that the dod play an active role in the definition of systems and software architecture throughout the project lifecycle. software architecture is conventionally defined as ﬁthe structure or structures of the system, which comprise software components, the externally visible properties of those components, and the relationship among them.ﬂ9 architecture is significant because it represents the earliest and often most important design decisions: those that are the hardest to change and the most critical to get right. architecture is the first design artifact that addresses quality attributes such as performance, modifiability, reliability, security, and safety. although having a wellmatched architecture is not a guarantee of success, software systems that are not based on wellformulated software architectures are, in the committee™s view, more likely to exhibit the kind of software horror stories too often experienced in dod acquisitions with respect to project risk.finding 35: in systems with innovative functional or quality requirements, benefit is derived from an early focus on the most essential architectural commitments and quality attributes, with deferred commitment to specifics of functional characteristics. this approach can reduce the overall uncertainty of the engineering process and yield better outcomes.architectural decision making for any particular software development project is profoundly influenced by precedentšknowledge of related ecosystems, of systems and hardware infrastructure, of available frameworks and libraries, and of previous experience with similar systems and projects. small changes to architectural requirements can open or close opportunities to exploit rich, existing ecosystems, greatly influencing both cost and risk.10,11finding 31: industry leaders attend to software architecture as a firstorder decision, and many follow a productline strategy based on commitment to the most essential common software architectural elements and ecosystem structures.architecture embodies planning for flexibilityšarchitecture commitments effectively define and encapsulate areas where change or diversity is anticipated, or not. software architecture commitments thus enable productline strategies.finding 32: the technology for definition and management of software architecture is sufficiently mature, with widespread adoption in industry. these approaches are ready for adoption by the dod, assuming that a framework of incentives can be created in acquisition and development efforts.the dod experience with longterm software acquisition programs has provided strong evidence for the value of software architecture,12 and there are examples of programs that have followed an archi9  len bass, paul clements, and rick kazman, 2003, software architecture in practice, 2nd ed., boston: addisonwesley.10 dennis m. buede, 2000, the engineering design of systems: models and methods, new york: john wiley & sons, inc., pp. 78, 25.11 barry boehm, ricardo valerdi, and eric honour, 2008, ﬁthe roi of systems engineering: some quantitative results for softwareintensive systems,ﬂ systems engineering 11(3):221234.12 walker e. royce, 1998, software project management: a unified framework, reading, ma: addisonwesley. critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.summary 7tecturedriven acquisition strategy. these illustrate the benefits of pervasive commitment to an architecturedriven approach13,14 š including reduced engineering risk, reduced development and maintenance costs, decreased time to field, increased system agility, and improved system quality. the opportunity exists for the dod to assert leadership across its diverse softwareintensive systems portfolio. it may be difficult to ascertain which kinds of architectural commitments are essential to an innovative projectšat the outset of a project, a small number of wellcrafted ﬁseedﬂ commitments may be sufficient to enable a direction to be set. generally speaking, architecture in the early stages of an innovative project should be the minimum commitment that yields the maximum value with respect to quality attributes and capability to incrementally implement functional capabilities. refinement and elaborationšfurther architectural commitmentš is then undertaken as part of an incremental iterative process. a corollary of this approach is that architecture leadership is best undertaken by individuals engaged directly in the engineering process and is best separate from activities related to ecosystems certification and other standardsrelated policy setting. recommendation 32: this committee reiterates the past defense science board recommendations that the dod follow an architecturedriven acquisition strategy, and, where appropriate, use the software architecture as the basis for a productline approach and for largerscale systems potentially involving multiple lead contractors.recommendation 33: the dod should enhance existing practices to afford better distinctions between precedented portions of systems and innovative portions of systems, wherein architectures are developed both to encapsulate the innovative elements and to afford maximum opportunity to build on experience and existing ecosystems for precedented elements. these overall architectures, and particularly the innovative elements, should be subject to early and continuous validation, especially in systems that have requirements for interoperation.4. adopt a strategic approach to software assuranceone of the great challenges for both defense and civilian systems is software quality assurance. software assurance encompasses reliability, security, robustness, safety, and other qualityrelated attributes as well as functionality and performance. diverse studies suggest that overall software assurance costs account for 30 to 50 percent of total project costs for most software projects.15 despite this cost, current approaches to software assurance, primarily testing and inspection, are generally regarded as 13 mark kasunic, 2004, army strategic software improvement program (assip) survey of army acquisition managers, technical report, carnegie mellon university/software engineering institute (sei), cmu/sei2004tr003. available online at http://www.sei.cmu.edu/library/abstracts/reports/04tr003.cfm. last accessed august 20, 2010.14 peter h. feiler and dionisio de niz, 2008, assip study of realtime safetycritical embedded softwareintensive system, engineering practices, special report, carnegie mellon university/sei, cmu/sei2008sr001. available online at http://www.dtic.mil/cgibin/gettrdoc?location=u2&doc=gettrdoc.pdf&ad=ada480129. last accessed august 20, 2010.15 in ﬁsoftware debugging, testing, and verificationﬂ (ibm systems journal (41)1, 2002), brent t. hailpern and p. santhanam say, ﬁin a typical commercial development organization, the cost of providing this assurance via appropriate debugging, testing, and verification activities can easily range from 50 to 75 percent of the total development cost.ﬂ in estimating software costs (mcgrawhill, 1998), t. capers jones provides a table relating percentage of defects removed vs. percentage of development effort devoted to testing, with data points, including 90 vs. 39, 96 vs. 48, and 99.9 vs. 58. in software cost estimation with cocomo ii (prentice hall, 2000), barry w. boehm, chris abts, a. winsor brown, sunita chulani, bradford k. clark, ellis horowitz, ray madachy,  donald reifer, and bert steece indicate that the cost of test planning and running tests is typically 20 to 30 percent plus rework due to defects discovered. in balancing agility and discipline: a guide for the perplexed (addisonwesley, 2004), barry boehm and richard turner provide an analysis of the cocomo ii architecture and risk resolution scale factor, indicating that the increase in rework due to poor architecture and risk resolution is roughly 18 percent for typical 10ksloc (ksloc stands for thousand software lines of code) projects and roughly 91 percent for typical 10,000ksloc projects. (cocomo ii, or constructive cost model ii, is a software cost, effort, and schedule estimation model.) this analysis suggests that improvements are needed in upfront areas as well as in testing and supporting the importance of architecture research, especially for ultralarge systems.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.8 critical code: software producibility for defenseinadequate. testing, for example, cannot yield assurance for many kinds of failures related to security or nondeterminism.in defense programs, the assurance process, including particularly the use of preventive approaches, is heavily complicated by the armslength relationship that exists between a contractor development team and government stakeholders. additionally, although the dod relies extensively on vendor software and undertakes considerable testing of that software, it also implicitly relies on relationships founded in trust (rather than verification) to assure many quality attributes.16failures in software assurance can be of particularly high consequence for defense systems due to their growing roles in protecting human lives, in war fighting, and in safeguarding national assets. in many life and death situations, optimum performance may not be the proper overriding assurance criterion, but rather the ﬁminimization of maximum regret.ﬂ this is exacerbated by the fact that a fullscale operational test of many capabilities is not feasible, but assurance must nonetheless be achieved. software assurance is a human judgment of fitness for use. for defense systems, there is particular emphasis on addressing hazards related to security, availability and responsiveness, safety, policy adherence, and diverse other attributes, but there are many other quality attributes encompassed by software assurance. in practice, assurance judgments are based on application of a broad range of techniques that include both preventive and evaluative methods and that are applied throughout a software engineering process. it is false to conclude that assurance can be achieved entirely through acceptance evaluation such as achieved through dod™s operational and systems test processes. in particular, it is well understood by software engineers and managers that quality, including security, is not ﬁtested in,ﬂ but rather is ﬁbuilt in.ﬂ but there are great challenges to succeeding both in building in quality (preventive methods) and in assuring that it is there (evaluative methods). from a process perspective, there is overlap between preventive and evaluative methodsšwhen used at the earliest stages in the process, evaluative methods shorten feedback loops and guide development choices.development practices and technologies can profoundly influence the ability to achieve successful and costeffective evaluation outcomes. these development choices range from choices of architecture to choices of programming language, coding style, and associated tooling. one of the great benefits of modern tooling is that a much more comprehensive record of development can be used to facilitate evaluation. software assurance is different from reliability analysis for physical systems. unlike other engineering materials, software does not wear out or suffer transient faults. but it can suffer transient errors, for example, because of concurrency. this is both an obvious and a subtle point. it is obvious in the sense that there is no analog of metal fatigue, rust and oxidation, or other kinds of physical deterioration or environmentally induced change in physical properties. it is subtle because software is often the mechanism of choice for handling such faults in associated hardware. when software delivers bad results, including transient errors, they are due to permanently faulty software design, which must be addressed by changes in the software code.the goal of assurance methods is to ultimately connect the code that is executed with architectural, functional, and quality requirements. although software code is all that is necessary for the software to operate, considerable additional information is needed to effectively support ongoing evolution of the software over its lifespan, including architecture models, designs, test cases, etc. this information supports an incremental process, in which chains of evidence can be created with links among the artifacts being created (and adapted) as the development process proceeds. validation of these traceability links comes from diverse techniques including testing, inspection, analysis, model checking, and simulation. an example of a link is a test case that connects code with a particular expectation regarding behavior at an internal software interface. advancement in research and practice could lead to chains of evidence 16 dsb, september 2007, report of the defense science board task force on mission impact of foreign influence on dod software, washington, dc: office of the under secretary of defense for acquisition, technology, and logistics. available online at http://stinet.dtic.mil/oai/oai?&verb=getrecord&metadataprefix=html&identifier=ada473661. last accessed august 20, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.summary 9that could both support quality claims and protect trade secrets or proprietary technology in components. for example, traceability links can include modeling with respect to various attributes, as well as analyses that link models with each other and with code. these links, in aggregate, can create chains of evidence as noted above.software assurance (and producibility generally) are influenced not only by the extent of this designrelated information but also by the means by which it is represented. there are four dimensions of representation that are most significantšformality (precise structure and meaning), modeling (reasoning about diverse aspects of a system), consistency (among various artifacts), and usability (feasibility for use by working development teams). finding 41: the feasibility of achieving high assurance for a particular system is strongly influenced by early engineering choices, particularly architectural and tooling choices. finding 42: assurance is facilitated by advances in diverse aspects of software engineering practice and technology, including modeling, analysis, tools and environments, traceability, programming languages, and process support. advances focused on simultaneous creation of assurancerelated evidence with ongoing development effort have high potential to improve the overall assurance of systems.because modern systems of all kinds draw on diverse components from diverse sources, there will necessarily be differences in the levels of trust conferred on both components and suppliers. this means that, in the parlance of cybersecurity, there are potential attack surfaces from within the software application as well as from the outside and that we must support rigorous defense at the interfaces within the application. in other words, the new perimeter is within the application rather than around it or its platform.recommendation 41: effective incentives for preventive software assurance practices and production of evidence across the lifecycle should be instituted for prime contractors and throughout the supply chain. recommendation 42: the dod should expand its research focus on and its investment in both fundamental and incremental advances in assurancerelated software engineering technologies and practices. recommendation 43: the dod should examine commercial best practices for more rapidly transitioning assurancerelated best practices into development projects, including contracted custom development, supplychain practice, and inhouse development practice.5. reinvigorate dod software engineering researchthe committee identified seven technology areas where research progress would make a difference for dod™s software capability.architecture modeling and architectural analysis. goals: (1) facilitation of early validation for architecture decisions, including measures, modeling and evaluation, and compliance. (2) facilitation of architectureaware systems management, including models of congruence and a means to manage rich supply chains, ecosystems, and infrastructure. (3) facilitation of componentbased development, including architectural designs for particular domains. assurance: validation, verification, and analysis of design and code. goals: (1) effective evaluation for critical quality attributes. (2) assurance for components in large heterogeneous systems. (3) enhanced critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.10 critical code: software producibility for defenseportfolio of preventive methods to achieve assurance, ranging from process improvement and architectural building blocks to programming languages and coding practice. process support and economic models for assurance and adaptability. goals: (1) enhanced process support for assured software development. (2) models for evidence production in software supply chains. (3) application of economic principles to process decision making.requirements. goals: (1) more expressive models and supporting tools for both functional and quality attributes. (2) improved support for traceability and early validation. language, modeling, coding, and tools. goals: (1) enhanced expressiveness of programming languages to address current and emerging challenges. (2) enhanced ability to exploit modern concurrency, including shared memory multicore and scalable distributed memory. (3) enhanced developer productivity for new development and evolution. cyberphysical systems. goals: (1) accelerated development of new conventional architectures for control systems. (2) improved architectures for a wide range of embedded applications. humansystem integration. goal: (1) development of engineering practices for complex systems in which humans play critical roles. this area is elaborated in another nrc report.17the committee made its selection of these seven technical areas on the basis of four considerations: (1) capabilities identified to have significant potential value through the committee™s examination of the key dod software producibility priorities: process, measurement, architecture, and assurance, as reported in chapters 2, 3, and 4; (2) capabilities that can be feasibly developed through a wellmanaged research program, based on accepted research management criteria (such as the heilmeier questions for research program managers who propose new program ideasšsee chapter 5); (3) capabilities not addressed sufficiently by other federal agencies; and (4) capabilities that might not develop at a sufficient pace without explicit added investment. the proposed research would be undertaken by a mix of academia, government labs, and industry. academic research has historically had a particular role in advancing dod technical capability, through both research and expertise, and this role persists for software producibility.finding 51: academic research and development continues to be the principal means for developing the most highly skilled members of the software workforce, including those who will train the next generation of leaders, and for stimulating the entrepreneurial activity that leads to disruptive innovation in the information technology industry. both academic and industry labs are creating the fundamental advances in knowledge that are needed to drive innovation leadership in new technologies and to advance software technologies that are broadly applicable across industry and the dod supply chain.directions and priorities for universityoriginated invention are greatly influenced by funding levels and agency priorities. for example, the defense advanced research projects agency™s (darpa™s) deliberately strong relationship with the information technology (it) research community, which began in the 1960s and endured for nearly 40 years, profoundly influenced it research priorities, the overall culture of computer science research, and the substantial economic and social outcomes that resulted. this relationship is documented in nrc reports that trace the origins of it innovations, each of which has led to a multibilliondollar market.1817 see nrc, richard pew and anne mavor, eds., 2007, humansystem integration in the system development process: a new look, washington, dc: national academies press. available online at http://www.nap.edu/openbook.php?recordid=11893. last accessed august 20, 2010. 18 see nrc, 2003, innovation in information technology, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=10795. last accessed august 20, 2010. see also the predecessor report, nrc, 1995, evolving the high performance computing and communications initiative, washington, dc: national academy press. available online at http://www.nap.edu/catalog.php?recordid=4948. last accessed august 20, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.summary 11data from the networking and information technology research development (nitrd) program and other sources indicate that there has been a significant reduction in federally sponsored research related to software producibility. from 2004 to 2010, overall funding for the nitrd program more than doubled. during the same period, the combined dollar allocation to the two categories most relevant to software producibility was reduced by almost half.19 (see box 1.5 for details.) expressed as a percentage of the total nitrd budget, the combined allocation for the softwarerelated categories dropped from 24.6 percent to 6.5 percent. furthermore, it is the committee™s impression that in recent years, as a consequence of these reductions, many of the researchers in these areas have moved into other fields or scaled down their research efforts.recommendation 51: the dod should take immediate action to reinvigorate its investment in software producibility research. this investment should be undertaken through a diverse set of research programs throughout the dod and should include academia, industry labs, and collaborations.it is important that researchers understand the challenges associated with the way the dod develops software.20 this includes not only the particular technical challenges, but also the influences of factors such as the arm™slength relationship between the dod and the contractors doing the development. dod research agencies have instituted programs to help younger faculty get the needed domain exposure. these are important to continue and broaden if university programs are to be relevant.finding 52: technology has a significant role in enabling modern incremental and iterative software development practices at levels of scale ranging from small teams to large distributed development organizations.there are significant and particular difficulties in managing research in topics related to software producibility. but there are also major opportunities based on recent progress in the field, including technology developments, scientific practice, and the overall environment of production practice. taking challenges and opportunities together, the influences include (1) the maturation of software engineering as a discipline, leading to improved research methods and lower risk in technology transitionšfacilitating more satisfactory responses to the heilmeier questions; (2) the complexity of diffusion pathways and the variability of timescales, where some results can readily transfer to dod practice, while others, often the most significant and influential, take longer and have more indirect pathways; (3) an emerging concept of novelty that is often more closely tied with readiness with respect to infrastructure and the various exponential curves than with specific technical noveltyšthe question is often, what are the ideas whose time has come? (4) improved methods to assess progress in the absence of crisp quantitative measures of performance (e.g., how to assess the benefits of strong typing in a quantitative way) or when the focus of research is on developing such measures; and (5) unpredictability in the span of time from the emergence of a new idea to the readiness to transition that idea with respect to practice, infrastructure, and other variables.an additional difficulty is the development of models of return on investment in research related to software producibility. this difficulty is present for all investment in basic science and exploratory development, but it can be particularly vexing for computing technology and software. this difficulty has been the subject of intense study by the national research council and other groups; several reports have been produced that offer a historical perspective, showing the emergence of multiple multibilliondollar 19 these categories are software design and productivity (sdp) and high confidence software and systems (hcss). the reported amounts for sdp and hcss do not include 2010 nih funding for accounting reasons that are explained in chapter 1. comparisons are in constant dollars.20 a brief description of such challenges can be found on p. 23 in nrc, 2010, achieving effective acquisition of information technology in the department of defense, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=12823. last accessed august 20, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.12 critical code: software producibility for defensemarkets on the basis of initial investment in worthy projects by nitrd agencies. under the auspices of professional societies, similar studies were published relating specifically to software engineering research.21 these reinforce the extent of the impact of wellmanaged investments. recommendation 52: the dod should take action to undertake dodsponsored research programs in the following areas identified as critical to the advancement of defense software producibility: (1) architecture modeling and architectural analysis; (2) assurance: validation, verification, analysis of design and code; (3) process support and economic models for assurance and adaptability; (4) requirements; (5) language, modeling, coding, and tools; (6) cyberphysical systems; and (7) humansystems integration. 21 mary shaw, 2002, ﬁthe tyranny of transistors: what counts about software?ﬂ proceedings of the fourth workshop on economicsdriven software engineering research, ieee computer society, pp. 4951; barry boehm, 2006, ﬁa view of 20th and 21st century software engineering,ﬂ proceedings of the 28th international conference on software engineering, acm, pp. 1229; and leon j.  osterweil, carlo ghezzi, jeff kramer, and alexander l. wolf, 2008, ﬁdetermining the impact of software engineering research on practice,ﬂ ieee computer 41(3):3949.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.summary 13box s.2 compilation of report findings and recommendationschapter 1 finding 11: software has become essential to a vast range of military system capabilities and operations, and its role is continuing to deepen and broaden, including interlinking diverse system elements. this creates both benefits and risks. finding 12: the growth in the role of software in systems is due to a combination of technological advances and a maturing of the supply chain structure associated with software systems development at all levels of scale.finding 13: the dod relies fundamentally on mainstream commercial components, supply chains, and software ecosystems for both business systems and many mission systems. nonetheless, the dod has special needs in its mission systems driven by the growing role of software in systems. as a result, the dod needs to address directly the challenge of building on and, where appropriate, contributing to the development of mainstream software that can contribute to its mission.finding 14: the dod™s needs will not be sufficiently met through a combination of demandpull from the military and technologypush from the defense or commercial information technology sectors. the dod cannot rely on industry alone to address the longterm software challenges particular to defense.recommendation 11: the dod, through its director of research and engineering (ddr&e), should regularly undertake an identification of areas of technological need related to software producibility where the dod has ﬁleading demandﬂ and where accelerated progress is needed to support the defense mission.finding 15: it is dangerous to conclude that we are reaching a plateau in capability and technology for software producibility. to avoid loss of leadership, the dod will need to become more fully engaged in the innovative processes related to software producibility.chapter 2 finding 21: modern practice for innovative software systems at all levels of scale is geared toward incremental identification and mitigation of engineering uncertainties, including requirements uncertainties. for defense software, the challenge is doing so at a larger scale and in ways that are closely linked with an overall systems engineering process. finding 22: the prescription in dod instruction 5000.02 for the use of evolutionary development needs to be supplemented by the development of related guidance on the use of such practices as time certain development, requirements prioritization, evidencebased milestones, and risk management.finding 23: extensions to earned value management models to include evidence of feasibility and to accommodate practices such as timecertain development are necessary conditions to enable successful application of incremental development practices for innovative systems.finding 24: research related to process, measurement, architecture, and assurance can contribute to the improvement of measurement practice in support of both routine management of engineering risks and value assessment as part of earned value management.continuedcritical code: software producibility for defensecopyright national academy of sciences. all rights reserved.14 critical code: software producibility for defensebox s.2 continuedrecommendation 21: the dod should take aggressive actions to identify and remove barriers to the broader adoption of incremental development methods, including iterative approaches, staged acquisition, evidencebased systems and software engineering, and related methods that involve explicit acknowledgment and mitigation of engineering risk.recommendation 22: the dod should take steps to accumulate highquality data regarding project management experience and technology choices that can be used to inform cost estimation models, particularly as they apply to innovative software development projects. finding 25: architectural expertise is becoming dramatically more important for the dod, its advisors, and its contractors. there will be significant and immediate benefits from advances in the state of technical support for architecture.recommendation 23: update procurement, contracting, and governance methods to include an early and explicit architecture phase that reduces the predominant uncertainties in software intensive systems.recommendation 24: define architectural leadership roles for major sidre projects and provide program managers with channels for architectural expertise.recommendation 25: develop the technical and management infrastructure necessary to simultaneously support stabilized, highassurance development of the current evolutionary increment while concurrently evolving the plans and specifications for stabilized development of the next highassurance increment.finding 26: the dod has a growing need for software expertise, and it is not able to meet this need through intrinsic resources. nor is it able to fully outsource this requirement to dod primes. the dod needs to be a smart software customer. this need is particularly significant for largescale innovative softwareintensive projects for which there are crosscutting software architectural requirements and validation challenges.chapter 3 finding 31: industry leaders attend to software architecture as a firstorder decision, and many follow a productline strategy based on commitment to the most essential common software architectural elements and ecosystem structures.finding 32: the technology for definition and management of software architecture is sufficiently mature, with widespread adoption in industry. these approaches are ready for adoption by the dod, assuming that a framework of incentives can be created in acquisition and development efforts.finding 33: the dod would benefit from explicit attention to software architecture and industry best practice, including (1) formalizing career paths and role descriptions for software architects, (2) identifying ways that dodaligned software architects can provide objective advice (see chapter 2), and (3) enhancing organizational structures to support effective architectural leadership.finding 34: several dod programs are using software architecturedriven acquisition with successful results.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.summary 15recommendation 31: initiate a targeted research program to provide software architects with better tools and techniques for dod systems.recommendation 32: this committee reiterates the past defense science board recommendations that the dod follow an architecture driven acquisition strategy, and, where appropriate, use the software architecture as the basis for a productline approach and for largerscale systems potentially involving multiple lead contractors.recommendation 33: the dod should enhance existing practices to afford better distinctions between precedented portions of systems and innovative portions of systems, wherein architectures are developed both to encapsulate the innovative elements and to afford maximum opportunity to build on experience and existing ecosystems for precedented elements. these overall architectures, and particularly the innovative elements, should be subject to early and continuous validation, especially in systems that have requirements for interoperation.finding 35: in systems with innovative functional or quality requirements, benefit is derived from an early focus on the most essential architectural commitments and quality attributes, with deferred commitment to specifics of functional characteristics. this approach can reduce the overall uncertainty of the engineering process and yield better outcomes.recommendation 34: the dod should learn from commercial experience and, in addition, sponsor diverse areas of technical research to help reduce the engineering risk in architecting systems that include unprecedented functional and quality attributes.chapter 4 finding 41: the feasibility of achieving high assurance for a particular system is strongly influenced by early engineering choices, particularly architectural and tooling choices.finding 42: assurance is facilitated by advances in diverse aspects of software engineering practice and technology, including modeling, analysis, tools and environments, traceability, programming languages, and process support. advances focused on simultaneous creation of assurancerelated evidence with ongoing development effort have high potential to improve the overall assurance of systems.recommendation 41: effective incentives for preventive software assurance practices and production of evidence across the lifecycle should be instituted for prime contractors and throughout the supply chain.recommendation 42: the dod should expand its research focus on and investment in both fundamental and incremental advances in assurancerelated software engineering technologies and practices.recommendation 43: the dod should examine commercial best practices for more rapidly transitioning assurancerelated best practices into development projects, including contracted custom development, supply chain practice, and inhouse development practice.box s.2 continuedcontinuedcritical code: software producibility for defensecopyright national academy of sciences. all rights reserved.16 critical code: software producibility for defensechapter 5 finding 51: academic research and development continues to be the principal means for developing the most highly skilled members of the software workforce, including those who will train the next generation of leaders, and for stimulating the entrepreneurial activity that leads to disruptive innovation in the information technology industry. both academic and industry labs are creating the fundamental advances in knowledge that are needed to drive innovation leadership in new technologies and to advance software technologies that are broadly applicable across industry and the dod supply chain.finding 52: technology has a significant role in enabling modern incremental and iterative software development practices at levels of scale ranging from small teams to large distributed development organizations.recommendation 51: the dod should take immediate action to reinvigorate its investment in software producibility research. this investment should be undertaken through a diverse set of programs across the dod and should include academia, industry labs, and collaborations. recommendation 52: the dod should take action to undertake dodsponsored research programs in the following areas identified as critical to the advancement of defense software producibility: (1) architecture modeling and architectural analysis; (2) assurance: validation, verification, analysis of design and code; (3) process support and economic models for assurance and adaptability; (4) requirements; (5) language, modeling, coding, and tools; (6) cyberphysical systems; and (7) humansystems integration. box s.2 continuedcritical code: software producibility for defensecopyright national academy of sciences. all rights reserved.171recognize the pivotal role of dod software innovationthe role of software in defensethe pivotal role of information technology (it) in defense has been noted in multiple studies.1,2,3,4 software is increasingly used to embody the functionality of defense systems of all kinds,5 and it is used pervasively in the department of defense (dod) for a multitude of different purposes and in a multitude of different program types (box 1.1). it is a key enabler of overall systems scale and complexity, of integration among systems (netcentricity and ﬁultrascaleﬂ), and of agility in systems. mission capability embodied in software has become a unique source of strategic and military advantage, and software producibility is emerging as a key component of military strength, capability, and readiness. the committee uses the term ﬁsoftware producibilityﬂ to refer to the capacity to design, produce, assure, and evolve softwareintensive systems in a predictable manner while effectively managing risk, cost, schedule, and complexity.the defense science board™s (dsb™s) task force on mission impact of foreign influence on dod software, which explored the essential role of software in defense, released its report in september 1  defense science board (dsb), september 2007, report of the defense science board task force on mission impact of foreign influence on dod software, washington, dc: office of the under secretary of defense for acquisition, technology, and logistics. available online at http://stinet.dtic.mil/oai/oai?&verb=getrecord&metadataprefix=html&identifier=ada473661. last accessed august 20, 2010.2  dsb, november 2000, report of the defense science board task force on defense software, washington, dc: office of the under secretary of defense for acquisition, technology, and logistics. available online at http://oai.dtic.mil/oai/oai?verb=getrecord&metadataprefix=html&identifier=ada385923. last accessed august 20, 2010.3  national research council (nrc), 2010, achieving effective acquisition of information technology in the department of defense, washington, dc: national academies press. 4  nrc, 1999, realizing the potential of c4i: fundamental challenges, washington, dc: national academy press. available online at http://www.nap.edu/catalog.php?recordid=6457. last accessed august 20, 2010.5  dsb, november 2000, report of the defense science board task force on defense software, washington, dc: office of the under secretary of defense for acquisition, technology, and logistics. available online at http://oai.dtic.mil/oai/oai?verb=getrecord&metadataprefix=html&identifier=ada385923. last accessed august 20, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.18 critical code: software producibility for defense2007.6 the report notes that ﬁin the department of defense, the transformational effects of information technology (itšdefined here broadly to include all forms of computing and communications), joined with a culture of information sharing, called netcentricity, constitute a powerful force multiplier. the dod has become increasingly dependent for missioncritical functionality upon highly interconnected, globally sourced, it of dramatically varying quality, reliability and trustworthiness.ﬂ7 in other words, at the core of the ability to achieve integration and maintain agility is the ability of the dod to produce and evolve software. this echoes a judgment expressed in many other studies that have considered the role of software in defense.8 the report further notes, however, that ﬁeach year the department of defense depends more on software for its administration and for the planning and execution of its missions,ﬂ 6  dsb, september 2007, report of the defense science board task force on mission impact of foreign influence on dod software, washington, dc: office of the under secretary of defense for acquisition, technology, and logistics. available online at http://stinet.dtic.mil/oai/oai?&verb=getrecord&metadataprefix=html&identifier=ada473661. last accessed august 20, 2010.7  ibid., p. vii.8  see referenced studies above. box 1.1  a taxonomy of information technology program typesmany taxonomies have emerged to assist managers in identifying common patterns among requirements and system types and then building on that knowledge to define and implement best practices and standards that are suited to particular categories of systems. distinctions are made based on the function and role of the system, the types of risk to be addressed, the scale of systems and budgets, and other factors. this report adopts the following taxonomy of it programs:1. business systems and office it2. command and control3. computing and communications infrastructure4. intelligence, surveillance, and reconnaissance (isr), space, and weaponsthe classification, which is loosely based on a classification scheme used within the dod to track it acquisition programs,1 is primarily functional. but the functional categories also correspond roughly to distinctions among programs based on the extent of innovation (more in categories 2 and 4) and those that are more likely to have precedented requirements and architectures and thus build on established ecosystems (categories 1 and 3). these categories also separate it that is embedded in weapons or weapons systems or similar platforms with potentially high systems risk (category 4), it in which software and hardware are less tightly integrated (categories 1 and 2), and it that provides the computing and communications infrastructure (category 3) that can be used by systems identified in the other categories.because modern largerscale systems are interconnected and therefore more often integrate across these functionalities, greater numbers of systems may cross these boundaries. for example, many weapons systems incorporate commandandcontrol functionalities.finally, despite the differences among these categories, most systems rely on similar development practices, including design and architectural concepts, programming languages, process and measurement concepts, and tools. 1 based on a taxonomy used by the office of the assistant secretary of defense for networks and information integration to categorize major automatic information system programs.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.recognize the pivotal role of dod sofware innovation 19and additionally ﬁthis growing dependency is a source of weakness exacerbated by the mounting size, complexity, and interconnectedness of its software programs.ﬂ9 the rapid growth of software in defense systems is especially significant and parallels the growing role of software in a broad range of application domains. this growth is a natural outcome of the special engineering characteristics of software: software is uniquely unbounded and flexible, having relatively few intrinsic limits on the degree to which it can be scaled in complexity and capability. software is an abstract and purely synthetic medium that, for the most part, lacks fundamental physical limits and natural constraints. for example, unlike physical hardware, software can be delivered and upgraded electronically and remotely, greatly facilitating rapid adaptation to changes in adversary threats, mission priorities, technology, and other aspects of the operating environment. the principal constraint is the human intellectual capacity to understand systems, to build tools to manage them, and to provide assurancešall at evergreater levels of complexity. the extent of the dod code in service has been increasing by more than an order of magnitude every decade, and a similar growth pattern has been exhibited within individual, longlived military systems. in addition to this growth in size (as well as growth in other system aspects such as resource usage), there is a corresponding growth in overall system capability and complexity. this chapter addresses the first two of the four questions taken up by the committee:to what extent is software capability significant for the dod? is it becoming more significant or less so? will the advances in software producibility needed by the dod emerge unaided from industry at a pace sufficient to meet evolving defense requirements?growth in the role and significance of software to defensethe value that software contributes to major systems is increasing rapidly and becoming more fundamental to system capability. the dsb task force report on defense software (2000)10 illustrates this point in the case of combat aircraft. the percentage of system functions performed by software has risen from 8 percent of the f4 in 1960, to 45 percent of the f16 in 1982, to 80 percent of the f22 in 2000.11 software has become essential to all aspects of military system capabilities and operations, and softwarespecific investment is critical to them.12 macroeconomic data show analogous growth in the role software plays in the commercial world. this is significant because commercial vendors are key contributors to the defense software supply chainšfor future combat systems,13 for example, 27 million source lines of code (more than 42 percent 9  dsb, september 2007, report of the defense science board task force on defense software, p. v.10 dsb, november 2000, report of the defense science board task force on defense software, washington, dc: office of the under secretary of defense for acquisition, technology, and logistics. available online at http://oai.dtic.mil/oai/oai?verb=getrecord&metadataprefix=html&identifier=ada385923. last accessed august 20, 2010.11 ibid., table 3.3a. available online at http://www.acq.osd.mil/dsb/reports/defensesoftware.pdf. accessed february 25, 2008.12 boehm, kind, and turner quote an unidentified u.s. air force general, ﬁabout the only thing you can do with an f22 without software is take a picture of it.ﬂ in barry boehm, richard turner, and peter kind, 2002, ﬁrisky business: seven myths about software engineering that impact defense acquisitions,ﬂ program manager, may 1, 2002. the committee notes, however, that with modern cameras, even taking a picture cannot be done without software.13 future combat systems (fcs) was ﬁthe army™s modernization program consisting of a family of manned and unmanned systems, connected by a common network, that enables the modular force, providing our soldiers and leaders with leadingedge technologies and capabilities allowing them to dominate in complex environments.ﬂ u.s. army, ﬁfuture combat systems.ﬂ available online at http://www.army.mil/fcs/. accessed march 3, 2008.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.20 critical code: software producibility for defenseof the total delivered executable source lines of code) were commercial offtheshelf (cots) or open source.14 it is also significant because software capability has become a strategic source of market differentiation in many industries, from financial services and health care to telecommunications and entertainment. a 2002 report by the national research council™s (nrc™s) board on science, technology, and economic policy15 noted that since 1995 the it and networking industries had accounted for 20 percent of the nation™s economic growth, even though they accounted for only 3 percent of gross domestic product (gdp). comparable figures exist in the european communityšthe information and communications technology (ict) sector represents just above 5 percent of the european gdp, but reports show that ict drives 25 percent of overall growth and about 40 percent of the increase in productivity.finding 11: software has become essential to a vast range of military system capabilities and operations, and its role is continuing to deepen and broaden, including interlinking diverse system elements. this creates both benefits and risks. software in systemsmilitary system capability is heavily dependent on software, which has become an enabler for much of the functionality and flexibility of our warfighting systems. software has proven to be a differentiator in system capability for a wide range of current systems such as the f22, f35 lightning ii, and the aegis combat system. software to modify and integrate existing capabilities was a key enabler in the february 2008 successful shootdown of an errant u.s. satellite as it tumbled back to earth.this critical role of software in defense is also noted in the more recent dsb task force report on foreign software, which states, ﬁthe dod now relies upon networked, highlyinterconnected systems for many missioncritical capabilities, and this reliance is projected to increase. the software in these systems is the key ingredient that provides much of the increased capability delivered to the warfighter, just as it represents the key factor in increased productivity and new capabilities for industry today. for the dod, this advanced technology is a force multiplier.ﬂ16,17 a high level of software capability is also important in producing defense systems. for example, verylargescale, highly networked, and cryptosecured software systems were needed for the robotic design used to construct the production line for f35 manufacturing.given the importance of software to the dod, a vital question is how the department can ensure that it will be able to meet its software needs now and into the future. the subsequent chapters of this report explore significant facets of this issue.software provides the means to manifest the modeling and simulation capability now essential in the design and testing of advanced military platforms and weapons in all branches of the dod. these designfocused software capabilities can save millions of dollarsšall before the first piece of metal is bent. but perhaps even more importantly, in these early stages this software capability enables the customer to focus on driving out risks related to the definition of weapons and systems functionality and 14 dsb, september 2007, report of the defense science board task force on mission impact of foreign influence on dod software, washington, dc: office of the under secretary of defense for acquisition, technology, and logistics, p. 77. available at http://stinet.dtic.mil/oai/oai?&verb=getrecord&metadataprefix=html&identifier=ada473661. last accessed august 10, 2010. the fcs program was cancelled in 2009, but the experience of that program nonetheless provides valuable insight.15 nrc, 2002, measuring and sustaining the new economy: report of a workshop, washington, dc: national academies press, p. 52. available online at http://www.nap.edu/openbook.php?recordid=10282&page=52. last accessed august 10, 2010. 16 dsb, september 2007, report of the defense science board task force on mission impact of foreign influence on dod software, washington, dc: office of the under secretary of defense for acquisition, technology, and logistics, p. 12. available at http://stinet.dtic.mil/oai/oai?&verb=getrecord&metadataprefix=html&identifier=ada473661. last accessed august 20, 2010.17 dsb, april 2009, creating a dod strategic acquisition platform, washington, dc: office of the under secretary of defense for acquisition, technology, and logistics. available online at http://www.dtic.mil/cgibin/gettrdoc?ad=ada499566&location=u2&doc=gettrdoc.pdf. last accessed august 20, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.recognize the pivotal role of dod sofware innovation 21architecture. the savings are due to the elimination of the need to build and test numerous prototype designsšthis is now done through software. for many systems, this modeling and simulation software implements highfidelity, massively parallel computational fluid dynamics (cfd) simulations. these simulations enable experimentation with signatures of different missile and aircraft designs without having to resort to expensive physical tests. wind tunnel testing alone, for example, can cost millions of dollars per week, with months of testing required to settle design issues. other examples of softwaremanifest functionality used pervasively in defense systems include onboard prognostic health systems and automated logistic support systems, both of which emerged from defense advanced research projects agency (darpa) research funding in the 1980s. these softwareenabled systems are quietly saving millions of dollars.software in organizationsin addition to deepening the extent of reliance on software in systems components and in the tooling associated with their development, there is a significant broadening of the role of software in systems and organizations. these changes reflect both a growing centrality in the role of software and also a growing portfolio of associated risks. this combination raises the significance of softwarerelated decisions in systems developmentšsoftware has become the medium of choice for innovative functionalities. these functionalities include not only component capabilities, but also functionalities that are enabled through the use of software to implement interconnections across a family of constituent systems. however, largely as a consequence of both of these rolesšinnovation and interconnectionšsoftware has emerged as the locus for a range of engineering challenges related to reliability, security, and development predictability.the interconnection aspect of this shift has three principal elements. first, there is a shift in emphasis from the development of functionally focused systems to the development of systems that interconnect and integrate capabilities within and across enterprises. the ﬁnetcentricﬂ and ﬁultrascaleﬂ concepts are reflective of this shift. this has great strategic benefit, in that it leverages the value of dispersed assets and enables agile responses at a broad range of echelons in warfighting situations when multiple systems elements are involved. this interconnection has associated risks, of course, primarily related to the magnitude of failures experienced as a consequence of internal errors, vulnerabilities exploited, etc. in civilian systems, for example, there are widely reported examples of cascading failures of interconnected systems in telecommunications, utilities, and supply chain systems.second, largely as a consequence, it staffs are generally less involved in mediating between a system and its users. much larger numbers of dod personnel interact directly with systems, and indeed many systems can be (and need to be) accessed through public communication infrastructure. this is more efficient because it removes the delays and inaccuracies caused by intermediation. but it also means that many more individualsšusually inadvertently, but not alwaysšcan take actions with widereaching consequences, both positive and negative. a third element of the interconnection aspect is that modern systems can support immediate electronic enactment of decisions. this enables agility and fast response in decisions and actionsšgetting inside the command loop of an adversary, but it also means that failures and compromises can happen very quickly, inside a human decision loop. an example in the civilian context is the recent discussion over the duration in milliseconds of the stock trading lookahead window.fourth, interconnection introduces new information security challenges. software supply chainsthe growth in the role of software, as described above, is enabled in part by a surprisingly recent phenomenon in it, which is the diversification and enrichment of the supplychain structure for it systems. this enrichment is more than just systems outsourcing as experienced in the past half century. critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.22 critical code: software producibility for defensesupply chains for software systems are both broader and deeper today, and they include commercial as well as defense players and involve technically rich and complex architectures, with frameworks, libraries, services, and other roles contributed by multiple players. the value of outsourcing, which was initially primarily cost reduction and access to expertise, now includes greater agility and ability to respond to changes in the operating environment. the supplychain structure for modern defense software is evolving in a similar way, and is now significantly more complex and more international than it was even just a decade ago. indeed, this combination of factors motivated the defense science board study mentioned above to assess the impact of this internationalization on defense software systems, including their development and their assurance.18 the complexityšand the internationalizationšare due to a combination of factors, including certain technical developments in software technology, the economic forces and technological enablers of globalization, the geographic dispersion of the trained workforce, the minimal capital investment required (not including education and training) for the workforce, and increasing demand for precedented (routinized) projects. the complexity is also enabled by the maturation and acceptance of a diverse set of commercial (cots) ecosystems with their associated components and infrastructure.from a technological perspective, this richness in the supply chain is enabled by advances in both organizational collaboration technologies and software technology. the collaboration technologies build on internet infrastructure to provide, for example, messaging, process support, team information servers (document sharing and configuration management), issue databases, servers for software builds, wikis, automated test and analysis tools, and the like. finding 12: the growth in the role of software in systems is due to a combination of technological advances and a maturing of the supply chain structure associated with software systems development at all levels of scale.precedent and innovation in softwareprecedented software and externalitiessoftware development today relies heavily on established architecture and infrastructure component configurations, which the committee calls software ecosystems (see boxes 1.2, 1.3, and 1.4 for elaboration). the success of the ecosystem model derives from the natural convergence of component functionalities and the associated architectural elements, chiefly protocols and software/service interfaces, through which these functionalities are delivered within applications and systems. these functionalities are called precedented, in the sense that new users of these functionalities benefit, in terms of design costs and risks, from the experience of existing and prior users. once ecosystems are established, the development processes associated with them are often characterized primarily by selection of an ecosystem and then, within that ecosystem, tailoring through configuration of settings and the authoring of a relatively very small amount of custom software code. thus, custom development in these areas of convergence gives way to product selection and procurement. indeed, because engineering risks are relatively modest, a straightline sequential process may often be appropriate for development management in these precedented portions of larger systems. the emergence of generally accepted ecosystem structures has in recent years become one of the enablers of the growth in richness in the supplychain structure for software systems, which in the commercial world has promoted a diversity of suppliers, growth of a market for specialists in componentlevel innovation, and tools geared to development productivity for particular ecosystems. a 18 dsb, september 2007, report of the defense science board task force on mission impact of foreign influence on dod software, washington, dc: office of the under secretary of defense for acquisition, technology, and logistics. available online at http://stinet.dtic.mil/oai/oai?&verb=getrecord&metadataprefix=html&identifier=ada473661. last accessed august 20, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.recognize the pivotal role of dod sofware innovation 23countervailing trend in recent years has been the consolidation at the top end of the software vendor market through mergers and acquisitions. how does this ecosystem phenomenon influence the dod? first, it should be clear that the dod derives huge benefit from the ecosystem phenomenon, because so many of the business systems required by the dod have requirements that are strongly analogous to commercial requirements. in these cases, only modest adaptation of commercial best practices, including choices and configuration of ecosystems, can yield major advantage to the dod in the form of low costs, managed risk, and predictable outcomes. additionally, the software elements of an ecosystem are complemented by a supplier ecosystem of expert integrators, consultants, addin vendors, and the like. in other words, when the dod™s requirements are similar to commercial requirements, the dod benefits significantly by adopting commercial best practices where possible. (see boxes 1.2 and 1.3 for elaboration on the concept and role of ecosystems.) not only are engineering risks reduced for precedented developments, but also there are benefits from the richness of the supply chain due to network effectsšthe positive externalities associated with systems adoption.19 when an ecosystem is successful, the commonalities of structures and interfaces enable larger numbers of organizations to participate efficiently in the development of large systems, providing software components, libraries, frameworks, plugins, custom elements, and so on. this makes it possible for more suppliers to participate and also reinforces the status of accepted frameworks, broadening the benefits for framework adopters and affording them the opportunity to make good choices at the component level while working within the safe conventions of an established ecosystem. indeed, for many of these categories of requirements, it is nearly intractable, from the standpoint of cost and risk, to develop ﬁseparate but equalﬂ approaches. not only are these expensive, time consuming, and risky, but also the dod would then need to bear the entire cost of advancing the idiosyncratic technology, whereas ecosystem participants would benefit from actions by other participants to incrementally advance the performance and capability of the ecosystem, its infrastructure, and its constituent components. (of course there are also negative externalities associated with widely adopted ecosystems, such as their attractiveness to developers of security exploits and the consequent ease of access by adversaries to offensive capability.)innovative requirements and the activity of innovative software developmentthe situation becomes more complex and challenging when the dod requires functionality more specifically focused on the defense missionšweapon systems, command and control systems, intelligence analysis systems, and other systems more directly supportive of warfighting and intelligence. they include highperformance embedded systems, largescale systems with unprecedented architecture, and highly interconnected systems. they often require high degrees of software assurance. the functionalities of these systems are more specialized and also, due to the presence of ambitious adversaries, constantly evolving in response to changing threats. they require the management of complex and evolving requirements. many of these systems are less precedented in the sense that innovation is required in system architecture, design, infrastructure, linkages with hardware sensors and effectors, and other respects. technological enablers for the development of these more innovative systemsšeither with respect to innovative functionality or innovative engineering or bothšis the principal focus of this report. this does not exclude considerations regarding precedented systems, however, because larger systems almost always involve a mix of innovative and precedented functionalities and components. indeed, there are few modern defense systems of scale that do not build on technologies extensively drawn from related defense systems and from the various mainstream software ecosystems. this means that development and acquisition practices must account for this mix of the innovative and the precedented. this mix 19 carl shapiro and hal r. varian, 1998, ﬁinformation rules: a strategic guide to the network economy,ﬂ journal of technology transfer 25(2):250253. critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.24 critical code: software producibility for defensebox 1.2  the concept of software ecosystemsin web applications, there are conventional configurations of server operating systems, relational databases, web servers, application server frameworks, business rules, and other elements that are combined to create ecommerce servers. these servers rely, in turn, on the ﬁrich clientﬂ ecosystem of a modern clientside web browser, which includes not just html and basic http, but also technologies such as javascript, xml, dom access, and asynchronous http. analogous configurations, with very different sets of interfaces and components, are used to support mobile applications (apple™s iphone ecosystem and google™s android ecosystem are two recent examples), business intelligence (olap, etc.), enterprise resource planning, and other common functionalities. there are competing ecosystems in the commercial worldšfor example, web application servers can be developed using javabased ecosystems such as the platformindependent java ee (formerly known as j2ee) or using the windowsbased .net framework, which supports multiple programming languages sharing common runtime services related to memory management, security, etc. in web applications, there are also open source ecosystems, one of which is the socalled lamp stack, which comprises the linux operating system, the widely adopted apache web server, the mysql relational database, and scripting in a language starting with the letter ﬁp,ﬂ most usually php, python, or perl. the opensource character of this ecosystem means effectively that it operates as a kind of quasiconsortium linking the various stakeholders that participate in the ongoing development of the overall architecture, the details of the interfaces, and the code base. regardless of particulars, in most of these ecosystems, choice of programming language is often driven by the choice of ecosystem. the committee defines a software ecosystem as a conventional structure consisting of a family of infrastructural elements that are intended to be combined in a patterned way. ecosystems include softwarearchitectural structure, but they can also include configurations of hardware and services platforms. ecosystems generally provide a reuse of major elements and infrastructure, which can entail strong structural and semantic commitments.1 ecosystems often also include documents, tools, practices, and even organizations to accompany these elements. the principal benefits include potentially significant reductions in cost, mitigation of engineering risk, and upfront agreement on representations and meanings for data that are shared within a system or across systems.it is also significant to note that, if we broadly construct the idea of a software ecosystem, then the internet family of protocols would also be an example. the ecosystem comprising these protocols and its evolution have been much studiedšone of the results of this is the ﬁhourglassﬂ model. this model illustrates how there can be a diversity of means for provisioning the service associated with a particular interface or protocol, such as tcp, and a separate diversity of client applications that build on the service. for example, ﬁtcp serviceﬂ is generally provided as a ﬁlayerﬂ above ip, which in turn can be provisioned over fiber, wireless, copper, and many other means. tcp, in turn, underlies the web protocol http as well as file transfer ftp and many other higherlevel services.2 1 not all ecosystems involve direct reuse of components. a family of protocols, for example, defines a ﬁmeans of exchangeﬂ among system components. other examples include instruction set architectures (with multiple vendors providing chips) and agreedupon xml or other data exchange representations for shared information.2 see, e.g., nrc, 2001, the internet™s coming of age, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=9823. last accessed august 20, 2010.another example is the relatively small set of widely adopted ecosystem architectures for embedded and realtime control applications (such as the qnx, rtlnix, vxworks, and windows ce realtime operating systems), the automotive industry™s autosar (automotive open system architecture), and the scada protocols and interfaces used in the electrical grid. many government users of embedded and realtime capability have taken actions to work with researchers and vendors to develop more capable ecosystems that build on modern concepts and abstractions related to processors, languages, and tools.3,4 ecosystems are also being adopted or are emerging in areas ranging from robotic systems to dataintensive supercomputing.5the ecosystem phenomenon is now pervasively apparent in commercial industry, and it is actively promoted by leading vendors, in part due to the stability of market structure derived from the network effects. ecosystem or framework ﬁownersﬂ (from the examples above: apple, microsoft, google, oracle, several opensource foundations, and many others) control the trajectory of the overall market for components and services associated with that ecosystem, but many firms participate in that ﬁinternalﬂ market. although the risks and costs associated with introducing a new ecosystem or framework may be very high, the risks and costs for niche providers within an established framework can be low. additionally, once a community of suppliers is engaged within an ecosystem, the overall ecosystem can continue to evolve in response to the broad market trajectory and also to new technology developments. thus, new languages can be added to .net (e.g., functional programming with f#), new libraries and language features can be added within java ee (closures to java), and so on. this is one of the enablers and sustainers of the global supply chain. the committee notes, in addition, that the structure of ecosystems may become more or less exposed to developers and users, and indeed entire ecosystems may split or merge. for example, a vendor could choose to expose a previously inaccessible internal interface to allow greater customization by customers and integrators. in the case of enterprise resource planning (erp) systems, for example, vendors expose interfaces that allow ﬁaddinﬂ developers to provide a diverse set of functionalities tailored to particular market segments. this enables a broader diversity of client requirements to be met with less risk to both clients and the framework vendor. the ecosystem structure thus evolves according to changing opportunities and risks for the various stakeholders. examples of the considerations include network effects (benefits of broader adoption of particular ﬁhourglass necksﬂ), vertical integration (reduction in risks associated with integrating separately developed components), and lockin (greater friction in interoperation and choices available for component functionalities).3 see, for example, the workshop convened by the nitrd high confidence software and systems coordinating group, ﬁnational workshop on highconfidence automotive cyberphysical systems,ﬂ april 34, 2008, troy, michigan. available online at http://varma.ece.cmu.edu/autocps/. last accessed august 20, 2010. 4 see also, jeanette wing, 2008, ﬁcyberphysical systems research charge,ﬂ presented at the cyberphysical systems summit, april 24, 2008, st. louis, mo. available online at http://www.cra.org/ccc/docs/cpssummit.pdf. last accessed august 20, 2010. 5 nrc, 2009, assessing the impacts of changes in the information technology r&d ecosystem: retaining leadership in an increasingly global environment, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=12174. last accessed august 20, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.recognize the pivotal role of dod sofware innovation 25box 1.2  the concept of software ecosystemsin web applications, there are conventional configurations of server operating systems, relational databases, web servers, application server frameworks, business rules, and other elements that are combined to create ecommerce servers. these servers rely, in turn, on the ﬁrich clientﬂ ecosystem of a modern clientside web browser, which includes not just html and basic http, but also technologies such as javascript, xml, dom access, and asynchronous http. analogous configurations, with very different sets of interfaces and components, are used to support mobile applications (apple™s iphone ecosystem and google™s android ecosystem are two recent examples), business intelligence (olap, etc.), enterprise resource planning, and other common functionalities. there are competing ecosystems in the commercial worldšfor example, web application servers can be developed using javabased ecosystems such as the platformindependent java ee (formerly known as j2ee) or using the windowsbased .net framework, which supports multiple programming languages sharing common runtime services related to memory management, security, etc. in web applications, there are also open source ecosystems, one of which is the socalled lamp stack, which comprises the linux operating system, the widely adopted apache web server, the mysql relational database, and scripting in a language starting with the letter ﬁp,ﬂ most usually php, python, or perl. the opensource character of this ecosystem means effectively that it operates as a kind of quasiconsortium linking the various stakeholders that participate in the ongoing development of the overall architecture, the details of the interfaces, and the code base. regardless of particulars, in most of these ecosystems, choice of programming language is often driven by the choice of ecosystem. the committee defines a software ecosystem as a conventional structure consisting of a family of infrastructural elements that are intended to be combined in a patterned way. ecosystems include softwarearchitectural structure, but they can also include configurations of hardware and services platforms. ecosystems generally provide a reuse of major elements and infrastructure, which can entail strong structural and semantic commitments.1 ecosystems often also include documents, tools, practices, and even organizations to accompany these elements. the principal benefits include potentially significant reductions in cost, mitigation of engineering risk, and upfront agreement on representations and meanings for data that are shared within a system or across systems.it is also significant to note that, if we broadly construct the idea of a software ecosystem, then the internet family of protocols would also be an example. the ecosystem comprising these protocols and its evolution have been much studiedšone of the results of this is the ﬁhourglassﬂ model. this model illustrates how there can be a diversity of means for provisioning the service associated with a particular interface or protocol, such as tcp, and a separate diversity of client applications that build on the service. for example, ﬁtcp serviceﬂ is generally provided as a ﬁlayerﬂ above ip, which in turn can be provisioned over fiber, wireless, copper, and many other means. tcp, in turn, underlies the web protocol http as well as file transfer ftp and many other higherlevel services.2 1 not all ecosystems involve direct reuse of components. a family of protocols, for example, defines a ﬁmeans of exchangeﬂ among system components. other examples include instruction set architectures (with multiple vendors providing chips) and agreedupon xml or other data exchange representations for shared information.2 see, e.g., nrc, 2001, the internet™s coming of age, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=9823. last accessed august 20, 2010.another example is the relatively small set of widely adopted ecosystem architectures for embedded and realtime control applications (such as the qnx, rtlnix, vxworks, and windows ce realtime operating systems), the automotive industry™s autosar (automotive open system architecture), and the scada protocols and interfaces used in the electrical grid. many government users of embedded and realtime capability have taken actions to work with researchers and vendors to develop more capable ecosystems that build on modern concepts and abstractions related to processors, languages, and tools.3,4 ecosystems are also being adopted or are emerging in areas ranging from robotic systems to dataintensive supercomputing.5the ecosystem phenomenon is now pervasively apparent in commercial industry, and it is actively promoted by leading vendors, in part due to the stability of market structure derived from the network effects. ecosystem or framework ﬁownersﬂ (from the examples above: apple, microsoft, google, oracle, several opensource foundations, and many others) control the trajectory of the overall market for components and services associated with that ecosystem, but many firms participate in that ﬁinternalﬂ market. although the risks and costs associated with introducing a new ecosystem or framework may be very high, the risks and costs for niche providers within an established framework can be low. additionally, once a community of suppliers is engaged within an ecosystem, the overall ecosystem can continue to evolve in response to the broad market trajectory and also to new technology developments. thus, new languages can be added to .net (e.g., functional programming with f#), new libraries and language features can be added within java ee (closures to java), and so on. this is one of the enablers and sustainers of the global supply chain. the committee notes, in addition, that the structure of ecosystems may become more or less exposed to developers and users, and indeed entire ecosystems may split or merge. for example, a vendor could choose to expose a previously inaccessible internal interface to allow greater customization by customers and integrators. in the case of enterprise resource planning (erp) systems, for example, vendors expose interfaces that allow ﬁaddinﬂ developers to provide a diverse set of functionalities tailored to particular market segments. this enables a broader diversity of client requirements to be met with less risk to both clients and the framework vendor. the ecosystem structure thus evolves according to changing opportunities and risks for the various stakeholders. examples of the considerations include network effects (benefits of broader adoption of particular ﬁhourglass necksﬂ), vertical integration (reduction in risks associated with integrating separately developed components), and lockin (greater friction in interoperation and choices available for component functionalities).3 see, for example, the workshop convened by the nitrd high confidence software and systems coordinating group, ﬁnational workshop on highconfidence automotive cyberphysical systems,ﬂ april 34, 2008, troy, michigan. available online at http://varma.ece.cmu.edu/autocps/. last accessed august 20, 2010. 4 see also, jeanette wing, 2008, ﬁcyberphysical systems research charge,ﬂ presented at the cyberphysical systems summit, april 24, 2008, st. louis, mo. available online at http://www.cra.org/ccc/docs/cpssummit.pdf. last accessed august 20, 2010. 5 nrc, 2009, assessing the impacts of changes in the information technology r&d ecosystem: retaining leadership in an increasingly global environment, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=12174. last accessed august 20, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.26 critical code: software producibility for defensebox 1.3  the role of the software ecosystems for the dodthere are a number of key advances in software technology that enable the emergence of ecosystems and other architecturebased enrichments in supplychain structure, with consequent benefits to cost and agility and also the consequent risks of more diverse sourcing. these advances range from the design of software architectures, frameworks, and components to the technical properties of modern programming languages, including firstclass encapsulation, advanced typing, interface and package structures, and framework architectures. these and other software technology improvements have also enabled the development and successful implementation of a number of conventional structures of software components used for commercial and government applications. these conventional structures, here called ecosystems, are families of infrastructural elements that are combined in a patterned way to construct precedented applications such as many business and backoffice systems, ecommerce and web applications, and mobile applications. ecosystems include such softwarearchitectural structure as stacks, hardware and software platforms, and software frameworks. they often also include the documents, tools, and practices that accompany these elements (e.g., eclipse and asp.net). the ecosystems also include a diverse array of software and organizational services that support conventional architectural structures. the ability to successfully define robust and broadly adoptable standards (de facto or ratified) and to stimulate a critical mass of compliant implementations is a significant enabler of ecosystem success. the economics of network externalities1 play a significant role in reinforcing successful ecosystems (often regardless of technical merit) and in guiding the initial stages of promotion of emerging new ecosystems. (this issue is elaborated below.)a particular challenge for the dod in defining its own ecosystems is to keep up with rapidly evolving technology and to select those interfaces and component capabilities for which certified components and/or trusted suppliers exist. ecosystems in different categories may share elements and typically support diverse ranges of applications. over the years, the dod has attempted to codify its preferences regarding the components and interfaces in these conventional aggregates with efforts such as the defense information infrastructure common operating environment (diicoe), the joint technical architecture (jta), and the system of systems common operating environment (soscoe). generally speaking, these are broad suites of conventionalized standards and infrastructural elements that have been judged acceptable for adoption in systems generally. these suites may identify particular acceptable ecosystems, but they are not themselves ecosystems by the committee™s definition (or architectures, in the sense of chapter 3).  1 see, e.g., carl shapiro and hal r. varian, 1998, information rules: a strategic guide to the network economy, boston: harvard business press.modern ecommerce frameworks, for example, are ubiquitous in internetbased commerce, but they have also been adopted as internal coordination frameworks for largescale dod systems. the ecosystems contribute enormous value to software and systems projects that rely on them by allowing developers to leverage an enormous investment for which costs are spread across a wide base of users rather than taking on the full effort and expense of developing an entire software system from the ground up. when ecosystems are widely adopted, architectural risks are drastically reduced because principal architectural commitments are embodied in the successful ecosystem, and, additionally, the extent of value to the dod can grow over time due to the positive network externalities. thus, the dod derives benefits from ecosystem adoption, but it must be attentive both to selection criteria and to its ability to participate in the overall evolution and development of the ecosystems within which it participates. one particular issue is the sustainability of ecosystems that are adopted into systems. in some instances, choices may depend more on appraisals of sustainability and network effects (to use economic terms) than on particular technical characteristics. these sustainability factors may influence engineering risk (see box 2.2). the dod may derive great benefits from investing in the evolution of the ecosystems in which it participates, which enhances both technical fit and sustainability.as noted above, these ecosystems are enabled by a wide range of computer science and software engineering advances. the modern software application frameworks essential to webbased systems, ecommerce, and graphical user interfaces of all kinds are enabled by the same advances in programming language design that led to languages such as java, c#, and ada95. many of these ﬁcomponentﬂ advances and, perhaps more importantly, the principal abstractions and architectural concepts underlying established ecosystems, are legacies of past dod investment in computing technology r&d, primarily in the form of 6.1 and 6.2 extramural research funding. because of the rapid pace of infrastructural development, the competitive business environment, and the need to accommodate new functionality, the ecosystems are generally in a state of continuous evolution, carefully managed to stage out new increments of value while minimizing costs and risks for existing adoptersšand thus to retain the benefits of the positive externalities. the evolutionary trajectory for some ecosystems is entirely driven by particular vendors, as is the case with microsoft and .net or oracle and its ebusiness suite. others are driven by complex community processes, as in the case of the opensource lamp stack (see above), the internet protocols themselves, and also some commercial ecosystems, as is the case with many of the ecosystems surrounding javašfollowing the java community process.2 the evolution may include specific component capabilities, architectural and interfaces structures, and associated tooling (as in the case of visual studio and .net). 2 for more information, see the java community process at http://jcp.org/en/home/index. last accessed august 20, 2010. often creates confusion regarding development processes and other systems engineering choices. ﬁone size fits allﬂ modelsševen for incremental iterative developmentsšcan be dangerous.20because of the extent to which modern software builds on existing ecosystem and infrastructural elements, modern software development processes entail activities that go well beyond the design and authoring of new code. modern software development is much more about identifying and defining appropriate and scalable architectures; selecting, using, and adapting infrastructure such as frameworks, components, and libraries; and deploying best practices and tools for collaboration, process support, and 20 with respect to process (chapter 2), hybrid approaches may best be employed, for example, combining straightline processes for precedented elements with iteration and prototyping for innovative elements. with respect to architecture (chapter 3), modular designs that ﬁconcentrateﬂ particular innovative or rapidly evolving functionalities in individual components can greatly reduce overall project risk.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.recognize the pivotal role of dod sofware innovation 27box 1.3  the role of the software ecosystems for the dodthere are a number of key advances in software technology that enable the emergence of ecosystems and other architecturebased enrichments in supplychain structure, with consequent benefits to cost and agility and also the consequent risks of more diverse sourcing. these advances range from the design of software architectures, frameworks, and components to the technical properties of modern programming languages, including firstclass encapsulation, advanced typing, interface and package structures, and framework architectures. these and other software technology improvements have also enabled the development and successful implementation of a number of conventional structures of software components used for commercial and government applications. these conventional structures, here called ecosystems, are families of infrastructural elements that are combined in a patterned way to construct precedented applications such as many business and backoffice systems, ecommerce and web applications, and mobile applications. ecosystems include such softwarearchitectural structure as stacks, hardware and software platforms, and software frameworks. they often also include the documents, tools, and practices that accompany these elements (e.g., eclipse and asp.net). the ecosystems also include a diverse array of software and organizational services that support conventional architectural structures. the ability to successfully define robust and broadly adoptable standards (de facto or ratified) and to stimulate a critical mass of compliant implementations is a significant enabler of ecosystem success. the economics of network externalities1 play a significant role in reinforcing successful ecosystems (often regardless of technical merit) and in guiding the initial stages of promotion of emerging new ecosystems. (this issue is elaborated below.)a particular challenge for the dod in defining its own ecosystems is to keep up with rapidly evolving technology and to select those interfaces and component capabilities for which certified components and/or trusted suppliers exist. ecosystems in different categories may share elements and typically support diverse ranges of applications. over the years, the dod has attempted to codify its preferences regarding the components and interfaces in these conventional aggregates with efforts such as the defense information infrastructure common operating environment (diicoe), the joint technical architecture (jta), and the system of systems common operating environment (soscoe). generally speaking, these are broad suites of conventionalized standards and infrastructural elements that have been judged acceptable for adoption in systems generally. these suites may identify particular acceptable ecosystems, but they are not themselves ecosystems by the committee™s definition (or architectures, in the sense of chapter 3).  1 see, e.g., carl shapiro and hal r. varian, 1998, information rules: a strategic guide to the network economy, boston: harvard business press.modern ecommerce frameworks, for example, are ubiquitous in internetbased commerce, but they have also been adopted as internal coordination frameworks for largescale dod systems. the ecosystems contribute enormous value to software and systems projects that rely on them by allowing developers to leverage an enormous investment for which costs are spread across a wide base of users rather than taking on the full effort and expense of developing an entire software system from the ground up. when ecosystems are widely adopted, architectural risks are drastically reduced because principal architectural commitments are embodied in the successful ecosystem, and, additionally, the extent of value to the dod can grow over time due to the positive network externalities. thus, the dod derives benefits from ecosystem adoption, but it must be attentive both to selection criteria and to its ability to participate in the overall evolution and development of the ecosystems within which it participates. one particular issue is the sustainability of ecosystems that are adopted into systems. in some instances, choices may depend more on appraisals of sustainability and network effects (to use economic terms) than on particular technical characteristics. these sustainability factors may influence engineering risk (see box 2.2). the dod may derive great benefits from investing in the evolution of the ecosystems in which it participates, which enhances both technical fit and sustainability.as noted above, these ecosystems are enabled by a wide range of computer science and software engineering advances. the modern software application frameworks essential to webbased systems, ecommerce, and graphical user interfaces of all kinds are enabled by the same advances in programming language design that led to languages such as java, c#, and ada95. many of these ﬁcomponentﬂ advances and, perhaps more importantly, the principal abstractions and architectural concepts underlying established ecosystems, are legacies of past dod investment in computing technology r&d, primarily in the form of 6.1 and 6.2 extramural research funding. because of the rapid pace of infrastructural development, the competitive business environment, and the need to accommodate new functionality, the ecosystems are generally in a state of continuous evolution, carefully managed to stage out new increments of value while minimizing costs and risks for existing adoptersšand thus to retain the benefits of the positive externalities. the evolutionary trajectory for some ecosystems is entirely driven by particular vendors, as is the case with microsoft and .net or oracle and its ebusiness suite. others are driven by complex community processes, as in the case of the opensource lamp stack (see above), the internet protocols themselves, and also some commercial ecosystems, as is the case with many of the ecosystems surrounding javašfollowing the java community process.2 the evolution may include specific component capabilities, architectural and interfaces structures, and associated tooling (as in the case of visual studio and .net). 2 for more information, see the java community process at http://jcp.org/en/home/index. last accessed august 20, 2010. validation. indeed, it is generally recognized that, for large systems in industry and aerospace, the most significant costs are generally associated with gathering functional and nonfunctional requirements, developing architecture and design, managing process, and achieving assurancešand somewhat less with the writing and evolution of code.21 (issues related to innovative systems for defense are addressed in two chapters of this reportšchapter 2 focuses on requirements, and chapter 3 focuses on architecture and agility at scale.)21 see, for example, economics studies by barry boehm, studies of the ibm rational unified process, and other work that shows that the proportion of coding in the overall process is diminishing. see, rti, 2002, the economic impacts of inadequate infrastructure for software testing, planning report 023, rti project number 7007.011. available online at http://www.nist.gov/director/planning/upload/report023.pdf. last accessed august 20, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.28 critical code: software producibility for defensebox 1.4  the concept of alignmentas noted earlier, complex evolving software ecosystems and rich supply chains are enabled by relatively recent technological developments, although the market forces have been present for a much longer time. the benefit to government and firms alike is in how software is managed, with the breakthrough result of a better alignment of it structures with operational structures in organizations. this affords firms greater flexibility in buyversusbuild decisions. but, more importantly, it enables many organizations to outsource common infrastructure such as databases, application servers, and software frameworks, and to insource only those critical elements that provide unique capabilities and advantage over competitors. this amounts to an ﬁescapeﬂ from the need to redundantly develop infrastructural capabilities. the committee uses the term ﬁalignmentﬂ to refer to this ability to insource only key differentiators and organizationspecific capabilities. generally speaking, alignment is achieved incrementally. as capabilities that previously were innovative become commonplace across firms, the task of advancing them (from the standpoint of a technology user organization such as dod backoffice business functions) is shifted from internal resources to external ones (vendors and other outsource suppliers), enabling the firms to redirect their internal resources to new areas where they can differentiate themselves from their competitors. this is how, for example, the central database for many firms evolved from early network and hierarchical databases into relational transactional databases into virtualized application server capabilities wrapped around web servers and relational databases, with most of the functionality being provided by outside vendors or through opensource de facto consortia as in the lamp stack.the dod also benefits from this when it can shift from expensive custom components (that it must maintain throughout an entire system lifecycle) to offtheshelf components that are constantly being improved upon by their vendors in response to market forces. thus, as technologies evolve and ﬁcommoditize,ﬂ there is a general trend to shift function from insource to outsource.1 an issue for the dod, however,  1 but this is not always the case, as new dimensions of capability and differentiation emerge for formerly commoditized infrastructural elements, as is happening now for data centers and their architectures.as for other entities seeking to maintain leadership in software use and development, is how to effectively track the evolution of the conventional interfaces and architectures and not fall behind. another issue, more directly related to innovation, is how to work with the broad technology community to ensure thatšwhere the dod has leading demandšits requirements can be met as the infrastructure evolves. historically, the dod has accomplished this in many core it areas, as noted in multiple studies. 2,3,4 indeed, when infrastructures are traced historically, it is evident that many of the fundamental architectural concepts originated in or were stimulated by dodsponsored research. for example, many of the architectural elements of linux can be traced back to bsd unix and even multics. this point relates to the discussion later in the report regarding the role of the dod in architecture.from the defense perspective, this yields both benefit and risk. expertise in critical component and infrastructural technologies is concentrating, and the capability of those components is rapidly advancing. the dod cannot so easily ﬁbuildﬂ when other players are all ﬁbuying,ﬂ even when there may be assurance challenges with respect to component providers. if the dod makes too many ﬁbuildﬂ decisions for infrastructural capabilities, costs and risks escalate to the point of intractability. this is because the dod would have to bear the entire cost and risk of developing and sustaining its own custom version of the technology. the established implementations of that technology may have been evolving in the larger commercial market over a period of years, with effective investments spread across a multitude of vendors and users. 2 nrc, 1997, ada and beyond: software policies for the department of defense, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=5463. last accessed august 20, 2010. 3 nrc, 2000, making it better: expanding information technology research to meet society™s needs, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=9829. last accessed august 20, 2010. 4 nrc, 1997, the evolution of untethered communications, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=5968. last accessed august 20, 2010.as noted both in the workshop report issued by this committee22 and in the recent software engineering institute (sei) report on ultrascale systems,23 these issues may be made more challenging for modern interconnected defense systems due to overall scale and complexity, and particularly in requirements and architecture. these systems experience a great deal of architectural risk due to the often long delay until the consequences of early engineering decisions are felt and understood. additionally, the decentralized governance models that are typical for largescale interlinked systems (ultrascale, netcentric, system of systems) can have both positive and negative effects on risk. also, overly conservative choices regarding how to measure progress and earned value can lead toward local optima but away from overall systemsscale success (see chapter 2). finally, overcommitment to particular requirements early in the process can result in lost opportunities for radical cost savings or capability improvements downstream. these risks could potentially be mitigated through innovation in both technological and process measures. 22 nrc, 2007, summary of a workshop on softwareintensive systems and uncertainty at scale, washington, dc: national academies press. available online at http://books.nap.edu/catalog.php?recordid=11936. last accessed august 20, 2010.23 software engineering institute (sei), 2006, ultralargescale systems: the software challenge of the future, pittsburgh, pa: carnegie mellon university. available online at http://www.sei.cmu.edu/library/assets/ulsbook20062.pdf. last accessed august 20, 2010. critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.recognize the pivotal role of dod sofware innovation 29box 1.4  the concept of alignmentas noted earlier, complex evolving software ecosystems and rich supply chains are enabled by relatively recent technological developments, although the market forces have been present for a much longer time. the benefit to government and firms alike is in how software is managed, with the breakthrough result of a better alignment of it structures with operational structures in organizations. this affords firms greater flexibility in buyversusbuild decisions. but, more importantly, it enables many organizations to outsource common infrastructure such as databases, application servers, and software frameworks, and to insource only those critical elements that provide unique capabilities and advantage over competitors. this amounts to an ﬁescapeﬂ from the need to redundantly develop infrastructural capabilities. the committee uses the term ﬁalignmentﬂ to refer to this ability to insource only key differentiators and organizationspecific capabilities. generally speaking, alignment is achieved incrementally. as capabilities that previously were innovative become commonplace across firms, the task of advancing them (from the standpoint of a technology user organization such as dod backoffice business functions) is shifted from internal resources to external ones (vendors and other outsource suppliers), enabling the firms to redirect their internal resources to new areas where they can differentiate themselves from their competitors. this is how, for example, the central database for many firms evolved from early network and hierarchical databases into relational transactional databases into virtualized application server capabilities wrapped around web servers and relational databases, with most of the functionality being provided by outside vendors or through opensource de facto consortia as in the lamp stack.the dod also benefits from this when it can shift from expensive custom components (that it must maintain throughout an entire system lifecycle) to offtheshelf components that are constantly being improved upon by their vendors in response to market forces. thus, as technologies evolve and ﬁcommoditize,ﬂ there is a general trend to shift function from insource to outsource.1 an issue for the dod, however,  1 but this is not always the case, as new dimensions of capability and differentiation emerge for formerly commoditized infrastructural elements, as is happening now for data centers and their architectures.as for other entities seeking to maintain leadership in software use and development, is how to effectively track the evolution of the conventional interfaces and architectures and not fall behind. another issue, more directly related to innovation, is how to work with the broad technology community to ensure thatšwhere the dod has leading demandšits requirements can be met as the infrastructure evolves. historically, the dod has accomplished this in many core it areas, as noted in multiple studies. 2,3,4 indeed, when infrastructures are traced historically, it is evident that many of the fundamental architectural concepts originated in or were stimulated by dodsponsored research. for example, many of the architectural elements of linux can be traced back to bsd unix and even multics. this point relates to the discussion later in the report regarding the role of the dod in architecture.from the defense perspective, this yields both benefit and risk. expertise in critical component and infrastructural technologies is concentrating, and the capability of those components is rapidly advancing. the dod cannot so easily ﬁbuildﬂ when other players are all ﬁbuying,ﬂ even when there may be assurance challenges with respect to component providers. if the dod makes too many ﬁbuildﬂ decisions for infrastructural capabilities, costs and risks escalate to the point of intractability. this is because the dod would have to bear the entire cost and risk of developing and sustaining its own custom version of the technology. the established implementations of that technology may have been evolving in the larger commercial market over a period of years, with effective investments spread across a multitude of vendors and users. 2 nrc, 1997, ada and beyond: software policies for the department of defense, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=5463. last accessed august 20, 2010. 3 nrc, 2000, making it better: expanding information technology research to meet society™s needs, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=9829. last accessed august 20, 2010. 4 nrc, 1997, the evolution of untethered communications, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=5968. last accessed august 20, 2010.commercial software supply chainsthe dod™s supply chain has become increasingly complex. one driver has been the commercial success of software ecosystems that provide a foundation on which to build defense systems. another driver has been the increasing use of tools for collaboration at a distance. these are the same technologies, infrastructure, and practices that have enabled the globalization of diverse services. (indeed because of this it is easy to erroneously conflate supplychain richness with the globalization phenomenon.) the factors driving the supplychain structure include not only the direct costs of development, but also the resulting management agility (such as the ability to revisit choices in infrastructure, technology, and particular suppliers) and rapid access to specialized expertise (domain knowledge and requirements, code development, vendor components, testing and evaluation, process structuring, software architecture, and so on). for commercial applications, these factors combine to enable large firms to quickly adapt and enhance their business models to address competitive challenges. the dod can and should realize similar advantages, but of course it also needs to address the risks, including both the sourcing risks intrinsic in this kind of supply structure and the particular requirements risks that derive from the defense mission. the complexity of software supplychain structures is evident in diverse sectors. a single firm in a sector such as financial services, health care, or manufacturing may develop software at dozens of critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.30 critical code: software producibility for defenseseparate sites around the world. this software is likely to depend on infrastructural components from dozens of vendors, each of whom may also have global operations. this is how the advantages of cost, agility, and expertise are realized and fundamental new functionalities are achieved, for example, those involving crosscutting capabilities related to business intelligence or enterprise process management (both of which are highly relevant to the defense mission). but the risks must also be addressedšwhen the software components are interconnected within a single system, all of these components may be ﬁbehind the firewallﬂ and with direct access to mission data. (issues related to assurance, including challenges related to supply chains, are addressed later in this report, in chapter 4.)the market forces that drive the complexity of the modern supplychain structure for software systems have long been present, but the supply chain and ecosystem richness are only relatively recent phenomena, enabled by the richness of modern software technology. the enabling technologies include modern programming languages, system software components, network protocol development, objectoriented frameworks, emerging serviceoriented concepts (e.g., cloud, saas, soa), advanced tooling for team development and collaboration, and process support. indeed, a number of these core ideas are results of darpa and service funding of research projects in prior decades. an important element of the globalization phenomenon is the pace at which global suppliers outside the united states, in many countries, are moving up the value chainšthat is accounting for an increasing share of the overall value embodied in a product or service. global suppliers, which in the early days focused primarily on lowtechnology offerings such as providing blackbox testing services for webbased software systems developed in the united states and elsewhere or on provisioning remote firsttier technical support capability, are now developing the software for those systems directly, as well as engaging in requirements analysis, architecture, and design for those systems. this commercial trend, accelerated through direct strategic investment by governments, exacerbates the dod concerns about the mission impact of foreign influence on dod softwarešnamely, the risk of unwanted functionality in delivered software (and hardware as well, where the assurance challenges can be greater). finding 13: the dod relies fundamentally on mainstream commercial components, supply chains, and software ecosystems for both business systems and many mission systems. nonetheless, the dod has special needs in its mission systems driven by the growing role of software in systems. as a result, the dod needs to address directly the challenge of building on and, where appropriate, contributing to the development of mainstream software that can contribute to its mission.dod software supply chainsthe dod is aggressively applying these ideas for business applications. in the case of it systems and components such as databases, operating systems, and business systems applications, the dod can align well with commercial products being produced to support industry.at the same time, however, software has become a critical differentiator in most missionrelated systems and servicesšand (as noted above) it is growing in the extent and depth of its impact every year. it is safe to claim, in fact, that the largest opportunities for successful differentiation in new mission systems are very often derived from softwaremanifest capabilities. it is therefore not surprising that the largest risks in systems development are associated with the software production. almost always, dod mission systems rely on a combination of innovative functionality and capabilities already present in established ecosystems. the dod must obviously leverage the extensive commercial development of software processes, methods, tools, architectures, and products. but, as the committee notes below, the dod must also take action, as it has done historically, to foster the capabilities of its supply chain, broadly construed, to enable it to stay ahead of its rapidly advancing adversaries. in particular, this new reality poses challenges not only for developing innovative functionalities, but also for assurance and ecosystems leadership.as noted above, largerscale innovative missionfocused applications generally include both innovacritical code: software producibility for defensecopyright national academy of sciences. all rights reserved.recognize the pivotal role of dod sofware innovation 31tive custom software components and components based on existing ecosystems. as a result, the dod necessarily relies to some extent on the extant supplychain structures with their diversity of suppliers. this creates both technical and management risks related to assuring control over functionality and assurance.24 these challenges focus on understanding the extent and nature of supplychain and ecosystem dependencies, on developing both incentives and technical means to mitigate assurance risks, and on understanding the leadership challenges with respect to sustaining some control (or at least awareness) over future trajectories where there are necessary ecosystem dependencies. governments are recognizing the difference between componentlevel participation in an ecosystemassociated supply chain and architectural leadership of that ecosystem.25 u.s. firms have developed and led the evolution of most of the key ecosystems on which the dod and the entire industry rely. this is a consequence of technological and market leadership, and the technological aspects of this leadership, in turn, are in large measure consequences of the long record of r&d investment in core computer and information technologies by darpa and the services and a small number of other networking and information technology research and development (nitrd) agencies, principally the national science foundation (nsf) and, historically, nasa. these investments are now diminished (box 1.5). the committee considers priorities regarding this investment (chapter 5) as well as arguments for and against a scaling up of this investment (this chapter) and means by which the investment can be evaluated and optimized (chapter 5).summaryšsoftware and the dodsoftware is highly significant for the dod and becoming more so. the dod depends not only on the ability to develop new code, but also on commercial software capability, particularly as manifested in established evolving software ecosystems. software supply chains are growing in scale, complexity, and geography, and the influence of these shifts on dod software must be considered. although the united states continues to retain innovation leadership in software areas important to the dod, there are three proximate factors that could cause the loss of that leadership. first, as noted above and documented in box 1.5, the dod investment in software producibility has in recent years diminished considerably from its prior levels, which had been sustained for more than three decades. second, concomitant with the diminishing of u.s. investment is a ramping up of investment by foreign governments in their national it capabilities, including in software.26 the third factor, also as noted above, is the inexorable trend of globalization and rich supply chains.of course, very strong shifts overseas have happened in other sectors, such as consumer electronics, and there is still debate regarding the strategic impact of these shifts. it is the committee™s view, however, that the leveraged role of software and the particular special role of software in defense and national 24 dsb, september 2007, report of the defense science board task force on mission impact of foreign influence on dod software, washington, dc: office of the under secretary of defense for acquisition, technology, and logistics. available online at http://stinet.dtic.mil/oai/oai?&verb=getrecord&metadataprefix=html&identifier=ada473661. last accessed august 20, 2010. 25 ﬁinternetšnew shot in the arm for us hegemony,ﬂ china daily, january 22, 2010. available online at http://www.chinadaily.cn/china/201001/22/content93643273.htm. last accessed august 20, 2010. 26 see organisation for economic cooperation and development (oecd), information technology outlook 2006, paris, france: oecd. available online at http://www.oecd.org/document/10/0,3343,en2649374413748685811137441,00.html#tocat. accessed february 26, 2008. also see nrc, 2009, assessing the impacts of changes in the information technology r&d ecosystem: retaining leadership in an increasingly global environment, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=12174. last accessed august 20, 2010. see also ashish arora and alfonso gambardella, eds., 2005, from underdogs to tigers: the rise and growth of the software industry in brazil, china, india, ireland, and israel, oxford, england: oxford university press, pp. 171206. rafiq dossani and martin kenney, 2007, ﬁthe evolving indian offshore services environment: greater scale, scope and sophistication,ﬂ sloan industry studies working papers, number wp200734, 2007. available at http://www.industry.sloan.org/industrystudies/workingpapers/index.php. accessed february 26, 2008. oecd, 2006, ﬁchina will become world™s second highest investor in r&d by end of 2006, finds oecd,ﬂ oecd online, http://www.oecd.org/document/26/0,2340,en2649201185377705221111,00.html. accessed february 26, 2008. critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.32 critical code: software producibility for defensebox 1.5  the decline in federal investment in software producibility researchthe extent and structure of federal itrelated r&d investment are documented in a series of reports published by the national coordination office (nco) for networking and information technology research and development (nitrd). these reports have been issued annually since the first such report was included in the fy1992 federal budget submission, and they document research sponsorship from a diverse set of federal agencies related to it and networking. nitrd is a multiagency coordination activity, which operates under the auspices of the white house office of science and technology policy (ostp) and the office of management and budget (omb), but the funding that is reported is in the individual agencies™ budgets and generally under their control. the reports include extensive narrative descriptions of research accomplishments and plans, as well as a budget matrix that shows investment levels by agency, organized into a set of eight categories.1 the budget matrix shows both proposed amounts for the forthcoming fiscal year and approximate actual amounts for the thencurrent fiscal year. there are two categories that relate to software producibilityšsoftware design and productivity (sdp) and high confidence software and systems (hcss). the committee analyzed the trends in these two categories over the past decade and related its findings to the overall nitrdcoordinated budget that totals investment in all eight categories. (note: the analysis excluded national institutes of health (nih) data. this was done for two reasons: first, nih changed its reporting methodology in 2010, which creates noncommensurability for a longitudinal analysis. second, nih allocations among the nitrd topic categories were determined through the use of an automated textbased patternmatching algorithm. the committee believes this approach, particularly in topics related to software production generally (rather than, for example, the production of software for particular applications), is likely to lead to significant overreporting of application software development projects as sdp or hcss research.)the principal result of the analysis is that the sdp and hcss investments, separately and combined and in absolute dollars and as a percentage of the nitrd budget, have dropped considerably in the past 5 years. at the same time, the overall nitrdcoordinated budget has grown. for example, from 2004 to 2010 the combined allocation to sdp and hcss fell by 45 percent, while the overall nitrd budget more than doubled. on a percentage basis, the combined sdp and hcss allocation fell by a factor of almost four, from 24.6 percent of the nitrd total in 2004 to just 6.5 percent of the total in 2010.one of the challenges in this type of budget analysis is the breadth of the categories and the imprecision of category boundaries. this challenge is unavoidable in the analysis of research budgets, but it is particularly difficult in the analysis of nitrd budgets because the different agency staff may apply slightly different criteria when categorizing diverse and innovative research projects. when category labels change, for example, with the introduction of the category of cybersecurity and information assurance (csia), it is very likely that some projects in hcss were relabeled as csia. although it would be desirable to assess each grant for its relevance to the categories or, better, to the particular technical disciplines that support ﬁsoftware producibility,ﬂ this would be infeasible because of the large number of research grants and contracts and also because agencies are reluctant to share detailed data regarding awards and category assignments. an analysis of the narrative descriptions associated with the categories in the nitrd report suggests that there is an acceptably close alignment of sdp and hcss with the overall investment that might directly relate to software producibility. the narrative descriptions do reveal some areas included in sdp or hcss that might not be included in a ﬁsoftware producibilityﬂ category, for example, due to application specificity or other attribute.taking all this into consideration, the committee judges that the combination of sdp and hcss is sufficiently close to a notional category of software producibility that we accept it as a surrogate for overall investment across nitrd agencies (nih excluded) in research that relates to the present report. 1 the categories have slowly evolved over the years, but categories related to software have remained unchanged for the past decade.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.recognize the pivotal role of dod sofware innovation 330.0 50.0 100.0 150.0 200.0 250.0 20012002200320042005200620072008200920102001200220032004200520062007200820092010hcsssdpdollars in millionsyearosd/disa/svcsnistnasadoe/nnsadarpansansfagenciesfigure 1.5.1figure 1.5.1 investment in hcss and sdp by agency and by year. note: office of the secretary of defense (osd), defense information systems agency (disa), and service investments have been rolled up into a single category that covers defense agency investments other than those in darpa and the national security agency (nsa). nih amounts excluded for reasons noted in the text.0.0 500.0 1,000.0 1,500.0 2,000.0 2,500.0 3,000.0 2001200220032004200520062007200820092010dollars in millionsyearosd/disa/svcsnistnasadoe/nnsadarpansansfagenciesfigure 1.5.2figure 1.5.2 total nitrd investment by agency and by year. note: osd, disa, and service investments have been rolled up into a single category that covers defense agency investments other than those in darpa and nsa. nih amounts excluded for reasons noted in the text. critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.34 critical code: software producibility for defensemore details regarding the state of research investment are shown in figures 1.5.1 and 1.5.2. the former shows the investment by year and by agency for hcss (left side) and sdp (right side). it is evident from figure 1.5.1, for example, that nasa, darpa, and the department of energy (doe) have stepped almost completely away from engaging in research related to sdp. figure 1.5.2 shows the overall extent of the nitrd investment in all eight categories of research related to networking and it. two trends are immediately apparent from these charts: there was a surge of sdp and hcss investment in the mid2000s by several agenciesšdarpa, doe/national nuclear security administration (nnsa), and nasašfollowed by a precipitous drop in their investments and in the total investment. the result is that nsf is now the dominant source of investment in both categories. figure 1.5.3 shows the percentage of total nitrd investment in sdp and hcss. it illustrates that while the total nitrd investment more than doubled over the past decade, the percentage of investment in sdp and hcss fell off sharply. 13.4%19.1%24.3%24.6%21.4%20.1%9.3%8.8%7.9%6.5%0.0%5.0%10.0%15.0%20.0%25.0%30.0%2001200220032004200520062007200820092010percentage of total yearsfigure 1.5.3figure 1.5.3 percentage of total nitrd investment in either sdp or hcss.box 15 continuedsecurity systems of all kinds make this kind of shift much more consequential for defense software producibility and for u.s. ability to advance overall defense system capability. in exploring the role of the dod in advancing software producibility, which is the topic of chapters 2, 3, and 4, the committee considers the interplay of four factors:1. productivity. the dod benefits from efficiencies gained in the development of innovative functionality through advances in mainstream software producibility. for mission systems, there are particular challenges relating to requirements and validation, architecture and modeling, process and measurement, and tools and language systems.2. innovation. the dod relies on technologically enabled advances in software producibility to enable the more effective creation of unprecedented systems and the interconnecting of existing and new systems to deliver advanced functionality with acceptable cost and risks. critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.recognize the pivotal role of dod sofware innovation 353. assurance. the dod faces new challenges to addressing the risks associated with diverse and international supply chains, including the development of practices and technologies for software assurance.4. ecosystems and infrastructure. the dod unavoidably relies on mainstream software ecosystems in defense systems and therefore has a stake in the processes by which those ecosystems evolve and are led.the role of the dod in addressing its software needsgiven the importance of software to the dod, and to its mission systems in particular, and given also the ongoing rapid advances in software capability worldwide, it is vital to ensure that the department can not only meet its software needs now, but also sustain its software leadership well into the future. a key question addressed by the committee is to what extent the dod, without providing its own explicit r&d stimulus, can rely on industryšspecifically the domestic defense industrial base and supporting vendorsšto produce software innovations in areas of defense significance at a rate fast enough to allow the dod to fully meet software requirements and remain ahead of potential adversaries. this leadership must be with respect to both the capability of systems and effective defense against attacks on those systems. as noted above, the dod has particular requirements that must be dealt with on systems that are both very large scale and have lifecritical mission requirements. although these areas may overlap with civil and commercial needs, very often the dod requirements are more sophisticated and cuttingedge than those in the rest of the marketplace. also, dod adversaries may choose to ﬁattackﬂ software in the supply chain during development phases of a projectšsecurity is much more than about attacks staged over networks during system operations. additionally, major dod development projects are structured in a way that often keeps development teams at arm™s length from the key operational mission stakeholders and from overall project management. for these reasons, technological advancement would significantly benefit the dod™s ability to produce the software it needs. the areas identified in this report, and particularly in chapter 5, are areas where the committee sees the dod as having leading demand. the committee notes that the issue is not areas where the dod has ﬁuniqueﬂ requirements, but rather the much broader category of areas where it has leading demand with respect to particular kinds of requirements. one obvious example is software assurance, where dod and national security needs may go well beyond even what is being developed for commercial financial services or health care devices. another example is the riskmanaged development of unprecedented architectural design of the kind required to create highinterconnectivity systems such as fcs, netcentric systems, and many other major defense platforms that have few commercial precedents or analogs.the committee notes that even where industry is aggressively innovative, it may not have sufficient incentives to produce the technology and supporting tools necessary to generalize applicationspecific software innovations. additionally, the technologies may manifest innovative concepts, but in a way that cannot be readily adopted by the dod, for example due to the safety, reliability, and assurance considerations particular to defense applications that, to be addressed, require further technological innovation. it would thus be overly optimistic to conclude that dod needs such as these will somehow be adequately addressed through a combination of demandpull from the dod and technologypush from the defense sector (i.e., firms that primarily supply the dod) or the broader commercial it sector. in many other industries and infrastructures, this may be a legitimate conclusion, and in these areas the best policy may be for the dod to follow the market. however, this is not generally true for software technology, particularly as needed for defense mission systems, where the dod has leading demand in multiple critical areas, as detailed later in this report.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.36 critical code: software producibility for defensefinding 14: the dod™s needs will not be sufficiently met through a combination of demandpull from the military and technologypush from the defense or commercial it sectors. the dod cannot rely on industry alone to address the longterm software challenges particular to defense. the above finding is based on consideration of both the history of software innovation and the set of future needs identified in this study.commercial r&d investmentdefense contractors do invest extensively in software research, but generally speaking it is focused on manifesting specific capabilities in supporting the competitiveness of bids through differentiated skills and products. commercial it firms also invest in software research and form an important part of the defense it supply chain, but may not necessarily carry out research aimed at meeting the dod™s needs. both defense and commercial it firms lack strong incentives to invest directly in broadimpact areas such as these, particularly when many of the advantages derived from the investment are nonappropriable, in that the associated intellectual property cannot be readily controlled and as a consequence the benefits may readily diffuse not only into the supply chain for the contractor but also to competitors (more on this point is given below).27 indeed, it is important to note that there are certain technological improvements that may in fact not necessarily be good for business, even when the dod derives capability and acquisition advantage. additionally, and perhaps most importantly, there is the issue of horizon. prudent business decisions are generally informed by returnoninvestment calculations, which depend on (1) appropriability, (2) timeliness, (3) investment risk, and (4) measurability/observability of return. many improvements in practices, for example, come only after sustained commitments and much technical exploration (after which benefits may rapidly diffuse across the industry). additionally, benefits, even when judged significant by technical leaders, may be difficult to quantify, due to the measurement challenges that persist in software and the softwarerelated aspects of systems engineering (see chapter 2). in other words, in investing in software producibility, all four of the elements above are problematic. and therefore, in a competitive market, individual companies generally have few market incentives for such investments. these factors tend to drive internal r&d investments in contractors toward a combination of addressing business needs expected 1 to 2 years in the future and avoiding technological surprise from competitors. government research and development in software producibility, from a purely structural perspective, can be less focused on appropriability and investment risk. additionally, government can invest directly in improving measurement capability, when that is a source of risk (see the discussion of measurement in chapter 5). the challenge of roi and appropriabilityit is an economic reality that it is difficult for a firm to make a compelling case of return on investment (roi) to undertake innovations when those innovations have a nonappropriable character, which is to say that the intellectual property associated with the innovations diffuses broadly into the engineering discipline and the economy. this is a familiar issue to those involved in defining industrywide best practices, standards, and other commonalities. many of the most important and highly leveraged, governmentoriginated innovations (undertaken by both academia and industry) are in the economic ﬁcommons.ﬂ this creates challenges in measuring value created, because the value has broad and dif27 see, e.g., nrc, 2002, information technology, research, innovation, and egovernment, washington, dc: national academies press, p. 101. available online at http://www.nap.edu/catalog.php?recordid=10355. last accessed august 20, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.recognize the pivotal role of dod sofware innovation 37fuse benefits.28 a recent nrc report on software and the economy29 notes that ﬁthe economic rationale for government investment is based on the nonappropriability of many significant it innovations, including the most widely used idiomatic data structures and algorithms, as well as design and architectural patterns. moreover, the it industry relies on a number of technical and process commonalities or standards such as the suite of internet protocols, programming languages, core design patterns, and architectural styles.ﬂ these innovations effectively ﬁraise everyone™s boatﬂ in the same way as do government investments in bioscience, health care, and other strategically important scientific disciplines. this includes many of the most highly leveraged areas of software research such as improvements in abstraction mechanisms, design notations, programming languages, software analysis and model checking, basic algorithms, design patterns and architecture concepts, and other core techniques. this is not to say that industry does not invest in nonappropriable resultsšit does so extensively in the area of standards and also through investment in university projects and other activities. but (for the reasons cited here) the incentives to sustain this investment are lower than for proprietary development efforts.the committee notes, in addition, that when research results are not appropriable, researchers are less likely to be able to secure patents. (thus, it can be safely hypothesized that direct revenues from licensing universityowned patents are likely to be significant underestimates of the value created by federally funded research, especially in the case of softwarerelated university inventions.)to complicate matters further, the manner in which software is protected as intellectual property is often distinct from what is done in other fields such as biomedicine. a software system is often a combination of differently protected elements, organized following architectural elements of several ecosystems along with custom elements. there is often considerable intellectual property embedded in the architectural designs themselves, even in the absence of components that populate those designs. all this combines to make the nonappropriable, yet valuable, aspects of the work hard to identify. finally, the committee notes that the software industry is shifting from the development of software products to an increased focus on integration, custom development, and other services.30 more than half the revenues of software product companies are now coming from services rather than from product sales, but product sales tend to be the most scalable and profitable part of the business.31 additionally, the softwareproduct sector is consolidating and thus shrinking in numbers, decreasing from more than 400 to less than 150 publicly listed software product companies on u.s. stock exchanges in the past 8 years.32 another consequence of the shifts toward services and consolidation may be a reduction in 28 indeed, fear of value diffusing to competitors that can assimilate it more efficiently into their practices can create a negative incentive to invest, although it can be dangerous to make this judgment when evidence is lacking, because innovation leadership may be less easy to recover once lost.29 nrc, 2006, measuring and sustaining the new economy, software, growth, and the future of the u.s economy: report of a symposium, washington, dc: national academies press. available online at http://www.nap.edu/openbook.php?recordid=11587. last accessed august 20, 2010.30 for quite a few years, about twothirds of global revenues in the software industry have actually been from services (such as custom software development, maintenance, it consulting, and technical support), and only onethird of revenues have come from the product companies. see michael a. cusumano, 2004, the business of software, new york: free press, p. 46, footnote 19, citing standard & poor™s annual data. an issue in these analyses is how the word ﬁservicesﬂ is definedšit is used both for custom development/integration by teams of people and also for ﬁsoftwareasaserviceﬂ (saas) and cloudbased delivery of software value. additionally, the distinction between ﬁproductﬂ and ﬁserviceﬂ in software is becoming increasingly muddy as licensed product software delivered to customers is complemented by offsite saas and cloudbased software generally. for many end users, for example, there may be relatively little distinction in the experience, say, of microsoft office tools on a desktop computer (a ﬁproductﬂ) and microsoft office live or google documents tools on a browser (a ﬁserviceﬂ). a similar statement could be made at the enterprise level, for example, regarding customer relationship management (crm) software. this shift is the result of evolving business models enabled by technology and infrastructure developments. 31 thus, only about onesixth of global software industry revenues (half of the onethird of revenues from products) are from product sales. see michael a. cusumano, 2008, ﬁthe changing software business; moving from products to services,ﬂ ieee computer 40(1):2027.32 see p. 22 in michael a. cusumano, 2008, ﬁthe changing software business; moving from products to services,ﬂ ieee computer 40(1):2027. this may also reflect postbubble consolidation in both technology and mediafocused companies.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.38 critical code: software producibility for defensesupport for new software research. de facto consortia, often but not always manifest as opensource projects, are often the centers for industrywide innovation.33changes in the dod innovation environmentthe question regarding the extent to which the dod can meet its ongoing software needs through innovationpush from the commercial sector has to be answered in the context of three additional factors, which follow three significant shifts in the environment of technology innovation. the first is the growing globalization of the software industry, as noted earlier, with rapid gains in capability in india and china (and elsewhere in asia) and russia as well as steady gains in europe.34,35 this shift creates competitive pressures with respect to the rapidly increasing proportion of defense mission capability embodied in software. it also amplifies the challenge of mission assurance, given the increasing extent to which dod software will likely be developed in foreign countries. this topic was taken up by the committee, and chapter 4 addresses practice and technology issues related to software assurance, including both preventive measures in the engineering process and evaluative measures appropriate for development and for test and evaluation. other dimensions of cybersecurity are consequential but not within the scope of this reportšthese were discussed at length in the 2007 dsb task force report mission impact of foreign influence on dod software.36 the second shift has been the reduction over the past decade of direct dod investment in advancing software capability within the defense industrial base and its supply chain (see box 1.5). although this shift may be under reconsideration, it nonetheless raises a key question that was considered extensively by this committee, which is whether industry, without explicit r&d stimulus from the dod, will produce innovations in areas of interest to the dod of the kind and extent that are needed to meet the ongoing rapid growth in dod software requirements.the third shift is a consequence of the second, which is the reduction in phd output due to the drop in r&d investment in software producibility. historically, the dod has had a significant leadership role in creating and sustaining the innovation advantage of the united states in it and in fostering new generations of innovators and technical leaders in computer science and it. this role has been evident from the earliest days of computing during world war ii. that this dod investment has been a significant driver of u.s. capability and innovation in information technologies is documented in several national studies.37,38,39 this has had the salutary benefit of enabling the united states to develop and retain innovation and ecosystems leadership. in areas related to software producibility, including high33 examples in the realm of open source include apache, linux, eclipse, and other widely adopted open source. in addition, formal consortia are often created to address industrywide issues, as in the case of w3c (http, html, xml, css, and other webrelated standards) and tcg (tpm, trusted storage, and other trustrelated standards for hardware). finally, expert groups are often convened by standards organizations to address common issues, as in the case of jpeg (iso and itu) and mpeg (iso).34 see michael a. cusumano, 2006, ﬁwhere does russia fit into the global software industry?ﬂ communications of the acm 49(2):3134. see also, michael a. cusumano, 2006, ﬁenvisioning the future of india™s software services business,ﬂ communications of the acm 49(10):1517. 35 in china, there are private and stateconnected companies under government sponsorship to develop ecosystems and infrastructure software (china versions of cdma/gsm, embedded operating systems, and search engines, for example) to reduce dependence on firms such as qualcomm, nokia, microsoft, google, etc.36 dsb, september 2007, report of the defense science board task force on mission impact of foreign influence on dod software, washington, dc: office of the under secretary of defense for acquisition, technology, and logistics. available online at http://stinet.dtic.mil/oai/oai?&verb=getrecord&metadataprefix=html&identifier=ada473661. last accessed august 20, 2010.37 nrc, 1997, ada and beyond: software policies for the department of defense, washingon, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=5463. last accessed august 20, 2010.38 nrc, 2000, making it better: expanding information technology research to meet society™s needs, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=9829. last accessed august 20, 2010.39 nrc, 1997, the evolution of untethered communications, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=5968. last accessed august 20, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.recognize the pivotal role of dod sofware innovation 39confidence systems, data from the nitrd coordination reports show that the dod has reduced its basic research investment (see box 1.5). in addition to these shifts, there may also be cases where industry has little economic incentive to acknowledge fundamental gaps in knowledge. this is not so unusual. one obvious example is illstructured contracts, often from the government, that create perverse incentivesšfor example, where project difficulties (or inadequate tooling and practices) may accrue to a contractor™s economic benefit in the form of increased contract costs and profits, along with longterm revenue streams resulting from costly postdeployment repair and maintenance requirements. a second example is the consequence of poor measurement capability (as noted above), particularly relating to quality and securityšﬁassurance  metricsﬂ in the terminology of the 2007 dsb task force report.40 when metrics and observables are lacking, it is difficult to construct a business case for improvement of the underlying phenomena of concernšquality and security in this case. a third example is inadequate best practices. when metrics are weak, we must rely disproportionately on folklorederived best practices and processes and organizational maturity to achieve productrelated goals. process compliance is relatively easier to achieve and certify than quality, but in software it is not always strongly correlated. as noted, fundamental improvements in best practices to enhance what can be achieved in terms of systems capability, productivity, quality, agility, and other characteristics sometimes fall into the category of nonappropriable innovations, discussed above, and thus may not readily be the subject of industry investment. these factors combine to lower industry economic incentives to address the producibility challenge.recommendation 11: the dod, through its director of research & engineering (ddr&e), should regularly undertake an identification of areas of technological need related to software producibility where the dod has ﬁleading demandﬂ and where accelerated progress is needed to support the defense mission.the necessity of innovation in softwareis there a need to innovate?that global suppliers are moving up the value chain41 suggests the possibility that u.s. leadership may be eclipsed in many of the core technologies related to systems architecture, languages and tools, and software assurance, as well as with respect to key design elements of software ecosystems and infrastructure. this suggests a key question, particularly as we contemplate the commitment of resources to new r&d activity: is there, in fact, strategic value in retaining u.s. leadership in software producibility? the committee argues strongly in the affirmative, based on the unique role and technological characteristics of software. the dsb task force report on foreign software also asks this question, focused on the particular area of software assurance, and offers an affirmative response, noting the essential requirement that the united states maintain advanced capability for ﬁtest and evaluationﬂ of it products. in other words, reputationbased or trustbased credentialing of software (ﬁprovenanceﬂ) needs more and more to be augmented by direct, artifactfocused means to support acceptance evaluation. the dsb task force recommends more effective direct evaluation by consuming organizations throughout the software supply chain, including better ways for producers to create software for which direct evidence of critical quality 40 dsb, september 2007, report of the defense science board task force on mission impact of foreign influence on dod software, washington, dc: office of the under secretary of defense for acquisition, technology, and logistics. available online at http://stinet.dtic.mil/oai/oai?&verb=getrecord&metadataprefix=html&identifier=ada473661. last accessed august 20, 2010. 41 this is in the sense of moving from more routine activities that require minimal technological sophistication (such as firsttier call centers, systemlevel ﬁblackboxﬂ testing focused on the user experience, and similar activities) to more valueenhancing activities (such as custom software design and development). for software, this shift is enabled primarily through increased sophistication in technology and business practices.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.40 critical code: software producibility for defenseand functionality attributes can be provided. it concluded that test and evaluation should be supported by a broad range of software engineering technologies and interventions, not just those employed at the late test phase of development. (these issues are explored more extensively in chapter 4.) both the 2007 dsb task force report on foreign software42 and the dsb 2000 report on defense software43 also highlight the importance of commercial technology to the dod, including the essential elements (operating systems, databases, application servers, and so on) of most of the predominant software ecosystems architectures. dod™s historical investment in basic research has influenced these commercial technologies in ways that have facilitated dod adoption (for example, early attention to scalability, process separation, interconnection, and survivability in operating systems and distributed systems infrastructure). without continued research investment, that influence will diminish just when the offtheshelf technologies are rising in importance to dod systems. additionallyšand looking beyond software assurance into the other critical dimension of software producibilityšwithout continued research investment, the dod will lose effectiveness in its ability to undertake custom software engineering to rapidly achieve high levels of capability and to adapt with maximum agility to changes in the operating environment. a significant loss of u.s. leadership in either area could threaten the dod™s ability to produce and assure the software it requires.historically, the dod investment has been an enabler, both directly and indirectly, of u.s. technological leadership in software innovation (box 1.6). this has helped enable the united states to be a leader in the development of software ecosystems, which means that the dod is able to rely on ecosystem architectures and components with greater confidence. it has afforded a high level of capability in software producibility for the necessary custom software that the dod must develop or acquire.will software capability reach a plateau? some have contended that software capability may be reaching a plateau, and as a consequence there is reduced need for leadership and innovation, because the technologies are inevitably commoditizing and the engineering focus is shifting to optimization and routinization. this suggestion is sometimes offered as an analogy with other technology disciplines, ranging from many specialized materials to display panels and memory chips. the committee views this contention as dangerously incorrect.the reality is that software is not at a plateau, despite the fact that suggestions of the possibility are made on a regular basis. consider, for example, the ambitious aspirations of those developing fortran (box 1.7). a similar story can be told about the ﬁfourth generationﬂ database languages introduced a few decades later and, more recently, about languages for business rules. these are all major innovations with farreaching impact, and in all cases they delivered considerable value. but they also inspired computer users to greater ambitions, and thus the limits of these innovations were reached. one of the most significant special characteristics of software, as noted at the outset of this report, is its unboundednessšthe lack of natural physical limits on its scale and complexity. as the sophistication of languages, models, tools, and practices increases, the ambitions of computer users continue to be realized. these characteristics also mean that while these developments move us forward, they do not actually get us closer to ﬁbeing thereﬂ at some plateau of capability and emerging commodity status. new softwaremanifest capabilities are constantly emergingšfor example, machinelearning technology is now used in applications ranging from data mining to robot design and qualityoflife enhancement for seniors. the profound fact is that software seems to be limitless. for software, ﬁcontinuous improvementﬂ in capability (as distinct from process) is less a matter of finetuning than an innovation 42 dsb, september 2007, report of the defense science board task force on mission impact of foreign influence on dod software, washington, dc: office of the under secretary of defense for acquisition, technology, and logistics. available online at http://stinet.dtic.mil/oai/oai?&verb=getrecord&metadataprefix=html&identifier=ada473661. last accessed august 20, 2010.43 dsb, november 2000, report of the defense science board task force on defense software, washington, dc: office of the under secretary of defense for acquisition, technology, and logistics. available online at http://oai.dtic.mil/oai/oai?verb=getrecord&metadataprefix=html&identifier=ada385923. last accessed august 20, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.recognize the pivotal role of dod sofware innovation 41process that regularly delivers orderofmagnitude jumps in capability. the improvements are not just outcomes from the moore™s law curves and other exponentials in the underlying physical infrastructure of processors, memory, and networks. those improvements are significant enablers, but our ability to produce increasingly complex software artifacts has largely been enabled by a steady pace of technological breakthroughs in software practices, technology, languages, models, and tooling. (the performance of software has been enabled by the development of new algorithms, by advances in hardware, and by simplification and rescoping of the computational problems being solved.)similar observations apply to software ecosystems. these are a critical and essential development to provide conventionalized access to infrastructure and capability on which systems are built. they are, in fact, the success of software reuse.44 as technical progress is made, these structures evolve, with increasing levels of infrastructure capability, for example in operating systems, databases, application servers, frameworks of various kinds, data center services, and so on. in a sense, this is analogous to a 44 butler w. lampson, 1999, ﬁsoftware components: only the giants survive,ﬂ 21st international conference on software engineering (icse™99), keynote address. available online at http://research.microsoft.com/enus/um/people/blampson/70softwarecomponents/70softwarecomponents.doc. last accessed august 20, 2010. box 1.6 lessons about the nature of research in itthe following material is reprinted from national research council, 2003, innovation in information technology, national academies press, washington, dc, pp. 24.the results of researchšamerica™s international leadership in itšleadership that is vital to the nationšsprings from a deep tradition of research. . . .šthe unanticipated results of research are often as important as the anticipated results. . . .šthe interaction of research ideas multiplies their impactšfor example, concurrent research programs targeted at integrated circuit design, computer graphics, networking, and workstationbased computing strongly reinforced and amplified one another. . . .research as a partnershipšthe success of the it research enterprise reflects a complex partnership among government, industry, and universities. . . .šthe federal government has had and will continue to have an essential role in sponsoring fundamental research in itšlargely universitybasedšbecause it does what industry does not and cannot do. . . . industrial and governmental investments in research reflect different motivations, resulting in differences in style, focus, and time horizon. . . .šcompanies have little incentive to invest significantly in activities whose benefits will spread quickly to their rivals. . . . fundamental research often falls into this category. . . . the vast majority of corporate r&d addresses product and process development. . . .šgovernment funding for research has leveraged the effective decision making of visionary program managers and program office directors from the research community, empowering them to take risks in designing programs and selecting grantees. . . . government sponsorship of research especially in universities also helps to develop the it talent used by industry, universities, and other parts of the economy. . . .the economic payoff of researchšpast returns on federal investments in it research have been extraordinary for both u.s. society and the u.s. economy. . . . the transformative effects of it grow as innovations build on one another and as user knowhow compounds. priming that pump for tomorrow is today™s challenge.šwhen companies create products using the ideas and workforce that result from federally sponsored research, they repay the nation in jobs, tax revenues, productivity increases, and world leadership. . . .critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.42 critical code: software producibility for defensebox 1.7 fortran was a breakthough but did not lead to a ﬁsoftware plateauﬂit is instructive to consider the publication more than 50 years ago of the 1958 landmark paper by john backus describing the first fortran compiler.1 the title made reference to ﬁautomatic programming,ﬂ and indeed this phrase was widely used at the time, including in the titles of technical conferences.2 the point of this phrase, with respect to backus™s great accomplishment, is that there was a much more direct correspondence between his highlevel programming notationšthe earliest fortran codešand pure mathematical thinking than had been the case with the early machinelevel code. one can construe that it was imagined that fortran enabled mathematicians to express their thoughts directly to computers, seemingly without the intervention of programmers. this was an extraordinary and historical breakthrough. but we know that, in the end, those mathematicians of 50 years ago soon evolved into programmers as a consequence of their growing ambitions for computing applications. just a decade after the backus paper, fortran was used to support listprocessing applications, typesetting applications, compilers for other languages, and other applications whose abstractions required some considerable programming sophistication (and representational gerrymandering) to be represented effectively as fortran data structuresšarrays and numeric values. (see further discussion in footnote 26 in chapter 5.) 1 john w. backus, november 1958, ﬁautomatic programming: properties and performance of fortran systems i and ii,ﬂ in proceedings of the symposium on the mechanisation of thought processes, teddington, middlesex, england: the national physical laboratory. available online at http://archive.computerhistory.org/resources/text/fortran/102663114.05.01.acc.pdf. last accessed august 10, 2010.2 an early example is the 1954 ﬁsymposium on automatic programming for digital computers.ﬂ see john backus, 1978, ﬁthe history of fortran i, ii, and iii,ﬂ history of programming languages, new york: acm. process of commoditization, in that many of the key architectural interfaces effectively define market structures for competitive supply of capabilities. but, at the same time, providers and clients continue to innovate above and around the infrastructure, creating new kinds of capability and differentiation. additionally, there is very often continued innovation within the infrastructure to add capability, create differentiation, or make other enhancements. this is certainly evident in the case of relational databases, for which there is a conventionalized set of abstractions (the concepts associated with relational tables, indexes, etc.) and also some standards related to access to those abstractions (sql and enhancements such as odbc and jdbc to support queries across software interfaces). but it is also the case that the particular vendors may add specialized features to these standard interfaces to support new capabilities in response to the market. in other words, although there is a seemingly inevitable commoditization of software component capabilities, there is also a seemingly indefinite deferment of reaching the goal of fully predictable decision outcomes regarding innovative softwaremanifest capabilities in systems. this is a key point about the intrinsic lack of limits of software (except those we choose to impose, such as architecturešsee chapter 3), and indeed this is a principal characterizing feature of software as an engineering building material. finding 15: it is dangerous to conclude that we are reaching a plateau in capability and technology for software producibility. to avoid loss of leadership, the dod will need to become more fully engaged in the innovative processes related to software producibility.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.recognize the pivotal role of dod sofware innovation 43the continued maturing of the software discipline creates new challengesa consequence of this phenomenon of continuous capability improvement is the challenge of integrating innovative software development into mainstream systems engineering processes. despite the pervasiveness of software and its pivotal role in systems and infrastructures, the engineering of software has not yet matured into a fully rigorous discipline. for innovative software projects, fully measurable and predictable process flows and outcomesša hallmark of conventional process maturityšwill necessarily remain elusive.this is partly due to the fact that each new technical advance in software not only creates opportunities but also presents new difficulties of measurement and risk assessment. engineering repeatability is achievable only for the more precedented systems. additionally, a characteristic of many innovative projects is that the scope of the intended impact may be defined while specific details regarding functional and quality attributes emerge only in the course of development. fully elaborated requirements against which predictions can be made often do not (and in many cases should not) exist.45 in other words, ﬁpredictabilityﬂ may have more to do with success in addressing a need and less to do with how that need is specifically addressed. of course, this is true of nearly all other engineering disciplines. a key difference with software is that development of particular software functionalities, once routinized, is then quickly automated. the result is that expensive custom development gives way to muchlowercost component procurement. in turn this often gives way to opensource availability of the same functionality. moreover, unlike other areas of engineering, the intrinsic cost of replicating or deploying software artifacts is near zero. we can conclude that the effect is that a relatively much larger portion of the overall engineering effort in a software enterprise is devoted to creating specifically innovative functionalities. in other words, once development of specific software functionalities is routinized, the cost can vanish relatively quickly, which means more of the overall handson engineering activity is in the realm of the innovative and unprecedented.additionally, the risks and difficulties of software are growing in severity and diversity, and we continue to experience failures of all kindsšrelated to reliability, security, flexibility, and other attributes. softwarerelated problems are responsible for lifethreatening failures in health devices, failures of space missions, failures in military systems, cascading failures in infrastructure for telecommunications and power utilities, and so on. this may create a perception that there is an unavoidable tradeoff between precedent and project risk, and that the only way to avoid major project completion risk is to compromise on ambitions regarding system capability. the committee™s analysis suggests that this is not necessarily the case, and in chapter 2, the committee considers the means by which the engineering risks associated with innovative projects can be mitigated incrementally, thus potentially reducing the cost and project completion risk without overly compromising functionality.conclusions regarding software innovationthe committee draws several conclusions from these observations regarding software capability improvement. first, mere presence in the market as a software user requires keeping pace with ongoing software innovation and improvements to practices. this is true even for individual software componentsšindeed, commercial software managers recognize that software starts to ﬁdieﬂ (in the sense of becoming less valuable to users) the moment it stops evolving. it is also true for practicesšcontinuous improvement in practices and processes is essential for survival. desktop computers now are almost 45 see, for example, the description of the double helix design methodology in bg harry greene, usa, larry stotts, ryan paterson, and janet greenberg, january 2010, ﬁcommand post of the future: successful transition of a science and technology initiative to a program of record,ﬂ defense ar journal, defense acquisition university. available online at http://www.dau.mil/pubscats/pubscats/ar%20journal/arj53/greene53.pdf. last accessed august 20, 2010. critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.44 critical code: software producibility for defense1 million times more powerful than those of 1980. the software capabilities have similar jumps, although these jumps are less apparent and not easy to measure.second, leadership in the market, as a producer or consumer, requires an active organizational role in defining the architecture of systems, and doing so as a first mover or fast follower. software economics are focused on externalitiesšwhere the technical manifestation of the system structure is the software architecture and internal framework and component interfaces. this requires sustained technological leadership and clear thinking about the significance of architectural control. this is particularly significant in the definition and leadership of the design of the major ecosystems. some of these are wholly controlled by commercial vendors, but others involve complex community processes. third, software technical challenges are broadening. these include, for example, software assurance, ultrascale architecture, concurrency (multicore and distributed), framework design, programming language improvements for assurance and scale, concepts for ﬁbig dataﬂ systems, and so on. these challenges are addressed in chapters 2, 3, and 4 of this report. fourth, risk management models need to be continually adjusted to accommodate the new realities of software and of itenabled business practices, as noted above. this is the subject primarily of chapters 2 and 4.finally, the role of software leadership in the global economy is growing, and this is increasingly recognized, with the result that global competition is becoming more intense at every level of capability. overseas competition is greatly facilitated by the low barrier to entryšcostly physical facilities are not needed in the software economy, but education and technical currency are fundamental and ongoing challenges. this is significant for the dod, which has counted on u.s. industry, including defense contractors and their supplychain participants, to sustain technological leadership in software as a key driver of capability leadership in systems. such leadership must be maintained through constant investment in innovation and in people. at the highest level of technical sophistication, this requires investment in university research to produce a sufficient pipeline of technical leaders.4646 u.s. phd students in computer science and itrelated areas are almost universally supported with tuition and stipends  covered by sponsored research. universities rarely have funds to provide direct fellowships to phd students in these areas, and few students have the resources or capacity to selffund or to take on (often additional) loans to cover their costs.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.452accept uncertainty:  attack risks and exploit opportunitiesinnovation, precedent, and dynamismexperience shows that there is a correlation between the degree of software system precedent, routinization, and stability, on the one hand, and the ability to deliver results with predictable cost, schedule, and operational test and evaluation (ot&e) success, on the other. many of the department of defenses™s (dod™s) information technology (it) systems are precedented, as are significant portions of mission systems. these include the office automation and backoffice systems for business operations that are increasingly conventionalized in both commercial and national security contexts. there are precedents for such systems in numerous institutions and environments. such conventions enable the dod to build on wide internal experience, other government experience, and commercial experience, reducing the uncertainty associated with predicting the outcomes of particular design decisions. this happens when similar decision points have been experienced in other settings, experience was gained, and it has been possible to transfer that experience to new projects that are sufficiently similar. for precedented development efforts, managers can project plans further into the future of a development process with higher accuracy. they can focus more closely on optimizing cost, schedule, and other factors while managing the various tradeoffs involved. for these routine systems, the dod benefits when it can adjust its practices to conform to government and industry conventions, because it is then able to build more directly on precedent and also exploit a broader array of more mature market offerings.the largest producibility challenges for the dod come from its need for unprecedented, innovative systems that can be rapidly adapted. the mission of the dod requires it to constantly move forward in advancing the capability of its systems. the committee uses the term ﬁunprecedentedﬂ to refer to systems concepts, designs, or capabilities that are not similar enough to the existing base of experience to benefit from fully following an established pattern. as a result, development efforts may involve greater risk (see next section). this report calls these innovative and agile projects softwareintensive innovative development and reengineering/evolution (sidre) efforts and focuses much of its attention on them. it must be recognized, however, that most unprecedented systems designs, including verylargescale interlinked systems, generally incorporate significant portions that are themselves precedented and possibly also associated with established commercial or opensource ecosystems.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.46 critical code: software producibility for defenseprecedented systemsput simply, engineering practices and technology choices for precedented systems (such as stable backoffice systems capabilities) are guided by convention (such as commercial best practices for such systems), while engineering practices and technology choices for unprecedented systems and components are guided by processes for mitigating engineering risk. in fact, there is a constant pace of innovation even for seemingly established functional capabilities, such as backoffice systems, with some areas of innovation and other areas that are more guided by convention. following precedent may require engaging in a process of adapting previously unique business practices to reflect more ﬁstandardﬂ or ﬁconventionalﬂ operations practices that are more readily supported within mainstream systems and ecosystems, particularly when there is correspondence with modern backoffice systems in the commercial world. this adaptation of functional goals to achieve consistency with normative practice is an explicit part of the commercial requirements engineering process. the dod and other government agencies may struggle more because they may find it more difficult to compromise, and for many good reasons. but the extent to which the dod can find commonalities (and avoid unnecessary differentiation) with other government agencies creates opportunities for major cost reduction, risk reduction, and process simplification. unprecedented systemsas noted in the previous chapter, the need to develop unprecedented systems is a consequence of the highly complex and rapidly evolving operational environment within which the dod must operate and execute its mission. complexity is increasing, as is the difficulty of the threats and challenges. highly capable information technology is now ubiquitous worldwide, and adversaries have ready access to cuttingedge technology. mission and deployment priorities are constantly shifting. the dod must collaborate extensively with other agencies, nongovernmental organizations (ngos), coalition partners, and others in constantly changing configurations over which the dod has no control. operational decisions are derived from a broad diversity of inputs. commandandcontrol models must adapt to rapidly evolving threats. success in this environment depends on systems designed for flexibility, agility, and robustness, but it also requires flexibility, agility, and robustness in the process by which systems are developed and continue to evolve. there is much less opportunity to rely on precedent and much greater requirement to undertake a process of ongoing innovation. this process of innovation entails acceptance of certain categories of risks. (see box 2.1 for details.) commercial best practices have also evolved for developing unprecedented systems. air traffic control, telecommunications switches, middleware (such as from ibm and oracle), operating systems (such as from apple and microsoft), and largescale web applications (such as from google, facebook, and amazon) have been developed under commercial best practices with varying degrees of success. however, these largescale, unprecedented systems emerged over a period of years from market opportunity without a specificationdriven need, while others did not. besides business savvy, the main critical success/failure factors in these situations have involved the ability to assess potentially disruptive technologies and competitor strengths, and the corporate agility to adapt to change.1 this chapter addresses the processes and practices by which these risks can be understood and addressed in the engineering of systems. a principal conclusion is that a wellmanaged incremental (iterative) process, supported by appropriate evaluation and measurement approaches, can more reliably lead to successful outcomes even when there are significant engineering risks. on the other hand, attempts to produce innovative or unprecedented systems using familiar linear (ﬁwaterfallﬂ) processes 1  michael cusumano and david b. yoffie, 1998, competing on internet time: lessons from netscape and its battle with microsoft, new york: the free press. see also clayton m. christensen, 1997, the innovator™s dilemma: the revolutionary book that will change the way you do business, new york: harper business. see also robert l. glass and p. edward presson, 2001, computingfailure.com: war stories from the electronic revolution, upper saddle river, nj: prentice hall ptr.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.accept uncertainty: attack risks and exploit opportunities 47can very often lead to unhappy surprisesšlatebreaking negative feedback regarding early design commitments that, when learned at a late stage in the process, can be very costly to revise. that is, what appears to be a ﬁsafe,ﬂ conservative decision to follow the most basic process is in fact a dangerous decision that can drastically increase programmatic riskšand the possibility of total project failure.2 the key features of a wellmanaged incremental process for innovative systems are (1) measurements that are informative and relevant, and (2) process feedback loops that are relatively short, with potential major reductions in programmatic risk. for many of the innovative systems at the heart of the dod™s software producibility challenge, the details of the future requirements are notšand in many cases cannot bešfully understood. thus the need to innovate is made more challenging by the simultaneous need to be agile as requirements necessarily evolve over time. managing risk at scalethere are attempts to manage innovative software development following process patterns more appropriate to precedented systems and to established predictable engineering disciplines. one consequence is that linear development processes are inappropriately used despite the presence of high engineering risk (and requirements risk also), with the consequence that those engineering risks are unnecessarily transformed into increasing project risks. a second consequence is that there is unjustified emphasis on achieving excessive precision at the outset regarding functionality desired by the user, choices of infrastructure platforms, and possibly also economic tradeoffs in various complex dimensions of quality. this drive for excessive precision in these areas can yield a surfeit of specifications and other early design artifacts, which may in fact give only false comfortšand lead to downstream scrap and rework. this is because these process patterns do not account for the engineering risks and uncertainties inherent in developing innovative software, where there are no laws of physics and materials to constrain solutions to particular structural patterns. in precedented software, the structural patterns derive from established software ecosystems and from the body of precedent. in innovative sidre systems, these patterns are lacking, which is both advantageous, in that opportunity is afforded for innovation and creativity, and also disadvantageous, in that greater levels of uncertainty must be addressed. modern governance approaches for larger systems must account for the management of uncertainty. at scale, they must exploit collaboration among distributed teams and in rich supply chains for which there is a continuous negotiation of scope, quality, and resources to balance the opportunities in delivering more value with the uncertainties inherent in software development cost and scope targets. that is: it is important to treat scope, plans and resources as variables (not frozen baselines) and explicitly manage the variances in these variables until they converge on acceptable levels to commit a project/product to full scale production.fortunately, recent dod and nrc studies3 have resulted in some very initial steps, as evidenced in 2  some program managers sarcastically refer to an inappropriately used linear (waterfall) process model as the ﬁrequirements, delay, surpriseﬂ process model. fred brooks™s recent book, the design of design (boston: addisonwesley, 2010), succinctly concludes, ﬁthe waterfall model is wrong and harmful; we must outgrow it.ﬂ this point was also made in fred p. brooks, 1987, ﬁno silver bulletšessence and accidents of software engineering,ﬂ information processing 20(4):1019. 3  assessment panel of the defense acquisition performance assessment project, 2006, defense acquisition performance assessment; see also nrc, richard w. pew and anne s. mavor, eds., 2007, humansystem integration in the system development process: a new look, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=11893. last accessed august 20, 2010; and national research council (nrc), 2008, premilestone a and earlyphase systems engineering: a retrospective review and benefits for future air force acquisition, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=12065. last accessed august 20, 2010. critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.48 critical code: software producibility for defensebox 2.1 programmatic, engineering, and systems riskprogrammatic riskprogrammatic or project risks pertain to the successful completion of engineering projects with respect to expectations and priorities for cost, schedule, capability, quality, and other attributes. a principal influence on programmatic risk is the process by which engineering risks are identified and addressed. this applies particularly to engineering risks related to architecture and ecosystems choices, quality attributes, and overall resourcing. with innovative projects, programmatic risk can be reduced through use of iteration, incremental engineering, and modeling and simulation (as used in many engineering disciplines). programmatic risks that derive from overly aggressive functional or quality requirements, where engineering risks are not readily mitigated, are often best addressed through moderation on the ﬁvalue side,ﬂ for example, through scoping of functional requirements. indeed, for ambitious and innovative programsšthose characterized as ﬁhigh risk, high rewardﬂšfor identifying and sorting engineering risks, it is often most effective to focus as early as possible on architecture. once overall scope of functionality is defined, architecture risks may often dominate the detailed development of functional requirements.a wellknown example of negative consequences of unmitigated programmatic risks is the fbi virtual case file (vcf) project.1 the project is documented in the ieee spectrum: ﬁthe vcf was supposed to automate the fbi™s paperbased work environment, allow agents and intelligence analysts to share vital investigative information, and replace the obsolete automated case support (acs) system. instead, the fbi claims, the vcf™s contractor, science applications international corp. (saic), in san diego, delivered 700,000 lines of code so bugridden and functionally off target that this past april [2005], the bureau had to scrap the us $170 million project, including $105 million worth of unusable code. however, various government and independent reports show that the fbišlacking it management and technical expertisešshares the blame for the project™s failure.ﬂ2 eight factors that contributed to the vcf's failure were noted in a 2005 department of justice audit. these included ﬁpoorly defined and slowly evolving design requirements; overly ambitious schedules; and the lack of a plan to guide hardware purchases, network deployments, and software development for the bureau. . . .ﬂ finally, ﬁdetailed interviews with people directly involved with the vcf paint a picture of an enterprise it project that fell into the most basic traps of software development, from poor planning to bad communication.ﬂ (today, 5 years later, the program has been scrapped yet again.)supply chain risk is an area of engineering risk that is growing in significance and that often develops into programmatic risk. this is evident in the dod™s increasingly complex and dynamic supplychain structure, with particular emphasis on concerns related to assurance, security, and evolution of components and systems infrastructure. this risk can be mitigated through techniques outlined in chapters 3 and 4 related to architecture design, improved assurance and direct evaluation techniques, multisourcing, provenance assessment, and tracking and auditing of sourcing information. supply chain risk is particularly challenging for infrastructure software and hardware, because of the astonishingly rapid evolution of computing technologies, with commercial replacement cycles typically every 3 to 5 years. in the absence of careful planning, this means that early ecosystem commitments can potentially create programmatic risks in downstream  ben bain, 2009, ﬁfbi pushes back completion date for sentinel file system ﬂ november 10, 2009, federal computer week. available online at http://fcw.com/articles/2009/11/10/fbisentineligreport.aspx. last accessed august 20, 2010. 2 harry goldstein, 2005, ﬁwho killed the virtual case file?ﬂ ieee spectrum 42(9):2435. available online at http://spectrum.ieee.org/computing/software/whokilledthevirtualcasefile. last accessed august 20, 2010. see also james c. mcgroddy and herbert s. lin , eds., 2004, a review of the fbi™s trilogy information technology modernization program, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=10991. last accessed august 20, 2010. see also the subsequent nrc letter report, 2004, letter report to the fbi, james c. mcgroddy and herbert s. lin, eds., washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=11027. last accessed august 20, 2010. systemrefresh cycles, when shifts in vendor strategy may create unanticipated incompatibilities. indeed, vendors may often institute incompatible changes in interface specifications in their ecosystems in order to force user organizations to stay current with evolving technology. thus, the advantage of ﬁriding the curvesﬂ with offtheshelf infrastructure must be weighed against the loss of control by program managers. but this is not a simple tradeoff, since savvy architects have ways to structure systems to increase the possibility of ﬁhaving it both waysﬂ in many cases.related to supply chain is another kind of programmatic risk, derived from conflicting business incentives. this kind of risk is often present in projects focused on enhancing interoperation among systems. with interoperation, for example, data from sensors for one system can be used to enhance situation awareness models in another system. indeed, one of the strong arguments for netcentric approaches is the benefit of broad sharing of sensor data to enhance situation awareness and better inform tactical decision making.3 despite the natural drivers for interlinking, there are risks and difficulties. a critical system risk, for example, relates to securityšpoor architectural decision making at the outset could mean that successful attacks could result in amplified consequences, due to the larger scale of the overall system. there are also programmatic risks relating to potential conflicts in the business and mission interests of the organizations responsible for the entities being interlinked. vendors, for example, who are competing at the level of ecosystems may see interlinking as an opportunity for competitors to benefit from network effects associated with acceptance of the ecosystem by usersšthat is, interlinking with competitor systems may be perceived as a threat to investment in ongoing ecosystems enhancement. there are also circumstances under which dod contractors may also see enhanced interoperation (and open architectures, more generally) as a threat to lockin and an enhancement to opportunities of competitors.engineering risk engineering risks pertain to uncertainties and consequences of particular choices to be made within an engineering process. high engineering risk means that outcomes of immediate project commitments are difficult to predict and consequently raise programmatic risk. engineering risks can relate to many different kinds of decisionsšmost significantly architecture, quality attributes, functional characteristics, infrastructure choices, and the like. except in the most routinized cases, much of the practice and technology of software engineering is focused not only on system capability, team productivity, and resource requirements for development, but also on the reduction of the engineering risks that unavoidably arise in unprecedented developments. as dod and commercial systems evolve with more and more functionality delivered in software, systems engineering and software engineering techniques are intersecting, leading to a critical area for new research and the advancement of practice. the challenge is threefold. first, traditional decision support techniques need to be enhanced to address the diverse kinds of software engineering risks. second, there is need for modeling, simulation, prototyping, and other ﬁearly validationﬂ techniques for many different kinds of software engineering decisions, for example, those related to architecture, requirements, ecosystem choice, tooling and language choice, and many others. third, system engineering models must be developed through which appropriate ﬁcreditﬂ can be given in earned value models for activities that mitigate identified engineering risks. this entails addressing a range of challenges related to measurement and process design. development of techniques to meet these challenges would benefit commercial industry as well as the dod.an example of the identification and resolution of engineering risk is described in a workshop report 3  metcalfe™s law is an observation on network effects, stating that the ﬁvalueﬂ of a telecommunications network grows with the square of the number of nodes in the networkšwhen the number of nodes in a complete graph doubles, the number of edges roughly quadruples. of course, there are other ways scale influences ﬁvalueﬂ that may make actual value greater or less than quadratic. but regardless of the model, it is clear that the effects are superlinear. this observation explains the forces that drive the coalescing of separate networked systems into aggregates, including the internetworking initiatives of the 1970s that coalesced diverse computer networks into the internet.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.accept uncertainty: attack risks and exploit opportunities 49box 2.1 programmatic, engineering, and systems riskprogrammatic riskprogrammatic or project risks pertain to the successful completion of engineering projects with respect to expectations and priorities for cost, schedule, capability, quality, and other attributes. a principal influence on programmatic risk is the process by which engineering risks are identified and addressed. this applies particularly to engineering risks related to architecture and ecosystems choices, quality attributes, and overall resourcing. with innovative projects, programmatic risk can be reduced through use of iteration, incremental engineering, and modeling and simulation (as used in many engineering disciplines). programmatic risks that derive from overly aggressive functional or quality requirements, where engineering risks are not readily mitigated, are often best addressed through moderation on the ﬁvalue side,ﬂ for example, through scoping of functional requirements. indeed, for ambitious and innovative programsšthose characterized as ﬁhigh risk, high rewardﬂšfor identifying and sorting engineering risks, it is often most effective to focus as early as possible on architecture. once overall scope of functionality is defined, architecture risks may often dominate the detailed development of functional requirements.a wellknown example of negative consequences of unmitigated programmatic risks is the fbi virtual case file (vcf) project.1 the project is documented in the ieee spectrum: ﬁthe vcf was supposed to automate the fbi™s paperbased work environment, allow agents and intelligence analysts to share vital investigative information, and replace the obsolete automated case support (acs) system. instead, the fbi claims, the vcf™s contractor, science applications international corp. (saic), in san diego, delivered 700,000 lines of code so bugridden and functionally off target that this past april [2005], the bureau had to scrap the us $170 million project, including $105 million worth of unusable code. however, various government and independent reports show that the fbišlacking it management and technical expertisešshares the blame for the project™s failure.ﬂ2 eight factors that contributed to the vcf's failure were noted in a 2005 department of justice audit. these included ﬁpoorly defined and slowly evolving design requirements; overly ambitious schedules; and the lack of a plan to guide hardware purchases, network deployments, and software development for the bureau. . . .ﬂ finally, ﬁdetailed interviews with people directly involved with the vcf paint a picture of an enterprise it project that fell into the most basic traps of software development, from poor planning to bad communication.ﬂ (today, 5 years later, the program has been scrapped yet again.)supply chain risk is an area of engineering risk that is growing in significance and that often develops into programmatic risk. this is evident in the dod™s increasingly complex and dynamic supplychain structure, with particular emphasis on concerns related to assurance, security, and evolution of components and systems infrastructure. this risk can be mitigated through techniques outlined in chapters 3 and 4 related to architecture design, improved assurance and direct evaluation techniques, multisourcing, provenance assessment, and tracking and auditing of sourcing information. supply chain risk is particularly challenging for infrastructure software and hardware, because of the astonishingly rapid evolution of computing technologies, with commercial replacement cycles typically every 3 to 5 years. in the absence of careful planning, this means that early ecosystem commitments can potentially create programmatic risks in downstream  ben bain, 2009, ﬁfbi pushes back completion date for sentinel file system ﬂ november 10, 2009, federal computer week. available online at http://fcw.com/articles/2009/11/10/fbisentineligreport.aspx. last accessed august 20, 2010. 2 harry goldstein, 2005, ﬁwho killed the virtual case file?ﬂ ieee spectrum 42(9):2435. available online at http://spectrum.ieee.org/computing/software/whokilledthevirtualcasefile. last accessed august 20, 2010. see also james c. mcgroddy and herbert s. lin , eds., 2004, a review of the fbi™s trilogy information technology modernization program, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=10991. last accessed august 20, 2010. see also the subsequent nrc letter report, 2004, letter report to the fbi, james c. mcgroddy and herbert s. lin, eds., washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=11027. last accessed august 20, 2010. systemrefresh cycles, when shifts in vendor strategy may create unanticipated incompatibilities. indeed, vendors may often institute incompatible changes in interface specifications in their ecosystems in order to force user organizations to stay current with evolving technology. thus, the advantage of ﬁriding the curvesﬂ with offtheshelf infrastructure must be weighed against the loss of control by program managers. but this is not a simple tradeoff, since savvy architects have ways to structure systems to increase the possibility of ﬁhaving it both waysﬂ in many cases.related to supply chain is another kind of programmatic risk, derived from conflicting business incentives. this kind of risk is often present in projects focused on enhancing interoperation among systems. with interoperation, for example, data from sensors for one system can be used to enhance situation awareness models in another system. indeed, one of the strong arguments for netcentric approaches is the benefit of broad sharing of sensor data to enhance situation awareness and better inform tactical decision making.3 despite the natural drivers for interlinking, there are risks and difficulties. a critical system risk, for example, relates to securityšpoor architectural decision making at the outset could mean that successful attacks could result in amplified consequences, due to the larger scale of the overall system. there are also programmatic risks relating to potential conflicts in the business and mission interests of the organizations responsible for the entities being interlinked. vendors, for example, who are competing at the level of ecosystems may see interlinking as an opportunity for competitors to benefit from network effects associated with acceptance of the ecosystem by usersšthat is, interlinking with competitor systems may be perceived as a threat to investment in ongoing ecosystems enhancement. there are also circumstances under which dod contractors may also see enhanced interoperation (and open architectures, more generally) as a threat to lockin and an enhancement to opportunities of competitors.engineering risk engineering risks pertain to uncertainties and consequences of particular choices to be made within an engineering process. high engineering risk means that outcomes of immediate project commitments are difficult to predict and consequently raise programmatic risk. engineering risks can relate to many different kinds of decisionsšmost significantly architecture, quality attributes, functional characteristics, infrastructure choices, and the like. except in the most routinized cases, much of the practice and technology of software engineering is focused not only on system capability, team productivity, and resource requirements for development, but also on the reduction of the engineering risks that unavoidably arise in unprecedented developments. as dod and commercial systems evolve with more and more functionality delivered in software, systems engineering and software engineering techniques are intersecting, leading to a critical area for new research and the advancement of practice. the challenge is threefold. first, traditional decision support techniques need to be enhanced to address the diverse kinds of software engineering risks. second, there is need for modeling, simulation, prototyping, and other ﬁearly validationﬂ techniques for many different kinds of software engineering decisions, for example, those related to architecture, requirements, ecosystem choice, tooling and language choice, and many others. third, system engineering models must be developed through which appropriate ﬁcreditﬂ can be given in earned value models for activities that mitigate identified engineering risks. this entails addressing a range of challenges related to measurement and process design. development of techniques to meet these challenges would benefit commercial industry as well as the dod.an example of the identification and resolution of engineering risk is described in a workshop report 3  metcalfe™s law is an observation on network effects, stating that the ﬁvalueﬂ of a telecommunications network grows with the square of the number of nodes in the networkšwhen the number of nodes in a complete graph doubles, the number of edges roughly quadruples. of course, there are other ways scale influences ﬁvalueﬂ that may make actual value greater or less than quadratic. but regardless of the model, it is clear that the effects are superlinear. this observation explains the forces that drive the coalescing of separate networked systems into aggregates, including the internetworking initiatives of the 1970s that coalesced diverse computer networks into the internet.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.50 critical code: software producibility for defensebox 2.1 continuedproduced by this study committee.4 this case study concerns the internal ecosystem at amazon.com. amazon evolved from a relatively straightforward ecommerce model into a highly complex aggregation of sellers and buyers, with a business model that depended in part on realizing the synergies of this aggregation and the growth in scale. ﬁamazon builds almost all of its own software because the commercial and open source infrastructure available now does not suit amazon.com™s needs.ﬂ when it became clear that initial architectural approaches needed to be enhanced, a critical decision point was reached, with developers at amazon facing a choice between a ﬁgoal of building the ‚perfect™ system (the ‚right™ system) whatever the costﬂ and a very different and ﬁmore modest goal of building a smaller, less ambitious system that works well and can evolve.ﬂ developers recognized that trying to build the best possible system was a long, difficult, and potentially errorprone process. it also forced anticipation of a comprehensive set of potential downstream business models. the developers instead adopted an approach designed to support evolution and rapid organic growth. it necessarily embodied fewer assumptions regarding the business model, but it was designed to be adaptive and robust. this led to greater emphasis on infrastructure performance, scalability, and reliability, with a focus on implementation ideas such as redundancy, feedback, modularity, and loose coupling, under rubrics such as ﬁpurging,ﬂ ﬁspatial compartmentalization,ﬂ and ﬁapoptosis.ﬂ this was the model that led to amazon™s rapidly growing venture into cloud computing and associated services.systems risk systems risks pertain to the potential hazardsšoperational risks, mission risks, deployment challenges, and so onšassociated with the deployment of a system. what are the kinds of failures, and what kinds of hazards do they create? for example, cascading failures have been experienced in telecommunications and power utilities. these are largescale system failures resulting from unwanted positive feedback of local failures triggering failures elsewhere, leading to more global failures with the corresponding hazards. that is, the hazard of a single system failing can often be associated with a much larger aggregate of systems, often spread across a wide geography. the consequences of a single local failure thus extend well beyond the immediate locality of the failure. the hazard is at a much greater scale.a case study in systems risk is the toyota prius, a ﬁhighly computerized car,ﬂ5 that relies on software programs to manage the various applications and features of the vehicle. this complex system is really an amalgam of simpler subsystems interoperating with each other across a network fabric. drivers of the 2010 prius had reported brake malfunctions, which would later be attributed to a glitch in the software controlling the car™s brakes. it is unclear from reports from toyota and in the press whether the ﬁsoftware glitchﬂ was an algorithmic fault faithfully encoded into the software or a fault in the software encoding or the software infrastructure. regardless, the repair of the fault was accomplished through software updates: toyota later issued a software patch for the brake problem.6 in february 2010, ford also resolved a braking issue through a software upgrade.74 nrc, 2006, summary of a workshop on software intensive systems and uncertainty at scale, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=11936. last accessed august 20, 2010. 5 stephen manning and tom krisher, 2010, ﬁmore trouble for toyota as regulators launch investigation of prius brake problems,ﬂ associated press, february 4, 2010. available online at http://autos.ca.msn.com/news/canadianpressautomotivenews/article.aspx?cpdocumentid=23387474. last accessed august 20, 2010. 6 david millward, 2010, ﬁtoyota offers uk prius owners brake software upgrade,ﬂ telegraph.co.uk, february 8, 2010. available online at http://www.telegraph.co.uk/motoring/news/7189917/toyotaoffersukpriusownersbrakesoftwareupgrade.html. last accessed august 20, 2010. 7 david bailey, 2010, ﬁford offers fix for fusion hybrid brake glitch,ﬂ reuters.com, february 4, 2010. available online at http://www.reuters.com/article/idustre61369i20100205. last accessed august 20, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.accept uncertainty: attack risks and exploit opportunities 51the dod™s revision of dod instruction 5000.02 and the recent congressional weapon system acquisition reform act that establish such convergence as dod acquisition policy.4 however, the policy does not provide detail about how such convergence can be achieved, particularly in the software arena.finding 21: modern practice for innovative software systems at all levels of scale is geared toward incremental identification and mitigation of engineering uncertainties, including requirements uncertainties. for defense software, the challenge is doing so at a larger scale, and in ways that are closely linked with an overall systems engineering process. innovation and agility are related. innovation is the ability to create new systems concepts to address emerging challenges and opportunities. innovation can be in concept, functionality, architecture and design, performance, and so on. innovative functionalities have migrated into software realizations because of the special characteristics of software. by improving our capability to manage uncertainty, we are able to accelerate the delivery of more capable systems and reduce costs. the environments of defense mission needs and of computing technology are both rapidly changing and often in unpredictable ways. this creates uncertainty, particularly when systems must be designed to anticipate these changes in mission and technology over periods of many years. not all changes can be anticipated, which implies that not only must architecture and design be forwardlooking, but also that ongoing process must be agile in facilitating ongoing innovation in response to changing needs and opportunities. what does it mean to ﬁmanage uncertainty,ﬂ and what are good characterizations and, where possible, measurements of the various dimensions of uncertainty? it is often stated as a matter of principle that we must measure something if we are to manage it. however, in the history of software engineering, the principal ﬁmeasurablesﬂ have been time, effort, lines of code produced, and defects found and fixed. these are only approximate surrogates for the attributes of progress that matter in complex development projects, such as identification and resolution of engineering risks, assurance with respect to quality attributes, manifestation of critical functional features, ability to support future evolution, and so on. the former set of measurables (e.g., time, effort, etc.) are perhaps more useful for linear or waterfall developments, but they are of diminishing value for innovative and agile projects. in these projects, not only must engineering risks be identified and resolved, but also observable attributes must be created to provide evidencešand reduce the possibility of ﬁgoing into denialﬂ regarding challenging engineering risks. this issue is elaborated in the section below on earned value concepts.from the perspective of quantitative measurement, the uncertainty of software producibility can be understood through the following observations:1. best practices for software development resource estimates employ empirical, parametric models. these models typically have 20 to 30 input parameters and produce a probability distribution of outcomes. 2. the variance of the distribution of outcomes is a good measure of the uncertainty. 3. managing this uncertainty means reducing the variance in the distribution of outcomes as estimates to complete are recalculated on a periodic basis.process agility is needed to respond rapidly and effectively to changing circumstances. but often those changing circumstances are in the form of latebreaking (in a development process) understanding of key design commitments and emerging engineering risks. thus effectiveness at the management 4  the 2010 national defense authorization act (ndaa) language (section 804) is also evidence of progress. national defense authorization act (ndaa) of fiscal year 2010, pub. l. no. 11184, 111 congress, (2009). available online at http://www.wifcon.com/dodauth10/dod10804.htm. last accessed august 20, 2010. critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.52 critical code: software producibility for defenseof uncertainty is one key to process agility in systems definition and conceptualization, as well as realization.technology cannot overcome poor governance or management. however, in the past two decades, considerable progress has been made in assessing organizational capability to enact process models to manage complex software developments. this understanding has been packaged in a variety of ways, such as the capability maturity model, iso 9000, and the spiral development model. even wellmanaged software development can be hamstrung by poor selection of technology, but it can also be enhanced significantly by the judicious use of technology. softwareintensive systems are complex. tools are needed to help manage complexity, track changes, maintain configuration control, and enforce the integrity of the architecturešthese help teams avoid mistakes often driven by that complexity. indeed, modern software teams at all levels of scale rely much more intensively on tooling for process support than at any point in the past. software is distinctive in that it permits rapid iterations, aggressive prototyping, simulation, and modeling, along with other techniques that can afford early validation with respect to many critical acceptance criteria. improved software infrastructure and practices also enable agility, as do improved means to measure and assess software quality and other attributes. the governance and management process for unprecedented systems can better exploit these unique software capabilities. this means, in particular, the aggressive use of iterative riskmanaged processes and the definition of suitable earned value measures related to validation of requirements and architecture, team collaboration, and continuous integration. it also means that platform automation support for measurement, resource estimation, variance reduction, and change propagation must mature. another recent study from the national research council has assessed the potential, primarily from a management perspective, for the dod to more widely employ incremental and iterative processes to support riskmanaged development of sidre systems.5 the recommendations of this study are generally in harmony with the recommendations of this report, which focuses more on technological enablers and on attendant research and technologydevelopment challenges.earned value management and unprecedented systemsearned value management (evm) is ﬁa means of determining the financial health of a project by measuring whether the work completed to date is in line with the budget and schedule planning.ﬂ one of the goals of using evm is to get early warning of potential problems. evm tracks planning, progress, cost, earned value (the planned cost of actual progress), and variance in cost and schedule. although the technique is seemingly straightforward, the application of evm for innovative and unprecedented softwareintensive systems poses challenges. in particular, assessing and measuring actual progress is difficult. conventional evm systems make several assumptions, namely: (1) the relationship between resources and progress is linear, (2) the effort needed to meet certain goals is predictable at the outset, (3) progress is easily and accurately measurable, and (4) the expected outcomešas articulated in requirementsšis well understood. none of these assumptions applies in the case of softwareintensive unprecedented system development efforts where the level of uncertainty changes the governance process from planning and tracking a straightforward production sequence of related tasks to an emerging discovery process that requires continuous steering.extending evm to sidre software requires some significant changes in how evm assessment and measurement strategies are applied. in particular, evm in this context needs to be adapted from tracking conformance to planned expenditures to steering toward planned value creation. for this to happen, significant improvements are needed in our ability to value software assets. for example, a major, unfinished software asset is no more than an option to guide further investments that, with some 5  nrc, 2010, achieving effective acquisition of information technology in the department of defense, washington, d.c: national academies press. http://www.nap.edu/catalog.php?recordid=12823. last accessed august 20, 2010. critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.accept uncertainty: attack risks and exploit opportunities 53remaining risk, will lead to a finished product that creates realized value for an organization. in other words, software systems present very weak observables.6 but, such a product contains additional value in the form of flexibility to be better adapted, through additional investments, to its evolving operating conditions. placing value on adaptation flexibility is essential for reasoning about investments in modular design architectures, such as those produced by the application of productline approaches. unfortunately, except at the level of overall ecosystems and vendor components, the value of most software design assets may be apparent only within a project and may change according to architectural choices. thus, valuation of these assets is difficult and risky. we have neither the models we need to perform such valuation, nor adequate approaches to develop and validate estimates needed as inputs to such models (e.g., of uncertainties about future conditions). there is perhaps the potential to calibrate models over time based on past experience, though calibrations are always vulnerable to invalidation as operating conditions change. nevertheless, some kind of approach to valuation (not only accounting for costs but also for value created, even if in the form of options) is important to managing iterative or other development processes to optimize for value created, rather than merely for conformance to predicted cost flow streams. timecertain development and feature prioritizationthe fact that (particularly sidre) software development effort and duration cannot be estimated precisely means that it is unwise to try to lock a software project into simultaneously fixed budget, schedule, and feature content (as has been found in many fixedprice, fixedrequirements software development contracts). the concept of timecertain development recommended in the defense acquisition performance assessment (dapa) report and elsewhere7 avoids this problem by fixing duration as the independent variable and feature content a dependent variable. this is basically the same concept as the agile practice of timeboxing, but it needs more success conditions for large, missioncritical projects for which, as time is running out, it is difficult (and timeconsuming) to determine which features to drop, and how to drop them without adverse side effects.the critical success conditions for largeproject timecertain development are to prioritize the features in advance and to modularize the architecture to make it relatively easy to add or drop borderlinepriority features. in evolutionary development, this does not mean that the features will never be available, but that they will be deferred to a later increment. prioritizing features in multistakeholder situations is never easy, but it becomes easier if the decision is just to determine what features are most needed in the next increment.a most significant side effect of feature prioritization is that it produces a consensus ranking of the relative value of the system™s features. this provides the beginning of a way to reason about project risk, as the key quantity in risk management is an item™s risk exposure, defined as the product of the probability of loss times the size of the loss, which is known at least relatively from the feature prioritization.6  this is in the sense of the traditional ooda (observe, orient, decide, act) loop, which underlies iterative processes and incremental development. that is, as iterations and increments of effort yield results, future iterations and increments necessarily build on those results. the challenges of software measurement and evaluation (as addressed throughout this report) relate to the ﬁobserveﬂ part of the loop, the processrelated challenges relate to the ﬁorientﬂ and ﬁdecideﬂ parts of the loop, and many of the architecture/design and programming challenges relate to the ﬁactﬂ part of the loop.7  this includes, most significantly, the nrc report on achieving effective acquisition of information technology in the department of defense. nrc, 2010, achieving effective acquisition of information technology in the department of defense, washington, d.c: national academies press. available online at http://www.nap.edu/catalog.php?recordid=12823. last accessed august 10, 2010. last accessed august 20, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.54 critical code: software producibility for defenseevidencebased software engineering and risk probabilityanother major trend in software engineering and project management is to shift from schedulebased milestones (ﬁthe contract says that the preliminary design review (pdr) will be held on april 1, so that™s when we™ll hold the pdr, whether we have a design or not.ﬂ) to eventbased milestones (ﬁwe™ll finish all the design features by june 1, so we™ll hold the pdr then.ﬂ). however, such reviews often fail because there is no way to tell from all the unified modeling language (uml) diagrams and powerpoint charts whether the design will scaleup, handle crisis conditions, meet critical timelines, or be buildable within the available budget and schedule.this has led to the current trend toward evidencebased milestones, and evidencebased software and systems engineering in general. this approach places responsibility on developers not only to create artifacts for review such as operational concepts, requirements, designs, plans, budgets, and schedules, but also to produce evidence that if a software system were built to the design, it would satisfy the requirements, support the operational concept, and be buildable within the budgets and schedules in the plan. this evidence would then be reviewed by independent experts, and shortfalls in evidence would be treated as uncertainties or probabilities of loss. as with the relative sizes of loss determined from requirements prioritization above, these probabilities are generally known only relatively, but they can be combined with the relative sizes of loss to produce at least relative risk exposure quantities for use in risk management.actually, evidencebased software and systems engineering has been practiced many times and has been a consistently performed and highpayoff corporate practice at leading companies such as at&t since the 1980s.8 however, such evidence is usually asked for in contract data item descriptions (dids) in optional appendices, where it is one of the first things to go when resources become strained. making appropriate evidence a firstclass deliverable not only would ensure its development, but also would make it an element of earned value management, in that it thus would have to be planned for and its progress tracked with respect to the plans. the evidence should be parsimonious and focus on enabling of actionšrather than on the massing of ﬁreadneverﬂ program documentation. these points are summarized in the following findings and recommendations.finding 22: the prescription in dod instruction 5000.02 for the use of evolutionary development needs to be supplemented by the development of related guidance on the use of such practices as timecertain development, requirements prioritization, evidencebased milestones, and risk management.finding 23: extensions to earned value management models to include evidence of feasibility and to accommodate practices such as timecertain development are necessary conditions to enable successful application of incremental development practices for innovative systems.as noted throughout this report, the dod would benefit from investing effort in developing improved quantitative measures related to diverse software attributes such as quality, productivity, architecture compliance, architecture modularity, process performance, and many others. but dod practices must also recognize that existing metrics do not fully reveal critical attributes of systems and process status and that expert judgment also has a critical role, particularly with respect to architecture, design, and many quality attributes associated with sidre systems. evidencebased software and systems engineering approaches are being increasingly applied to address achievement of critical sidre attributes and need to be better institutionalized into dod acquisition practice.8  joseph f. maranzano, sandra a. rozsypal, gus h. zimmerman, guy w. warnken, patricia e. wirth, and david m. weiss, 2005, ﬁarchitecture reviews: practice and experience,ﬂ ieee software 22(2):3443.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.accept uncertainty: attack risks and exploit opportunities 55finding 24: research related to process, measurement, architecture, and assurance can contribute to the improvement of measurement practice in support of both routine management of engineering risks and value assessment as part of earned value management.for example, keys to developing costeffective evidence involve determination of feature and attribute priorities, assessment of candidate evidencegeneration capabilities (modeling, simulation, prototyping, bench marking, exercises, early working versions, citations of relevant previous experience), and measurement of progress toward thorough evidence generation.9 some initial steps in this direction are provided in a report by boehm and lane.10recommendation 21: the dod should take aggressive actions to identify and remove barriers to the broader adoption of incremental development methods, including iterative approaches, staged acquisition, evidencebased systems and software engineering, and related methods that involve explicit acknowledgment and mitigation of engineering risk.there are different kinds of barriers that can be addressed through combinations of established best practice and emergent improved practice derived from technology and other improvements. these potentially surmountable barriers include (1) improved measurement and associated technology, (2) architecture validation using models, simulation, prototyping, etc., (3) program manager training and evaluation of perceived career risks (see findings below), (4) accretion of an accessible experience base and other shared resources that can facilitate sound decision making, and (5) acceptable shifts of earlystage emphasis for innovative systems from detailed functional requirements to concurrent engineering of requirements, architecture, process definition, and evidence of their compatibility and feasibility. similar barriers exist in commercial industry, of course. these are accentuated in dod because of its particular challenges of arm™slength contractual relationships, high assurance requirements, potential presence of adversaries in the systems development activity, and other barriers. managing requirements and architecture software development complexities tend to increase nonlinearly as systems scale up in complexity, features, and quality goals. the challenge for the dod is that its requirements must be addressed at unusual scale, complexity, interconnection, security, and with lifecritical mission requirements. this challenge is exacerbated by the fact that the dod is not sufficiently exploiting known techniques for the management of complex and evolving requirements. these techniques have been a focus of research for many years, but the known techniques are not widely employed on dod applicationsštechniques including spiral development, joint application development, agile development, etc. the resulting difficulties are well known.11,12there is widespread agreement that the requirementsdelaysurprise (linear) approach to software development is not effective for innovative systems. the committee proposes more extensive use of an incremental, riskassessmentdriven approach. it is important to appreciate that, for incremental approaches to succeed, there needs to be forwardlooking upfront investment in the overall system and process design. this enables problems to be decomposed in such a way that engineering risks can be identified, initial architecture models developed, and overall programmatic risk is minimized. if this is 9  this concept of evidence generation is different but analogous to the discussion of evidencebased assurance in chapter 4.10 barry boehm and jo ann lane, 2010, evidencebased software processes, proceedings, 2010 international software process conference springer, berlin.11 nrc, 2010, achieving effective acquisition of information technology in the department of defense, washington, dc: national academies press, washington, dc. available online at http://www.nap.edu/catalog.php?recordid=12823. last accessed august 20, 2010.12 barry boehm and richard turner, 2003, balancing agility and discipline: a guide for the perplexed, boston: addisonwesley. critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.56 critical code: software producibility for defensedone well, then the subsystems can be developed relatively independently.13 as more information about the constraints and limitations on the subsystems becomes clearer, this highlevel system architecturešthe minimum set of critical common commitmentsšneeds to be repeatedly revisited, reevaluated from a technical perspective, and evolved to assure that it remains appropriate. this reevaluation should be supported by a range of modeling and analysis capabilities to help detect problems and vulnerabilities at the earliest possible stages.14 similar evaluation should be applied to the overall system architecture, as well as to each of the subsystems.changeability and correspondencerequirements need to be seen as an evolving set of goals and constraints. initially, the requirements capture the scope of the mission and associated operating environment and goals of the system. as design decisions are made, scope is refined and these highlevel goals need to be mapped down to the lowerlevel details.15 designspecific constraints need to be included, and newly realized goals need to be added. requirements are not useful, however, unless they are utilized throughout the development, maintenance, and evolution process. requirements developed early in the project need not only to continue to be used to drive design decisions, but also to drive the architecturelevel validation, lowlevel design validation, and implementation validation and testing. recent work on model checking, program analysis, formal verification, and testing (and their interaction) demonstrate how an evolving requirements base can impact upstream and downstream activities. requirements and associated systems must also adhere to the principle of correspondence, which states that minor changes in requirements should generally mean only minor system changes. thus defining ﬁminorﬂ with regard to requirements is critical, and aligning architecture with overall functional and quality attribute requirements is essential. it should be noted, however, that the best architecture is often a discontinuous function of the performance requirements: a common example is the different scalability of different cots products. other key needs are for evolution requirements that specify the expected growth in workload that the architecture must support for developer evidence that the architecture will support not only the early increments, but also the full operational capability. the value of this approach is reinforced when experience is considered in ﬁadjustmentﬂ or ﬁrenegotiationﬂ of requirements. this experience suggests that, despite the intent of nonnegotiability as implied by the use of the word ﬁrequirements,ﬂ we nonetheless see requirements being changed, bartered, and negotiated on almost every successful project. changing a requirement receives tremendous scrutiny because it usually has an impact on the contract among stakeholders. scopescope, as distinct from hard requirements, is intended to simply represent the current state of our understanding of the overall operational context and the needs that are addressed. in the committee™s experience, successful software projects are managed in a way that, implicitly, treats scope as a variable, 13 this was a goal of the amazon.com architecture reengineering project, as documented in nrc, 2007, summary of a workshop on softwareintensive systems and uncertainty at scale, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=11936. last accessed august 10, 2010.14 multiple studies have explored the relative cost of finding and repairing defects as a function of stage of the process. the cost differential between early and late stage can be two to three orders of magnitude. see e.g. see, rti, 2002, the economic impacts of inadequate infrastructure for software testing, planning report 023, rti project number 7007.011. available online at http://www.nist.gov/director/planning/upload/report023.pdf. last accessed august 20, 2010.15 in some innovative programs, there is a simultaneous refinement of system operational concept and technology design. an example of this is the ﬁdouble helix modelﬂ adopted in the command post of the future program, detailed in bg harry greene, usa, larry stotts, ryan paterson, and janet greenberg, january 2010, ﬁcommand post of the future: successful transition of a science and technology initiative to a program of record,ﬂ defense ar journal, defense acquisition university. available online at http://www.dau.mil/pubscats/pubscats/ar%20journal/arj53/greene53.pdf. last accessed august 20, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.accept uncertainty: attack risks and exploit opportunities 57just as cost and resources, schedule and work breakdown, quality (with respect to various attributes), and other overall constraints are variables subject to ongoing negotiation. an example is the prioritization of requirements and use of scope as a dependent variable in timecertain development. even when scope is treated as a seriously scrutinized and controlled variable in dod projects, a collaborative, open, and honest management style between customer and contractor, supported by constant effort to improve measurement and observation capability, has proven to be another necessary ingredient for success.these are the foundations of modern agile governance that demand executable capability demonstrations over time. modern agile governance of software delivery means managing uncertainty through steering. in a healthy software project, each successive phase of development produces an increased level of understanding in the evolving plans, specifications, and completed solution, because each phase furthers a sequence of executable capabilities and the team™s knowledge of competing objectives. at any point in the life cycle, the precision of the subordinate artifacts should be in balance with the evolving precision in understanding, at compatible levels of detail and reasonably traceable to each other.estimations, contracting, and iterative development the dod operates within a complicated federal procurement and acquisition process. from the outset the government typically awards to the contractor with a viable technical solution and the lowest cost. for softwareintensive systems there is a conventional wisdom that aggressive bids have driven many programs to diminished probabilities of success.16 although the reasons for cost overruns and delays are complex, the choice of evaluation criteria in this process is undoubtedly a factor. the government and contractors need to establish rigorous processes to ensure that we have a basis for size estimates that have sound derivation from comparable systems, as well as thoughtful scaling factors to account for degree of engineering risk, overall complexity and scale, and maturity of the various contributing technologies and ecosystems. for innovative sidre systems, the variances in a sound estimate can rise quite dramatically. for all systems, there is also the complication of the rapid evolution of the underlying software technologies, which tends to reduce commensurability with historical comparables. the use of evidencebased proposals and independent expert review is also helpful at the source selection stage.estimatesan additional difficulty is the lack of a rational standard by which the cost estimates are judged. while there are wellused metrics for hardware, a uniform set of standards for software development is lacking, although there are candidate models such as seersem, true s, or cocomo. also, analyzing comparable probabilities of success should be a key element for awards. this analysis must avoid conflating engineering risk with programmatic risk and instead account for process plans (and earned value credit models) that acknowledge the reality of the engineering risk and indicate how it can be mitigated (as outlined above). productline and framework efforts provide significant challenges to development estimation, as do commercial, opensource, and vendor infrastructure and services. these outsourced products and services, loosely considered as cots (ﬁcommercial off the shelfﬂ), although often they may not be commercial or off the shelf, require further adaptation to the estimation models to account for the costs of assimilating the product/service, including integration, configuration, ongoing upgrade (and consequent adaptation to the subject system), licensing, sourcing risks, and other factors. for example, many conventional commercial components and services have refresh cycles, which may range from months to many years. the period of these cycles (and the extent of likely incompatibility) can often be anticipated on the basis of industry standard practices, but it nonetheless needs to be 16 see reports from the government accountability office including, gao, 2004, defense acquisitions: stronger management practices are needed to improve dod™s softwareintensive weapon acquisitions, gao04393, washington, dc: u.s. printing office. critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.58 critical code: software producibility for defenseunderstood, along with the prospects for ﬁsupport engagementsﬂ from vendors to address urgent and critical issues should they arise.recommendation 22: the dod should take steps to accumulate highquality data regarding project management experience and technology choices that can be used to inform cost estimation models, particularly as they apply to innovative software development projects. the current upgrade underway of the reporting quantities and guidance for the dimgmt81739 and 81740 software resource data reports is a good example.contractingthere are a variety of contracting structures that are available to government program managers. choices are generally made on the basis of goals regarding incentives for the performer. for example, the costplusawardfee (cpaf) paradigm tends to frontload the incentives for performance where the product is primarily a set of artifacts that define the design, but that do not necessarily provide functional capability. it will be important to ensure that future contracts provide a balanced incentive for early development of functioning products, as well as early evaluations of performance and robustness.an iterative process for software development requires somewhat of an iterative or, more precisely, an incremental contract with the customer, very much following the concept of a spiral model of software engineering.17 for a company to respond to a request for proposals (rfp) with some accuracy, it generally must have experience with multiple similar projects on the basis of which it can estimate with confidence the resources and risks associated with building and testing a particular system. some companies frequently offer a fixedprice bid as well, perhaps for as many as half of their projects, although the preferred contract is not a fixed price but rather an agreement on the general estimated figure for the cost and delivery schedule in chunks, with more specificity for the critical initial deliveries, some agreed upon process for continued negotiation around time and schedule for changes, and pricing of later parts of the system as more of it is built and delivered. a scenario for sidre incremental developmentone possible way to combine improvement in the precision of estimation with mitigation of earlystage engineering risk (architecture, scope, hazard analysis) would be for a software customer to start a project with an initial scoping and prototyping engagement, lasting a few weeks, depending on the size or complexity of the system. this can serve to determine the scope of requirements, assess architecture alternatives, identify constituent ecosystems, and address other potential sources of upfront engineering risk. this affords both the customer and the bidder opportunity to develop more precise (but still crude) estimates of the cost and time potentially required for the project. this scoping and prototyping phase can be used to identify what are the essential features of the system that the customer must have, what are the lowerpriority features, and what are the features or functions that must be built first for the work to proceed. the company (and the customer) can then generate estimates for this first phase of the development work. this can be viewed as developing an immature design, but through a mature design process that will eventually lead to a wellvalidated mature design. as this initial phase of the work nears its completion milestone, systems engineers, architects, and requirements engineers can then work on a more detailed plan for the next milestone, including more specific plans for value measurement that would be used to enhance a baseline overall earned value model. the company, if it has experience with similar projects, can use historical data to adjust its estimates and add buffer time in the schedule, which will also add costs for manpower.17 barry boehm, 1986, ﬁa spiral model of software development and enhancement,ﬂ communication of the acm 11(4):1424. critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.accept uncertainty: attack risks and exploit opportunities 59in short, the scenario is for the customer to pay for an upfront scoping and prototyping exercise, agree to a general budget and timeframe, and then pay in increments as the work proceeds and changes. it is critical for the development team to be working extremely closely with the customer such as through having weekly or biweekly project updates and sharing information regarding architecture, features, and quality attributes of the evolving system in frequent increments. this also affords opportunity for risk mitigation regarding validation for critical requirements, enabling operational acceptance and providing evaluators an opportunity to mitigate the engineering risks they face regarding various kinds of evaluation criteria. regarding budget, it enables the customer to achieve a budget target with essential features of the system completed and to establish options regarding additional features or quality improvements earlier in the lifecycle, thus facilitating negotiations regarding lowerpriority features or bugfixing time later on in the project.the committee notes that realworld project experience has shown time and again that it is the early phases that make or break a project. it is therefore of paramount importance to have a strong startup team for the early planning and architecture activities. if these early phases are done right with good teams, projects can more often be completed successfully with (stable) nominal teams of capable developers evolving the applications into the final product. if the early planning and architecture phases are not performed adequately, however, then programmatic risks escalate dramaticallyševen tremendous expertise may not succeed in overcoming the consequences of early bad decisions.the committee also notes that for the largest and most complex systems, and also for many of the more innovative systems, the dod has a strong and direct interest in architecture definition in the early project phases. dod interests in architecture bear on longerrange issues such as interoperability, flexibility, and shifts in quality attributes as infrastructure and associated ecosystems evolve. this implies that the dod must have capability to assess architectural decisions at the early stages as part of the overall process. there is a challenge in finding the right balancešon the one hand, contractors must fully ﬁbuy inﬂ to architecture designs with respect to owning responsibility for outcomes, but, on the other hand, the dod and contractors must be able to collaborate in refactoring or adapting architectures when required.finding 25: architectural expertise is becoming dramatically more important for the dod, its advisors, and its contractors. there will be significant and immediate benefits from advances in the state of technical support for architecture.recommendation 23: update procurement, contracting, and governance methods to include an early and explicit architecture phase that reduces the predominant uncertainties in softwareintensive systems.technical support for architecture includes architecture development, modeling, simulation, evaluation of quality attributes (such as performance and security), evaluation of structural attributes (such as code compliance, modularity, etc.), and techniques for adaptation. this also includes capture of architectural experience to support building on experience. recommendation 24: define architectural leadership roles for major sidre projects and provide program managers with channels for architectural expertise.with respect to risk management, if a project is structured in short cycles or milestones, such as every 4 or 8 weeks,18 then estimates and teams can be adjusted to try to make up time on the schedule. for example, if part of the system is proving to be more difficult than planned to build or to test, then 18 agile cycles are typically 30 days, with a deliberate commitment for scheduledriven milestones to provide the dominant constraining structure in the management of process. critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.60 critical code: software producibility for defenseit may be possible to restructure the work plan to enable switching of people from different tasks without running afoul of brooks™s law.19 mitigating risk from a contractual perspective requires reducing development cycles, system testing intervals, and feedback opportunities with the customer. although this would vary based on scale, it would typically change release cycle times from units of months to units of weeks. this is predicated on identifying the most useful observables to support effective decision making in the feedback loop implemented in project iterations. project managers should also be identifying early on what parts of the system have high engineering riskšsuch as complex components that are different from systems they have built successfully in the past. the use of evolutionary acquisition as emphasized in dod instruction (dodi) 5000.2 implies the need for continuing architectural adjustments to accommodate changing priorities, independently evolving external interfaces, new releases of cots products, and termination of support of older cots releases. this will be discussed next. realizing dod software benefits via dod instruction 5000.02 and evolutionary acquisitionas discussed above, recent dod policy in dodi 5000.02 has established the concept that ﬁevolutionary acquisitionﬂ is the recommended way to acquire dod systems, but the policy does not provide detail about how successful evolutionary acquisition can be achieved, particularly in the software arena, and in a way that is compatible with the concepts of incremental iterative development. the issue is that evolutionary acquisition requires ﬁa militarily useful and supportable operational capabilityﬂ (dod instruction 5000.2, p. 13, 2.c.) at each iteration, whereas incremental iterative development does not (and should not) require operational capability at every iteration. this is because the iterations in incremental iterative development may be focused on discharging particular engineering risks rather than on manifesting operational capability. further, dod projects currently preparing to apply evolutionary acquisition find that much of the available acquisition infrastructure (contract forms, exhibits, and data item descriptions for reviews and audits, work breakdown structures, requirements, design, test, milestone pass/fail criteria, progress payments, award fees, etc.) is still oriented around a model of singlestep development to prespecified fullsystem requirements, with portions preallocated to software. the usual result is a hardwaredriven functionalhierarchy system architecture that is incompatible with preferred layered, serviceoriented software architectures, and accompanying hardwareoriented work breakdown structures that encourage software suboptimization20 and translate into management structures that hinder rapid software adaptation to change.21 further, projects are often unaware that there are several forms of evolutionary acquisition and choose a form that is poorly matched to their project situation. some initial work has been done to determine the various forms of evolutionary acquisition and to provide toplevel criteria for choosing among them, as shown in box 2.2.this toplevel guidance is a good first step, but it needs considerably more detailed guidance and associated methods and tools to ensure its successful application on dod projects.22 what is most sorely needed at this point is an elaboration of the necessary guidance to ensure early software participation in 19 brooks™s law states that adding people to troubled software projects only puts them further behind schedule. see fred brooks, 1975, the mythical man month: essays on software engineering, reading: addisonwesley.20 see the current revision of milstd881.21 barry boehm, a. winsor brown, victor basili, and richard turner, ﬁspiral acquisition of softwareintensive system of systems,ﬂ crosstalk, may 2004: 49.22 specific practices for incremental iterative development are discussed in several studies, including dsb, 2009, report of the defense science board task force on department of defense policies and procedures for the acquisition of information technology, washington, dc: office of the under secretary of defense for acquisition, technology and logistics. available online at http://www.acq.osd.mil/dsb/reports/ada498375.pdf. last accessed august 20, 2010. see also nrc, 2010, achieving effective acquisition of information technology in the department of defense, national academies press, washington, dc. available at at http://www.nap.edu/catalog.php?recordid=12823. last accessed august 20, 2010. the practices are also elaborated in congressional language in the national defense authorization act 2010, section 804. national defense authorization act (ndaa) of fiscal year 2010, critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.accept uncertainty: attack risks and exploit opportunities 61systems engineering and criteria for evaluating whether adequate evidence of software feasibility has been produced at major dod acquisition milestones. a particular need is for guidance on stabilizing the current increment of evolutionary development while concurrently evolving the software and system architecture and plans to enable stabilized development of the next increment.23recommendation 25: develop the technical and management infrastructure necessary to simultaneously support stabilized, highassurance development of the current evolutionary increment while concurrently evolving the plans and specifications for stabilized development of the next highassurance increment. intrinsic dod software expertisešbeing a smart customerthe current state of dod software expertise it is widely acknowledged, including within the dod, that the department does not have sufficient organic personnel with the software expertise to meet its needs for today™s more softwareintensive programs.24 although the dod develops some software internally, the committe™s focus here is on access to expertise that is needed for the dod to be effective as a savvy and outstanding customer for software. this includes the expertise to effectively purchase the larger and less precedented systems as well as the precedented systems for which sensitivity to issues such as the choice of ecosystem is key. the necessary expertise includes understanding of process, architecture, requirements, and assurance. it also includes understanding of the trajectories and adoption trends for both the major commercial ecosystems and any involved dodintrinsic software ecosystems. the dod faces challenges in attracting and retaining software and systems engineering personnel and also in keeping up to date the skills of the personnel they do have.25 commercial industry also faces challenges because demand for software expertise is high and the competition for top project managers and top architects can be particularly fierce because these two skills are both critical to success and their ranks are few.challenges particular to the dod the defense environment poses further challenges, notably the difficulty in competing with industry to hire the most capable software architects and other experts. this is not simply a matter of salaries. for instance, it is noted by the committee that many software engineers and architects become frustrated and discouraged working within the constraints of the dod acquisition process and with the tendency toward calcification of their ﬁhandsonﬂ skills that made them valuable to the dod acquisition process in the first place.26 especially in recent years, the dod has not shown the desire or ability to develop pub. l. no. 11184, 111 congress, (2009). available online at http://www.wifcon.com/dodauth10/dod10804.htm last accessed august 20, 2010. 23 see related discussion in chapter 4.24 ﬁthe quantity and quality of software engineering expertise is insufficient to meet the demands of government and the defense industry.ﬂ excerpted from presentation by kristin baldwin, 2008, ﬁdod software engineering and system assurance,ﬂ january 15, 2008, p. 4. available online at http://www.acq.osd.mil/se/briefs/20080115ssaboeinginterchange.pdf. last accessed august 18, 2010.25 matthew weigelt, 2009, ﬁofficials wants their own software engineering experts, but they don™t want to disregard industry™s experts,ﬂ federal computer week. available online at http://fcw.com/articles/2009/07/09/doditsystemsengineersoutsourcing.aspx. last accessed august 20, 2010.26 the committee did note that federally funded research and development centers (ffrdcs) and labs can provide the opportunity to technical staff to take breaks from direct support and move to programs under acquisition. these breaks enable staff to pursue research and reconnect with their ﬁhandsonﬂ skills that made them valuable to the dod acquisition process in the first place. it keeps their skills current and allows them to cycle back to another acquisition activity with fresh thoughts and approaches to developing dod capabilities.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.62 critical code: software producibility for defensebox 2.2 software risksthe phrase ﬁsoftware risksﬂ often appears in discussions regarding software development projects and softwareintensive systems engineering projects. it suggests danger and something that should be prevented or avoided by project managers. but in fact there are different kinds of risks, and not all of them involve danger. indeed, some have an appropriate and sometimes valuable place in any innovative engineering process and its management. most importantly, by acknowledging and managing the various categories of risks early in the process, particularly engineering risks but also system risks, overall risks related to both the engineering process and the product it develops are reduced. differences in software risks characterize the difference between the development of precedented (routine) capabilities and unprecedented (innovative) system capabilities. differences in different kinds of software risks characterize the difference between ﬁcritical systemsﬂ and other systems.risk, generally speaking, is a product of the probability of occurrence of a consequence with the degree of severity or cost of the consequence. risk can be reduced by reducing the probability or by lessening the extent or severity of consequence or both. there are different types of risk; for software categorization is in terms of programmatic, system, and engineering risk. (box 2.1 describes each form of risk in detail.) there are often tradeoffs and interactions among these risks. an example is response time. to illustrate the differences and interactions, consider an example relating to a decision regarding response time of a systemšfor example, how frequently the tracks of enemy and friendly units are updated on a display. a longer response time may enable designers to employ precedented infrastructure and other architectural elements, yielding a more predictable engineering process. that is, from the perspective of the planning phases, a mostly linear plan to engineer the product is more likely to yield a successful outcome. in other words, programmatic risks (or project risks) are low. the long response time may, however, create operational difficulties due to insufficient timeliness. this is a kind of system riskšthe possibility of a system failing to accomplish its mission. that is, while there may be low risk in producing a system with a long response time, it may be less likely to be operationally valuable. more generally, system risks can pertain to a wide range of hazards and suitability factors in operations, such as performance, security, usability, valid functionality, and integration and interoperation. system risks can also include ﬁlongtailﬂ risksševents with high consequence and low (perceived) likelihood. in this latter case it can be difficult to assess how much effort should be applied to mitigate the risk. suppose, on the basis of upfront user studies, it is decided to require a guarantee of a specific short response time. this would certainly reduce the system risk related to suitability of the response time. but the short response time may preclude use of the commodity infrastructure and, in the absence of validated alternatives, create uncertainties in the engineering phases of the project regarding architectural choices. the resulting uncertainties and consequences created within the engineering process are engineering risks. which is the correct architectural choice to make? if the answer is not known until the system is put into an operational environment for test and evaluation, then the uncertainty persists for a longer period, more engineering investment is made prior to resolution of the uncertainty, and more rework is required should the choice need to be revised. additionally, when one possibility is eliminated, uncertainty may remain regarding the choice among the remaining candidate options, and further effort may be required to resolve this choice. this adds to engineering risk, and it may add to project risk as well if there is insufficient allowance in cost and schedule for rework in the project budget. in many cases, the costs of unwinding previous bad decisions become prohibitive, and as a consequence the mismatched architecture (or other aspects of the system design) becomes a legacy infliction that is constantly worked around, adding to downstream costs and risks.evaluation of architectural alternatives through full development and operational tests is rarely required, however. techniques such as architectural modeling and simulation, for example, would enable the architectural alternatives to be evaluated earlier in the process and at lower cost, lowering engineering risk. (see chapter 5 for a discussion of the associated research challenges.)the probabilistic models for risk assessment have limitations. a software manager may find it tempting, when considering the mathematical characterization of risk as the product of consequence and probability, to develop mathematical models for probabilities. this is sometime useful but also can be dangerous, since probabilistic models often fail us in software. for example, a security vulnerability could be perceived as high consequence, but very low likelihood, and so may be left unaddressed. but once the vulnerability becomes known to adversaries (e.g., as a zeroday vulnerability), then the probability can rise dramatically, and with it the extent of risk. unfortunately, probabilistic models fail also because of aspects other than security. the possibility of intermittent problems such as deadlocks, for example, can change quite dramatically with changes in processor, communication, or storage infrastructure. additionally, traditional models of redundancy as a means to reduce risk are most effective when event probabilities are not coupled. but this proves to be a dangerous expectation in the engineering of software.1 on the other hand, in systems engineering efforts where software is embedded as part of a cyberphysical system, there are abundant probabilistic models for faults in attached physical components, and these models may have dependencies on other probabilistic models relating to aspects of the operating environment. in these cases, the familiar engineering mathematics for reliability must be employed, and the results of these analyses will inform the design of software to support tolerance or containment of errors resulting from faults in the attached components. credit for engineering risk reduction. the apollo moon missions of the 1960s had systems risk (hazard) related to delivering and returning astronauts safely. this risk could be mitigated through various safety mechanisms. in general, there may be little correlation between system risks and the other kinds of risks, especially when the systems risk derives primarily from the context of operational usešsystem risks may be much more dependent on characteristics of the operating environment than on precedent regarding engineering decisions. but in the case of the apollo missions, there was also considerable engineering risk, particularly early in the process when basic decisions were being made and experimentation and prototyping was being done to achieve early validation (i.e., prior to operational use) of the decisions made. the experience of the prior mercury and gemini missions created precedent for many design considerations and so served to discharge certain engineering risks. in addition to relying on hardwon experience with prior systems, the principal approaches to mitigation of engineering risks involve incremental development, prototyping, and modeling and simulation. these methods reduce the cost of consequence through early feedback and response afforded. for innovative projects, efforts to resolve engineering risks can be a significant component of overall project progress, and therefore in an earned value measurement regime there need to be ways to ﬁgive creditﬂ for identification and discharge of critical engineering risks. this can be a challenge: how, for example, can the value to apollo of the experience of mercury and gemini be weighed? or, at a much smaller scale, how can the value of the agile practice of ongoing refactoring be assessed at a time when the costs are incurred? the refactoring practice enables teams to retain ongoing control over architectural decisions and to enhance the potential for architecturelevel adaptation on the basis of future needs. but the benefits associated with the refactoring costs may appear only in later cycles, perhaps several months later, and until then the return on the refactoring investment may be difficult to assess despite the longterm value to the project.  1 see, e.g., susan brilliant, john knight, and nancy leveson, 1989, ﬁthe consistent comparison problem in nversion programming,ﬂ ieee transactions on software engineering 15(11):14811485. critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.accept uncertainty: attack risks and exploit opportunities 63box 2.2 software risksthe phrase ﬁsoftware risksﬂ often appears in discussions regarding software development projects and softwareintensive systems engineering projects. it suggests danger and something that should be prevented or avoided by project managers. but in fact there are different kinds of risks, and not all of them involve danger. indeed, some have an appropriate and sometimes valuable place in any innovative engineering process and its management. most importantly, by acknowledging and managing the various categories of risks early in the process, particularly engineering risks but also system risks, overall risks related to both the engineering process and the product it develops are reduced. differences in software risks characterize the difference between the development of precedented (routine) capabilities and unprecedented (innovative) system capabilities. differences in different kinds of software risks characterize the difference between ﬁcritical systemsﬂ and other systems.risk, generally speaking, is a product of the probability of occurrence of a consequence with the degree of severity or cost of the consequence. risk can be reduced by reducing the probability or by lessening the extent or severity of consequence or both. there are different types of risk; for software categorization is in terms of programmatic, system, and engineering risk. (box 2.1 describes each form of risk in detail.) there are often tradeoffs and interactions among these risks. an example is response time. to illustrate the differences and interactions, consider an example relating to a decision regarding response time of a systemšfor example, how frequently the tracks of enemy and friendly units are updated on a display. a longer response time may enable designers to employ precedented infrastructure and other architectural elements, yielding a more predictable engineering process. that is, from the perspective of the planning phases, a mostly linear plan to engineer the product is more likely to yield a successful outcome. in other words, programmatic risks (or project risks) are low. the long response time may, however, create operational difficulties due to insufficient timeliness. this is a kind of system riskšthe possibility of a system failing to accomplish its mission. that is, while there may be low risk in producing a system with a long response time, it may be less likely to be operationally valuable. more generally, system risks can pertain to a wide range of hazards and suitability factors in operations, such as performance, security, usability, valid functionality, and integration and interoperation. system risks can also include ﬁlongtailﬂ risksševents with high consequence and low (perceived) likelihood. in this latter case it can be difficult to assess how much effort should be applied to mitigate the risk. suppose, on the basis of upfront user studies, it is decided to require a guarantee of a specific short response time. this would certainly reduce the system risk related to suitability of the response time. but the short response time may preclude use of the commodity infrastructure and, in the absence of validated alternatives, create uncertainties in the engineering phases of the project regarding architectural choices. the resulting uncertainties and consequences created within the engineering process are engineering risks. which is the correct architectural choice to make? if the answer is not known until the system is put into an operational environment for test and evaluation, then the uncertainty persists for a longer period, more engineering investment is made prior to resolution of the uncertainty, and more rework is required should the choice need to be revised. additionally, when one possibility is eliminated, uncertainty may remain regarding the choice among the remaining candidate options, and further effort may be required to resolve this choice. this adds to engineering risk, and it may add to project risk as well if there is insufficient allowance in cost and schedule for rework in the project budget. in many cases, the costs of unwinding previous bad decisions become prohibitive, and as a consequence the mismatched architecture (or other aspects of the system design) becomes a legacy infliction that is constantly worked around, adding to downstream costs and risks.evaluation of architectural alternatives through full development and operational tests is rarely required, however. techniques such as architectural modeling and simulation, for example, would enable the architectural alternatives to be evaluated earlier in the process and at lower cost, lowering engineering risk. (see chapter 5 for a discussion of the associated research challenges.)the probabilistic models for risk assessment have limitations. a software manager may find it tempting, when considering the mathematical characterization of risk as the product of consequence and probability, to develop mathematical models for probabilities. this is sometime useful but also can be dangerous, since probabilistic models often fail us in software. for example, a security vulnerability could be perceived as high consequence, but very low likelihood, and so may be left unaddressed. but once the vulnerability becomes known to adversaries (e.g., as a zeroday vulnerability), then the probability can rise dramatically, and with it the extent of risk. unfortunately, probabilistic models fail also because of aspects other than security. the possibility of intermittent problems such as deadlocks, for example, can change quite dramatically with changes in processor, communication, or storage infrastructure. additionally, traditional models of redundancy as a means to reduce risk are most effective when event probabilities are not coupled. but this proves to be a dangerous expectation in the engineering of software.1 on the other hand, in systems engineering efforts where software is embedded as part of a cyberphysical system, there are abundant probabilistic models for faults in attached physical components, and these models may have dependencies on other probabilistic models relating to aspects of the operating environment. in these cases, the familiar engineering mathematics for reliability must be employed, and the results of these analyses will inform the design of software to support tolerance or containment of errors resulting from faults in the attached components. credit for engineering risk reduction. the apollo moon missions of the 1960s had systems risk (hazard) related to delivering and returning astronauts safely. this risk could be mitigated through various safety mechanisms. in general, there may be little correlation between system risks and the other kinds of risks, especially when the systems risk derives primarily from the context of operational usešsystem risks may be much more dependent on characteristics of the operating environment than on precedent regarding engineering decisions. but in the case of the apollo missions, there was also considerable engineering risk, particularly early in the process when basic decisions were being made and experimentation and prototyping was being done to achieve early validation (i.e., prior to operational use) of the decisions made. the experience of the prior mercury and gemini missions created precedent for many design considerations and so served to discharge certain engineering risks. in addition to relying on hardwon experience with prior systems, the principal approaches to mitigation of engineering risks involve incremental development, prototyping, and modeling and simulation. these methods reduce the cost of consequence through early feedback and response afforded. for innovative projects, efforts to resolve engineering risks can be a significant component of overall project progress, and therefore in an earned value measurement regime there need to be ways to ﬁgive creditﬂ for identification and discharge of critical engineering risks. this can be a challenge: how, for example, can the value to apollo of the experience of mercury and gemini be weighed? or, at a much smaller scale, how can the value of the agile practice of ongoing refactoring be assessed at a time when the costs are incurred? the refactoring practice enables teams to retain ongoing control over architectural decisions and to enhance the potential for architecturelevel adaptation on the basis of future needs. but the benefits associated with the refactoring costs may appear only in later cycles, perhaps several months later, and until then the return on the refactoring investment may be difficult to assess despite the longterm value to the project.  1 see, e.g., susan brilliant, john knight, and nancy leveson, 1989, ﬁthe consistent comparison problem in nversion programming,ﬂ ieee transactions on software engineering 15(11):14811485. critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.64 critical code: software producibility for defenseand retain top technical experts within its own ranks, both in the military and civilian, except in very particular circumstances.27 additionally, as discussed below, it has historically proven challenging for those software experts who have remained within the dod to maintain strong technical currency on an ongoing basis. indeed, the committee believes that the extent of software expertise within the dod is shrinking both relative to that of the commercial sector, and perhaps also in absolute terms. the false perceptions that software and it generally are reaching a plateau may lead to erroneous conclusions that the dod can fully delegate such leadership into its supply chain. this is inconsistent with the reality of the rapid ongoing growth of software technology (as elaborated in chapter 1) and the essential and growing importance of successful early architecturefocused decision making in the development of interlinking defense systems (as elaborated in chapter 3). an additional challenge to the dod is that the split between technical and management roles will result in leaders who, on moving into management, face the prospect of losing technical excellence and currency over time. this means that their qualifications to lead in architectural decision making may diminish unless they can couple project management with ongoing architectural leadership and technical engagement. the dod does not have strong technical career paths that build on and advance software expertise with the exception of the service labs. upward career progression trends leading closer to senior managementfocused roles and further away from technical involvement tend to stress general management rather than technical management experience. this is not necessarily the case in technologyintensive roles in industry. many of the most senior leaders in the technology industry have technical backgrounds and continue to exercise technical roles and be engaged in technology strategy. nonetheless, certain dod software needs remain sufficiently complex and unique and are not covered by the commercial world, and therefore call for internal dod software expertise. in the dod, however, as software personnel take on more management responsibility, they have less opportunity and incentive to stay technically current. at the same time, there is an increasing need for an acquisition workforce that has a strong understanding of the challenges in systems engineering and softwareintensive systems development. it is particularly critical to have program managers who understand modern software development and systems. commercial industry also continues to have a strong need for the same types of basic software expertise that the dod needs and in many areas is competing with the dod for the same pool of talent. notwithstanding the economic downturn, salaries for personnel in these areas remain highly competitive in order to attract key talent. although there have been improvements in recent years to accommodate highly paid technical experts, the dod and other government pay scales remain generally not as competitive with commercial industry, making it more difficult for the dod to attract and retain the expertise it needs. additionally, the dod could strengthen its ability to tap into the talent base in dodaligned research organizations and universitiesšfor example, by sponsoring security clearances for technology leaders. an additional challenge that dod faces in obtaining and attracting key talent is the requirement for cleared u.s. citizens. security considerations that often preclude the hiring of noncitizens markedly shrink the pool of available software talent. the pool of currently cleared u.s. citizens with the right skills is not sufficient to meet the demand, and this pool could be shrinking because of the reduction in support by the various agencies (principally the dod, nasa, and the department of energy) of u.s. universities in areas related to software producibility. (the networking and information technology research and development (nitrd) coordination categories are software design and productivity (sdp) and high confidence software and systems (hcss); see box 1.5.) university programs create the most highly qualified technical personnel, from the standpoint of pure technical expertise, which can complement dod expertise in program management. it is the nature of university economics that 27 see, for example, pp. 89 in dsb, november 2000, report of the defense science board task force on defense software, office of the under secretary of defense for acquisition, technology, and logistics. available online at http://www.dtic.mil/cgibin/gettrdoc?ad=ada385923&location=u2&doc=gettrdoc.pdf. last accessed august 18, 2010critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.accept uncertainty: attack risks and exploit opportunities 65production of phds, in particular, closely tracks external research support for university projects. the recent reductions therefore mean not only that there is less u.s. research in software producibility, but also that the pipeline of softwaresavvy talent is diminishing. because the dod will not be able to directly hire the necessary talent in the short term to meet its growing needs, it needs to improve access to ﬁdodalignedﬂ talent through federally funded research and development centers (ffrdcs), service labs, and university and industry research contractors. flexibility regarding government personnel policies could allow more movement for leading technical experts in and out of government service, which could facilitate dod maintenance of technical excellence and currency in rapidly changing fields.for example, because of the rapid growth in the significance of architecturerelated capability on the dod side of major systems engineering projects, the committee has considered processes by which the dod can gain access to the very best architectural talent to address crosscutting architectural requirements and validation challenges. these processes include the assembly of architectural study groups and review panels of top experts, including experts drawn not just from the intrinsic dod talent pool, but also from industry and research. options may include focusing on trying to get engineers in midcareer in addition to young software engineers and improving the career environment so that, irrespective of age, a dod software engineer can develop and maintain her skills by actually producing software. by bringing some software engineering work inhouse, the dod may be able to stimulate interest in dod careers and opportunities.the question then becomes, how does the dod effectively become a savvy customer for these important it and softwarerelated services? traditional methods have involved some combination of developing knowhow internally and acquiring it from contractors. in each case, the necessary competence must be available to execute the programs, with particular emphasis on technologyintensive decision making. in much of this decision making, the dod must define the ﬁoperating environmentﬂ for major software and systems development efforts performed by its contractors. this operating environment includes certain dodspecific standards for interoperation, assurance, security, and so on. the expertise required in the dod is not identical to the corresponding commercial software engineering expertise. for example, dod largescale software development is almost always undertaken at arm™s length by contractors. this can complicate the implementation of practices that deviate significantly from the ﬁrequirementsfirstﬂ rfp model. for innovative systems, as the committee has noted throughout the report, there must be ongoing interaction on topics related to architecture, incremental development, and preventive practices in support of assurance. without appropriate expertise and experience, these interactionsšand associated management of incentivesšcan be difficult to manage successfully. in addition, a growing number of areas of technologyintensive decision making where the dod has particular interests and incentives vary from those of its contractors.access to talent although access needs to be improved, the dod does, however, have access to a considerable base of talent through three dodaligned sources: (1) dod ffrdcs, (2) service labs, and (3) research contractors in universities and industry. despite the reduction in funding related to software (see box 1.5), the dod has nonetheless taken modest but valuable actions to cultivate talent and introduce leading young scientists to defense systems and the defense mission. a prominent example is the computer science study group (cssg) sponsored by darpa28 that affords opportunities for younger researchers to engage more directly with defense technical challenges. 28 for more information, see http://www.darpa.mil/dso/solicitations/ra0743.html. last accessed august 18, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.66 critical code: software producibility for defenseopportunities to strengthen the dod™s software expertise there are two significant building blocks for strengthening the dod™s intrinsic software expertise that leverage the dod™s particular expertise and responsibilities in two areasšoperational test and evaluation (ot&e) and information assurance (ia). as noted elsewhere in this report, there are opportunities to expand the role of ot&e organizations to support preventive approaches to assurance and early validation, generally for innovative largescale systems engineering projects, particularly regarding architecture, process, and key quality attributesševen when detailed decisions regarding specific aspects of functional capability are deferred. a successful ia regime will require similar engagement, as well as sophisticated interaction between defensive and offensive programs and activities, engagement with those who operate and defend the dod™s communications networks, and intelligence about threats and vulnerabilities. in the cases of both ot&e and ia, leaders in practice and technology are understood to reside in the dod (and in similar institutions in other countries). by creating a visible culture of elite technologyintensive leadership in these areas, the dod has the potential to attract top talent, in a manner analogous to the ability of the national security agency (nsa) to attract top mathematicians. although it is important to ﬁgrow the ranksﬂ in these areas, the dod cannot sustain leadership unless it recruits and engages top technical talent.summarybecause the dod does not currently have the requisite expertise and talent it needs for effective software producibility and because the rapid pace of software development demands ongoing interaction with the field, the dod must engage experts outside the dod and its primes. this engagement, to be effective, should be accompanied by internal processes to apply and incorporate contributions and feedback to software projects throughout the systems engineering lifecycle. in other words, the dod should adapt processes to facilitate input from outside experts throughout the systems engineering lifecycle for softwareintensive systems, with particular emphasis on innovative/unprecedented and largescale systems and on systems engineering efforts involving iterative processes.it is essential to sponsor highquality softwarerelated research projects. investing in cuttingedge software defense projects creates value not only in advancing innovation, but also in developing a pipeline of technical experts with experience tackling dod software producibility issues. university research funding supports research opportunities for undergraduates, graduates students, and postdoctoral researchers. dod engagement with the next generation of software experts at formative stages in their careers can encourage exploring a career within the dod, thus increasing the available pool of cleared software professionals. also crucial is support for defenserelevant toptier educational programs in u.s. universities to strengthen the pipeline of top technical experts. targeted postdoctoral grants may be another avenue through which the dod can encourage emerging software professionals to choose careers in the dod.finding 26: the dod has a growing need for software expertise, and it is not able to meet this need through intrinsic resources. nor is it able to fully outsource this requirement to dod primes. the dod needs to be a smart software customer. this need is particularly significant for largescale innovative softwareintensive projects for which there are crosscutting software architectural requirements and validation challenges.the case for the dod to have software expertise on its side of the table is compelling. increasing complexity, scale, and interoperability in a context of rapid innovation and sophisticated incremental and iterative processes require the dod to become a knowledgeable customer of software tools and critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.accept uncertainty: attack risks and exploit opportunities 67systems. direct access to this necessary expertise, in light of industry™s competing interest in hiring similar professionals, is limited. for these reasons, a combination of (1) outreach to ffrdcs and similar dod focused organizations, academia, and industry and (2) internal dod education and development of software expertise is needed to bridge the gap. critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.68 3assert dod architectural leadership for innovative systemsthe increasing complexity and scale of software systems demand that the department of defense (dod) play an active role in developing and iterating systems architecture throughout the project lifecycle. this chapter characterizes the special role of architecture in software producibility, describes its particular challenges, and discusses how the dod can strengthen its architectural leadership in software development when so much of its software development is conducted by contractors working at arm™s length from dod mission stakeholders. software architecture and its critical role in producibilitysoftware architecture is conventionally defined as ﬁthe structure or structures of the system, which comprise software components, the externally visible properties of those components, and the relationship among them.ﬂ1,2 just as in physical systems, architectural commitments comprise more than structural connections among components of a system. the commitments also encompass decisions regarding the principal domain abstractions to be represented in the software and how they will be represented and acted upon. the commitments also include expectations regarding performance, security, and other behavioral characteristics of the constituent components of a system, such that an overall architectural model can facilitate prediction of significant qualityrelated characteristics of a system that is consistent with the architectural model.architecture represents the earliest and often most important design decisionsšthose that are the hardest to change and the most critical to get right. architecture makes it possible to structure requirements based on an understanding of what is actually possible from an engineering standpointšand what is infeasible in the present state of technology. it provides a mechanism for communications among the stakeholders, including the infrastructure providers, and managers of other systems with requirements for interoperation. it is also the first design artifact that addresses the socalled nonfunctional attributes, such as performance, modifiability, reliability, and security that in turn drive the ultimate quality and capability of the system. architecture is an important enabler of reuse and the key to 1  len bass, paul clements, and rick kazman, 2003, software architecture in practice, 2nd ed, boston: addisonwesley.2  there are other definitions (see http://www.sei.cmu.edu/architecture/publisheddefinitions.html#modern) but the principles are consistent among them.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.assert dod architectural leadership for innovative systems 69system evolution, enabling management of future uncertainty. in this regard, architecture is the primary determiner of modularity and thus the nature and degree to which multiple design decisions can be decoupled from each other. thus, when there are areas of likely or potential change, whether it be in system functionality, performance, infrastructure, or other areas, architecture decisions can be made to encapsulate them and so increase the extent to which the overall engineering activity is insulated from the uncertainties associated with these localized changes.3attention to the architecture is not limited to just the design and coding phases of software. integrity of the architecture is maintained, often with supporting code analysis tools, throughout the software system lifecycle. this is done because a single software change at any stage, including maintenance in the latter stages of a system lifecycle, can violate the key architectural decision parameters essential for acceptable system behavior, for future evolution and enhancement, and for assurance.4 during construction of a system, the architectural perspective is essential to assessing progress and risks, and the ability to make decisions and tradeoffs among various alternatives. as systems scale up, the extent of effort that must be devoted to architecture also scales up, and slightly more steeply so that a greater percentage of overall effort is devoted to architectural considerations.5 these include design, tradeoff analysis with respect to quality attributes from requirements, identification and analysis of precedent and related ecosystems, etc. it is noted by boehm and turner6 that risk and precedent drive the balance between practices appropriate for precedented systems (i.e., ﬁplandriven methodsﬂ) and practices appropriate for innovative systems (i.e., ﬁagile methodsﬂ). as noted in chapter 1, largerscale systems most often must include both kinds of practices, especially when architectural design successfully localizes or encapsulates innovative elements and maximizes use of precedented ecosystems and infrastructures. (for further discussion of architecture, see box 3.1.) as also noted in chapter 1, precedented systems are those systems whose capabilities and attributes are highly similar to those that have been produced before and therefore do not require significant software innovation. in these cases, from the standpoint of engineering risks, the most critical precedents are not of requirements, but of architecturešwhenever possible, the software architecture should be well understood and derived from an analysis of previous instances of the architecture. the analysis should strongly influence the development of the software architecture for the new system, as should an understanding of the likely evolution of the involved ecosystemsšand incremental evolution is characteristic of successful ecosystems. major weapon and commandandcontrol systems may typically 3  the nature of modularity and its value to business outcomes are explored in alan maccormack, john rusnak and carliss baldwin, 2007, ﬁthe impact of component modularity on design evolution: evidence from the software industry,ﬂ harvard business school technology & operations mgt. unit, research paper no. 08038. available at ssrn http://ssrn.com/abstract=1071720. last accessed august 20, 2010; and carliss baldwin and kim b. clark, 2000, design rules, volume 1, the power of modularity, cambridge, ma: mit press. 4  one of the first studies of the consistency of modeled architectural intent and asbuilt reality in a verylargescale code base was undertaken by gail c. murphy, 1996, ﬁarchitecture for evolution,ﬂ in alexander l. wolf, anthony finkelstein, george spanoudakis, and laura vidal, eds., proceedings of 2nd international software architecture workshop (isaw™96), san francisco: acm, pp. 8386. followup work is reported in martin p. robillard and gail c. murphy, 2003, ﬁfeat: a tool for locating, describing, and analyzing concerns in source code,ﬂ demonstration session, proceedings of the 25th international conference on software engineering (icse™03). portland, or, may 2003, pp. 822823.5  see barry boehm, ricardo valerdi, eric honour, 2008, ﬁthe roi of systems engineering: some quantitative results for softwareintensive systems,ﬂ systems engineering (11)3:221234; mark w. maier and eberhardt rechtin, 2000, the art of systems architecting, 2nd ed., boca raton: crc press; manuel e. sosa, steven d. eppinger, craig m. rowles, 2004, ﬁthe misalignment of product architecture and organizational structure in complex product development,ﬂ management science 50(12):16741689; alan maccormack, john rusnak, and carliss y. baldwin, 2006, ﬁexploring the structure of complex software designs: an empirical study of open source and proprietary code,ﬂ management science 52(7):10151030; and manuel e. sosa, jürgen mihm, and tyson browning, 2009, ﬁcan we predict the generation of bugs? software architecture and quality in opensource development,ﬂ insead working paper 2009/45/tom.6  barry boehm and richard turner, 2003, ﬁusing risk to balance agile and plandriven methods,ﬂ computer 36(6):5766. available online at http://faculty.salisbury.edu/~xswang/research/papers/serelated/agile/r6057.pdf. last accessed august 20, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.70 critical code: software producibility for defensebox 3.1 software architecturesoftware system architecture is conventionally defined as the structure or structures of the system, which comprise software components, the externally visible properties of those components, and the relationship among them. in essence, architecture is the set of organizing principles, both structural and semantic, that constrain the ways by which software elements of a system interact. a wellconceived software architecture can facilitate separation among work assignments allocated to software developers because it defines key elements of the ﬁcontractsﬂ that regulate the intended connections among software elements. architectural commitments for a software system have implications throughout the lifecycle of the system. architectural commitments can predict critical quality attributes related to performance, security, reliability, and other ﬁnonfunctionalﬂ properties. as a consequence, architectural decisions are among the most important first decisions program managers and stakeholders make yet the most difficult to change or correct.the committee™s definition of software architectures includes more than just structural considerations relating to which components may interact with which other components through what kinds of ﬁconnectors.ﬂ1semantic architectural commitments may relate to protocols, data representation invariants, exceptional flow of control, timing properties and deadlines, concurrency and threading, pattern compliance, and other attributes. this combination of structural and semantic commitments is of benefit when 1  david garlan, 2003, ﬁformal modeling and analysis of software architecture: components, connectors, and eventsﬂ in formal methods for software architectures, pp. 124 in formal methods for software architectures, marco bernardo and paola inverardi, eds., berlin: springer publishers.it is transparentšthat is, susceptible to modeling, analysis, and management of consistency with code. this enables software developers to more readily predict behaviors and interactions among existing and proposed system elements. software architecture also has implications for how users interact with software systems, in the sense that architectural commitments can regulate the responsiveness of a system to user redirection due to shifts in operational needs. in some cases, a systems concept may be amenable to wellestablished architectural concepts and design ideas. the resulting system implementations are considered precedented systems because they rely on bestpractice architectural designs or styles.2 often these designs are manifest in established software ecosystems that have emerged around similar system concepts, as in the case of web services implementations. in other cases, the proposed functionality and/or its associated quality attributes are sufficiently novel and complex that already established architectural concepts may not fully suffice. in these cases, new system architectures must be developed and validated in order to implement the proposed system concepts. this is very frequently the case in the dod due to its unique mission and the reality of continued aggressive growth in functional and quality requirements. this report focuses primarily on the conception, design, and development of these innovative or ﬁunprecedentedﬂ systems. although wellmatched architecture is not a guarantee of success in system development projects, many project failures have been associated with inappropriate, latebreaking, or poorly articulated software architectures. applying architectural design best practice can help decrease failure risks for both development projects and also (because of influence on quality attributes) for system operations.  mary shaw and david garlan, 1996, software architecture: perspectives on an emerging discipline, upper saddle river, nj: prentice hall. contain many innovative elements, as do some dod business systems. nevertheless, there are very often large spans of functionality that are precedented. this means the overall system architecture is likely to include a mix of precedented and innovative structures. in modern systems, the concept of ﬁarchitectureﬂ has broadened to include not only structural commitments (as noted in the definition at the start of this chapter), but also other design commitments that constrain and guide subsidiary design decisions, particularly decisions regarding how components of the system are meant to interact with other components. architecture commitments open or close opportunities for future evolution and enhancement. in other words, it is risky if not impossible to evaluate different alternatives or different vendors without an understanding of the architectures implicit in what they propose.in particular, modern software ecosystems have a set of architectural commitments at their core. web services, for example, are structured in conventional ways with welldefined software interfaces among the components and, additionally, a number of ﬁrules of the roadﬂ regarding what are appropriate interactions across those interfaces (examples shown in chapter 1). another example is modern dataintensive computing, such as done extensively at companies such as google and yahoo!. much of this dataintensive computing activity shares a single relatively simple system architecture concept, called mapreduce, which is designed to address the challenges of distributed computing with enormous amounts of data. the mapreduce concept has turned out to be applicable to a very wide range of problems, with the result that there is now a growing community of users for a ﬁbig dataﬂ ecosystem focused around a set of opensource tools.7 despite the technical simplicity of the mapreduce meta7  hadoop, zookeeper, hdfs and mapreduce at apache are explained further online at http://hadoop.apache.org/.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.assert dod architectural leadership for innovative systems 71box 3.1 software architecturesoftware system architecture is conventionally defined as the structure or structures of the system, which comprise software components, the externally visible properties of those components, and the relationship among them. in essence, architecture is the set of organizing principles, both structural and semantic, that constrain the ways by which software elements of a system interact. a wellconceived software architecture can facilitate separation among work assignments allocated to software developers because it defines key elements of the ﬁcontractsﬂ that regulate the intended connections among software elements. architectural commitments for a software system have implications throughout the lifecycle of the system. architectural commitments can predict critical quality attributes related to performance, security, reliability, and other ﬁnonfunctionalﬂ properties. as a consequence, architectural decisions are among the most important first decisions program managers and stakeholders make yet the most difficult to change or correct.the committee™s definition of software architectures includes more than just structural considerations relating to which components may interact with which other components through what kinds of ﬁconnectors.ﬂ1semantic architectural commitments may relate to protocols, data representation invariants, exceptional flow of control, timing properties and deadlines, concurrency and threading, pattern compliance, and other attributes. this combination of structural and semantic commitments is of benefit when 1  david garlan, 2003, ﬁformal modeling and analysis of software architecture: components, connectors, and eventsﬂ in formal methods for software architectures, pp. 124 in formal methods for software architectures, marco bernardo and paola inverardi, eds., berlin: springer publishers.it is transparentšthat is, susceptible to modeling, analysis, and management of consistency with code. this enables software developers to more readily predict behaviors and interactions among existing and proposed system elements. software architecture also has implications for how users interact with software systems, in the sense that architectural commitments can regulate the responsiveness of a system to user redirection due to shifts in operational needs. in some cases, a systems concept may be amenable to wellestablished architectural concepts and design ideas. the resulting system implementations are considered precedented systems because they rely on bestpractice architectural designs or styles.2 often these designs are manifest in established software ecosystems that have emerged around similar system concepts, as in the case of web services implementations. in other cases, the proposed functionality and/or its associated quality attributes are sufficiently novel and complex that already established architectural concepts may not fully suffice. in these cases, new system architectures must be developed and validated in order to implement the proposed system concepts. this is very frequently the case in the dod due to its unique mission and the reality of continued aggressive growth in functional and quality requirements. this report focuses primarily on the conception, design, and development of these innovative or ﬁunprecedentedﬂ systems. although wellmatched architecture is not a guarantee of success in system development projects, many project failures have been associated with inappropriate, latebreaking, or poorly articulated software architectures. applying architectural design best practice can help decrease failure risks for both development projects and also (because of influence on quality attributes) for system operations.  mary shaw and david garlan, 1996, software architecture: perspectives on an emerging discipline, upper saddle river, nj: prentice hall. phor, its ecosystems include highly complex infrastructure to support reliability and robustness in the face of intermittent failures of individual components in largescale data centers, such as commodity processors and disk drives. this enables data centers to be established with larger numbers of cheap commodity components rather than the more expensive options of highly reliable components, or of overall tasklevel checkpointing, etc.8 this ecosystem shares architectural characteristics with google™s internal mapreduce ecosystem.9 a consequence is that architectural decision making for any particular software development project is profoundly influenced by knowledge of related ecosystems, of systems and hardware infrastructure, of available frameworks and libraries, and of previous experience with similar systems and projects. small changes to architectural requirements can open or close opportunities to exploit rich existing ecosystems, greatly reducing both cost and risk. 8 such was the experience of the aegis high performance distributed computing program hiperd project to replace expensive ﬁmissioncriticalﬂ single processors with a network of multiple affordable processors that can be made more survivable using techniques of distributed computing. for more information, see, for example, l. r. welch, binoy ravindran, robert d. harrison, leslie madden, michael w. masters, and wayne mills, 1996, ﬁchallenges in engineering distributed shipboard control systems,ﬂ in proceedings of workinprogress session of the ieee realtime systems symposium, december 1996, available at http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.42.4454&rep=rep1&type=pdf. last accessed august 20, 2010. see also karen f. o™donoghue and david t. marlow, 1998, ﬁthe application of ntp to navy platforms,ﬂ 29th annual precise time and time interval (ptti) meeting, long beach, ca, december 1997. 9  jeffrey dean and sanjay ghemawat, 2004, ﬁmapreduce: simplified data processing on large clusters,ﬂ osdi™04: sixth symposium on operating system design and implementation, san francisco, ca, december 2004. available online at http://labs.google.com/papers/mapreduce.html. last accessed august 20, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.72 critical code: software producibility for defenseconsider, for example, choices made by developers of a software system that involves complex interactive graphical user interaction (gui) to visualize results stored in a large database, such as results of modeling and simulation. the architecture of this software system will be influenced by available choices for the database and the gui frameworks. the architecture of the overall application will be guided by several factors: (1) framework design constraints implicit in the gui frameworks available, (2) database interfaces offered by potential vendors, and (3) prior experience in developing interactive visualization systems for modeling and simulation. the architectural decisions are thus informed by experience, by knowledge of the principal ecosystems and conventional structures used for gui frameworks and databases, by particular refinements of those conventional structures associated with candidate software components, and by infrastructure commitments.architecture can often be reused across similar products, encouraging development of supporting tools to facilitate its reuse. in a productline approach, a family of related systems shares architectural elements and components. this kind of approach offers not only significant cost advantages, but also promotes faster time to market, ability to reuse infrastructure, and, perhaps most importantly, significantly reduced engineering risk (i.e., uncertainties and consequences related to the process of making, acting on, and validating design commitments during the engineering process). indeed, sound architectural decisions, often even more than requirements decisions, are a principal enabler of product lines, of flexibility in evolution and maintenance, of ability to exploit the rapid growth in hardware infrastructure (processors, storage, communications), and of ability to build effectively on the increasingly powerful base of software infrastructure (operating systems, databases, gui frameworks, etc). software architecture in industryindustry leaders in the development of software pay considerable attention to the software architecture as an essential, not an accidental, set of design decisions. throughout a system™s lifecycle, a managed software architecture provides critical evidence that a softwarereliant system is capable of meeting its business and mission goals. respected companies such as microsoft, intuit, ibm, j.p. morgan, bosch, and siemens engage in rigorous training and certification processes for their architects.in the case of microsoft, software architects are drawn from the most senior and accomplished technical people in the company and have the responsibility for investigating architectural alternatives, designing a system™s architecture, and ensuring that the resulting software product adheres to the desired architecture. at one time, the windows team had an architecture review board composed of senior technical contributors and tasked with reviewing all groups™ potential changes and extensions to windows.ibm has evolved corporate standards for technical roles and technical career paths for software professionals including architects. these senior positions are achieved through years of apprenticeship, a track record of accomplishment, and approval by a certification board composed of technical peers. titles such as senior it architect, distinguished engineer, and ibm fellow reflect highly influential roles with ﬁexecutiveﬂ standing within ibm.in addition to staffing and standards, architecture, or rather architectural reuse, plays an important role in the development of many successful commercial ecosystems and product lines. to take just one example of a product line, apple™s recently introduced ipad tablet reuses in large measure the software architecture from the iphone. the iphone, in turn, reuses many key architectural and infrastructural elements from systems as early as the next computer, which was introduced more than two decades ago.many productline commonalities exist across time, in the sense of architecture designed to anticipate evolution of capability, institutional growth in capacity, and other ﬁnaturalﬂ steps of growth. the generality of a suitable systems architecture is significant for the dod because many of its systems persist for several decades. but there is a danger in misconstructing the concept of ﬁgeneralityﬂ in architecture. it is well estabcritical code: software producibility for defensecopyright national academy of sciences. all rights reserved.assert dod architectural leadership for innovative systems 73lished in software practicešand a core tenant of agile techniquesšthat excessive structural generality at the outset of a project can create enormous inefficiencies and engineering risks, slowing down developers who must provision that generality despite the fact that it may not be needed downstream. the generality also creates added engineering risk, because it complicates the natural progression of change and evolution that is characteristic of incremental development and longlived software systems generally. there is thus a balance that must be struck. the best ﬁgeneralityﬂ may be in the form of wellcrafted ﬁseedﬂ commitments at the outset of a project that can: (1) establish architectural direction, (2) yield the intended benefits in quality attributes and flexibility, and (3) afford engineering leaders sufficient intellectual control and flexibility to enable ongoing refactoring as required over a systems lifecycle. other productline commonalities exist within subsystems or in components of larger systemsšthat is, ﬁproduct lineﬂ is not just meaningful at the level of overall systems. as dod systems scale up and interconnect, the architectural commonalities that comprise ﬁproduct linesﬂ could focus increasingly on designs for the common protocols that support interlinking and for the many sets of data formats and representations that are needed to permit information flow among dod and other systems. the committee characterize these as ﬁarchitecturalﬂ commonalities because they serve in the role described at the outset of this chapteršas key design commitments that support quality attributes and that constrain implementation choices.finding 31: industry leaders attend to software architecture as a firstorder decision, and many follow a productline strategy based on commitment to the most essential common software architectural elements and ecosystem structures.note that this finding focuses on the most essential commitments as comprising initial architectural decisionsšmore is not necessarily better.architectural problems as a source of software problemswhether or not it is explicitly identified and managed, every software system has an architecture, and larger systems have multiple levels of architecture definition, addressing design choices regarding subsystems and components. although having a wellmatched architecture is not a guarantee of success, software systems that are not based on wellformulated software architectures are more likely to exhibit the kind of software horror stories too often experienced in dod acquisitions with respect to project risk.10 at the product level, with respect to systems risk, these are the systems with communications bottlenecks, systems that hang up or crash, systems that have difficulty resynchronizing after disconnect, systems with database access that is sluggish or unpredictable, and systems that users judge as overly complex. these horror stories also occur in previously wellperforming legacy systems after a maintenance release, often because code changes violate the architecture, which in many cases was not explicit and therefore not managed. at the process level, these are the systems that are unable to exploit established and evolving ecosystem infrastructure and improving software component capabilities, that cannot readily interoperate and federate with other systems, that defy effective quality evaluation practices, and that iterate in development without convergence (socalled ﬁdeath spiralsﬂ). perhaps most significantly, these are the systems whose engineering risks and uncertainties most often fail to resolve and 10 see daniel l. dvorak, 2009, ﬁnasa study on flight software complexity,ﬂ technical report, aiaa infotech@aerospace conference, april 69, 2009, seattle: american institute of aeronautics and astronautics, inc.; see also j. elm, d. goldenson, k. emam, k. donatelli, and a. neisa, ndia se effectiveness committee, 2008, a survey of systems engineering effectiveness, software engineering institute, carnegie mellon university, cmu/sei2008sr034, available online at http://www.sei.cmu.edu/reports/08sr034.pdf, last accessed august 20, 2010. see also nrc, daniel jackson, martyn thomas, and lynette i. millett, eds. software for dependable systems: sufficient evidence? washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=11923. last accessed august 10, 2010. critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.74 critical code: software producibility for defenseso are transformed into system and project risks (chapter 2). recent studies by the defense science board (dsb) and nasa confirm that software architectural issues are identified as a systemic cause of software problems.11,12the dod experience with architecturebased developmentthe dod experience with longterm software acquisition programs has provided strong evidence for the value of software architecture. the air force command center processing and display systemreplacement (ccpdsr) program13 demonstrated the benefits of architecturebased development and the value of supporting tools, even when developed for a single program.14 in addition, the 1994 dsb15 study observed that for many dod systems, both the functionality and the nonfunctional attribute requirements were similar to previously acquired systems, and could be subjected to the kind of analysis that the air force electronic systems division (esd)16 performed on command centers. in a demonstration program called prism (portable reusable integrated software module), esd analyzed the command centers that it had helped acquire over the preceding decade. based on that analysis, a common architecture was developed that could be tailored to accommodate unique requirements so that esd could support a product line for a class of command centers.17 esd also recognized that such common architecture could be supported by a collection of tools, including code generation, that as a suite significantly reduced the risk, cost, and time required to acquire a new command center. in this manner, success in innovation in early designs yields explicit precedent, in the form of architectural successes, that can reduce atthemargin costs and risks for adding new command centers and incremental new functionalities. a similar demonstration effort was supported by the air force aeronautical systems division (asd) for development of a prototype architecture for aircraft simulators.18 that demonstration showed that the air force was able to acquire simulators for different 11 defense science board (dsb), 2009, report of the defense science board task force department of defense policies and procedures for the acquisition of information technology, washington, dc: office of the under secretary of defense for acquisition, technology, and logistics. available online at https://www.stk.com/downloads/resources/download/riskandcostreduction/200904itacquisitionnew.pdf. last accessed august 20, 2010.12 daniel l. dvorak, ed., march 2009, ﬁnasa study on flight software complexity,ﬂ jet propulsion laboratory california institute of technology, pasadena, ca. available online at http://oceexternal.nasa.gov/ocelib/pdf/1021608mainfswc finalreport.pdf. last accessed august 20, 2010.13 ﬁthe air force™s command center processing and display system replacement (ccpdsr) program provides another reuse variation. trw, the prime contractor, took software developed and funded under the ccpdsr contract, and updated and reworked the product using internal funds, with the intention of selling it commercially. trw was successful and has since licensed it, under the acronym unas (universal network architecture services), to both digital equipment corporation and rational. – clearly, this reuse occurred through trw™s initiative, and has been commercially successful. other applications which may benefit from work done under ccpdsr include atccs and the air force™s systems software and design center.ﬂ quoted from unisys corporation, march 1991, us45  current far and budget/finance requirements, reston, va. available online at http://www.dtic.mil/cgibin/gettrdoc?ad=ada240917&location=u2&doc=gettrdoc.pdf. last accessed august 20, 2010.14 walker e. royce, 1998, software project management: a unified framework, reading: addison wesley. 15 dsb, 1994, report of the defense science board task force on acquiring defense software commercially, washington, dc: office of the under secretary of defense for acquisition, technology, and logistics.available online at http://www.dod.gov/pubs/foi/readingroom/859.pdf. last accessed august 20, 2010.16 esd and asd were part of the air force systems command (afsc) until 1992 when the air force materiel command was established.17 randall w. lichota, robert l. vesprini, bruce swanson, 1997, ﬁprism product examination process for component based development,ﬂ 5th international symposium on assessment of software tools (sast ‚97), pittsburgh, pa, june 35, p. 61.18 william k. mcquay, 1997, ﬁair force modeling and simulation trends: modeling and simulation makes possible the unaffordable.ﬂ program manager magazine, septemberoctober 1997: 128132. available online at http://www.dau.mil/pubscats/pubscats/pm/articles97/msusaf.pdf. last accessed august 20, 2010. see also william k. mcquay, 1996, ﬁmodeling and simulation trends and jmass technology,ﬂ proceedings of the ieee 1996 national aerospace and electronics conference (naecon),may 2023,1996 , dayton oh, pp. 579584. available online at http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=517707&isnumber=11050. last accessed august 20, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.assert dod architectural leadership for innovative systems 75aircraft using the same base architecture at significantly lower cost and on an accelerated schedule, even in parallel with the aircraft development. similarly, tools were developed to support the effort. these demonstration projects were originally conducted in the late 1980s and promised to put the dod in a leadership position with respect to software architecturedriven acquisition. based on these promising demonstration efforts and similar experience among industry leaders, the dsb recommended that the dod institute an architecturedriven acquisition strategy for softwareintensive systems.19 the dsb also recommended that other application areas be similarly analyzed and common software architectures developed to establish the basis of a product line. unfortunately, these demonstration programs were not continued. this was largely for the reason that the dsb has cited as a primary inhibitoršnamely that each program is autonomous and believes that its requirements are somehow unique, and thus conformance with precedent could be perceived as excessive compromise. the reality is that such conformance is a principal pattern of successful commercial innovation, even for the most aggressive projects. the study recommended that the program executive offices (peos) be given funding and staffing to perform such analyses and develop or acquire appropriate software architectures. that advice has been repeated by the dsb in other studies. the benefits of such approaches are proven, significant, and well documented by industry case studies across multiple domains.20one of the challenges to success is the capability of the peo organization to make the technical case for a set of architectural decisions that constrain the decision space of program offices and primes. these constraints provide broad advantage across a family of systems and for particular system development efforts, with respect to precedent and risk. chapter 2 considers the nature of engineering risk and the considerable benefits of reducing it by following precedented architectural pathways. unfortunately, those benefits (or architectural reuse) may not be easily measured at the outset, while at the same time designers and developers may have concrete complaints over the architectural constraints imposed (also at the outset) so that those downstream benefits can be realized. additionally, contractors (and government program managers) may not always be offered appropriate incentives. the natural inclination is to develop new architectures and infrastructural elements rather than compromise some autonomy, accept modest nearterm engineering risk (in exchange for mitigation of major longterm engineering risk), and implement a bias toward adopting existing infrastructure, productline architectures, and other ecosystem models.21 another trend within the dod is to find ways to accelerate fielding of new capabilities. one idea beginning to get traction is to focus on getting 80 percent of the requirement fulfilled in significantly less time and cost.22 one enabler of rapid deployment with reduced risk is to base the development on known software architectures that are appropriate to the application or to develop architectures such that they support incremental releases while still providing persistent quality behavior. although there are intrinsic incentives in the commercial product space, as noted above, those incentives may not always be present in system acquisition efforts, unless there is appropriate planning at the outset.19 dsb, 1994, report of the defense science board task force on acquiring defense software commercially, washington, dc: office of the under secretary of defense for acquisition, technology, and logistics, washington, dc. available online at http://www.dod.gov/pubs/foi/readingroom/859.pdf. last accessed august 20, 2010.20 ﬁcatalog of software product linesﬂ sofware engineering institute.edu http://www.sei.cmu.edu/productlines/plpcatalog.html. last accessed august 20, 201021 several of the ideas mentioned here and in chapter 2 are supported in section 804 of the 2010 national defense authorization act. national defense authorization act (ndaa) of fiscal year 2010, pub. l. no. 11184, 111 congress, (2009). available online at http://www.wifcon.com/dodauth10/dod10804.htm. last accessed august 10, 2010. 22 dsb found that ﬁprogram management does not encourage 80% solution for 20% cost.ﬂ on p. 23 in dsb, june 1994, report of the defense science board task force on acquiring defense software commercially, washington, dc: office of the under secretary of defense for acquisition and technology. available online at http://www.dod.gov/pubs/foi/readingroom/859.pdf. last accessed august 10, 2010. critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.76 critical code: software producibility for defensefinding 32: the technology for definition and management of software architecture is sufficiently mature, with widespread adoption in industry. these approaches are ready for adoption by the dod, assuming that a framework of incentives can be created in acquisition and development efforts.finding 33: the dod would benefit from explicit attention to software architecture and industry best practice, including (1) formalizing career paths and role descriptions for software architects, (2) identifying ways that dodaligned software architects can provide objective advice (see chapter 2), and (3) enhancing organizational structures to support effective architectural leadership.this finding applies to both precedented and innovative ecosystems. architecture is increasing in importance due to the broadening role of software in systems, the increasing interlinking of systems, and the growing role of ecosystems and the consequent growth in access to common software infrastructure.despite the organizational presence of peos, the committee has unfortunately not seen evidence that the dod has moved toward an overall acquisition strategy for innovative softwareintensive systems in which software architecture has a principal role. as noted above, such approaches can make sense for several possible reasons: first, where software requirements for multiple systems are similar, software architectural commitments enable productline strategies, with the benefits not only of reuse of common infrastructure, but also of reduced engineering risk because the reuse is planned. a bias toward commonality across similar systems is the means by which new software ecosystems are created (chapter 1). the resulting benefits in cost can be very significantšsometimes an orderofmagnitude reduction. a second rationale for early architectural commitment is planning for interoperation. indeed, many of the identified postdeployment difficulties with interoperation and platform evolution are symptoms of insufficient planning with respect to requirements and architecture. a third benefit, very important for management of costs and engineering risk in longlived defense systems, is planning for flexibilityšarchitecture commitments effectively define and encapsulate areas where change is anticipated, or not (more on this aspect below).admittedly, at the time of the initial 1994 dsb recommendation,23 software architecture was not as well understood, and supporting practices and technology not as well developed, as they are today. in the ensuing 10 years, a significant body of work has been amassed that validates these recommendations and codifies best practices. books have been written about software architecture, software architecture training is available, universities offer courses, software architecture assessment methodologies are available, and code validation tools are available to verify consistency with the architecture. finding 34: several dod programs are using software architecturedriven acquisition with successful results.there are programs that followed an acquisition strategy driven by early commitments regarding software architecture and that illustrate the benefits that would be obtained from a pervasive commitment to an architecturedriven approach. for example, the army integrated battle command system (ibcs), the air force joint mission planning system (jmps) and the navy common link integration processing (clip) program had architecturedriven approaches written into the request for proposals (rfp) and contract language. software architecture played a major role in the rfp and sourceselection activities in the navy ddg1000 program. the army warfighter information networktactical (wint) has applied an architecturecentric approach in two different acquisition phases after the contract was 23 dsb, november 1994, summer study on information architecture for the battlefield, washington, dc: office of the under secretary of defense for acquisition, technology. and logistics. available online at http://www.dtic.mil/cgibin/gettrdoc?ad=ada286745&location=u2&doc=gettrdoc.pdf. last accessed august 20, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.assert dod architectural leadership for innovative systems 77in place and has conducted both software architecture and system architecture evaluations using the architecture tradeoff analysis method (atam).24 the air force gpsocx program is also pursuing an architecturedriven approach. recognizing the importance of the software architecture and providing for contractual means to ensure appropriate software architecture practices and artifacts have provided early, objective evidence about software structure and system behavior. moreover the air force has established baselines against which to manage software development over the lifecycle. such efforts, when supported with appropriate analysis tools, identify risks early in the lifecycle and, when such risks are mitigated, significantly reduce overall program risk.the army™s strategic software improvement program (assip), which seeks to improve the way in which the army acquires softwareintensive systems, established an architecture initiative to increase the focus on software architecture as part of major systems acquisitions and to develop organic capability within the army for architecturecentric practices.25 one study of 12 major systems indicated successful use of architecture practices, in particular architecture evaluation, to increase understanding of system requirements, design decisions, and risks.26 on average, 25 significant risks are found during a software architecture evaluation. for example, a recent use of the atam coupled with an architecture analysis and design language (aadl)27 uncovered previously undiagnosed design flaws in apache™s new runtime system.28although it is difficult to place a quantitative value on earlydetected technical risks, in a study performed by the national defense industrial association (ndia) in 20062007, which surveyed 64 programs and projects that had defense contractors, 46 percent of the projects that had higher product (software) architecture capability delivered the best project performance. in comparison, only 11 percent of the projects that had the least architecture capability delivered the best project performance.29 this study concluded that the early phases of systems engineering, which include software architecture development, have the most impact. when an architecturedriven approach is taken to establish a software product line, the quantitative impact is well documented. at this juncture, there are both government and defense industry examples including army training support center (atsc); advanced multiplex test system (amts); army™s common avionics architecture system (caas) product line;30 textron overwatch intelligence center software product line;31 the live, virtual, constructive integrating architecture (lvcia) product lines 24 ﬁsoftware architecture and tradeoff analysis method,ﬂ available online at http://www.sei.cmu.edu/architecture/consulting/systematam/index.cfm. last accessed february 20, 2010.25 mark kasunic, 2004, army strategic software improvement program (assip) survey of army acquisition managers, technical report, cmu/sei2004tr003, pittsburgh, pa: carnegie mellon university/sei. available online at http://www.sei.cmu.edu/library/abstracts/reports/04tr003.cfm. last accessed august 20, 2010.26 robert nord, john k. bergey, stephen blanchette, jr., and mark h. klein, april 2009, impact of army evaluations, pittsburgh, pa: carnegie mellon university. available online at http://www.sei.cmu.edu/library/abstracts/reports/09sr007.cfm. last accessed august 20, 2010.27 ﬁarchitecture analysis and design language,ﬂ available online at http://www.sei.cmu.edu/dependability/tools/aadl/index.cfm. last accessed august 20, 2010.28 peter h. feiler and dionisio de niz, 2008, assip study of realtime safetycritical embedded softwareintensive system, engineering practices, special report, cmu/sei2008sr001, pittsburgh, pa: carnegie mellon university/sei. available online at http://www.dtic.mil/cgibin/gettrdoc?location=u2&doc=gettrdoc.pdf&ad=ada480129. last accessed august 20, 2010.29 joseph p. elm, dennis goldenson, khaled el emam, nichole donitelli, angelica neisa, and ndia se effectiveness committee, 2008, survey of systems engineering effectivenessš initial results, a, special report, cmu/sei2008sr034, pittsburgh, pa: carnegie mellon university/sei. available online at http://www.sei.cmu.edu/library/abstracts/reports/08sr034.cfm. last accessed august 20, 2010. 30 paul c. clements and john k. bergey, 2005, the u.s. army™s common avionics architecture system (caas) product line: a case study, technical report, cmu/sei2005tr019, pittsburgh, pa: carnegie mellon university/sei. available online at http://www.sei.cmu.edu/library/abstracts/reports/05tr019.cfm. last accessed august 20, 2010.31 paul jensen, 2009, ﬁexperiences with software product line development,ﬂ crosstalk 22(1):1114.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.78 critical code: software producibility for defenseat army peo/stri; and bae™s diamond software product line.32 as the successful case studies indicate, the government benefits through reduced engineering risk, reduced development and maintenance costs, decreased time to field, increased system agility, and improved system quality. the development of new ecosystems centered around the derived architectures also fuels the competitiveness of u.s. defense software industries.there is the possibility that the focal point for such crossprogram leverage could be through the peo structure. but the committee perceives that the necessary authority and budget flexibility do not exist. nonetheless, occasionally peos are able to accomplish such leverage.supporting technology and research needsa number of tools are emerging or maturing that can assist in assessing potential architectural design decisions. one of the most fundamental is the tradeoff analysis of diverse quality attributes in requirements with architectural models. an example of a systematized process for conducting this tradeoff analysis, noted above, is atam.33 another example is the google file system (gfs) and the tradeoffs in its design among scale, cost, and reliability.34 in addition to this and similar processbased approaches, there are a number of significant technical enablers of architectural design. examples of these include:ł systems instrumentation and profiling. techniques to collect data from running systems can give very significant insights into the behavior and structure of the system, and provide inputs for reconstructing the architecture ﬁasimplemented.ﬂ a principal feature of modern adaptive and selfhealing architectures (sometimes called ﬁautonomic systemsﬂ) is a pervasive approach to instrumentation within a system, including at enterprise scale. the resulting instrumentation data can be used in realtime to support monitoring for security, dynamic balancing of resource usage, and reassignment of tasks in the event of local errors and failures within a large system. additionally, the data can be used forensically to diagnose performance, reliability, and security issues. diverse techniques can be used to analyze the data in real time, in nearreal time, and forensically. these techniques range from simple rulebased pattern matching to machinelearning technologies and datamining techniques. the multipurpose nature of instrumentation data has the added benefit of facilitating a ﬁreturn on investment (roi) caseﬂ for inserting the instrumentation and support for storage and analysis of the resulting database.ł interface specification models and tools. the specification and enforcement of protocols of interaction among heterogeneous software components include not only languagesupport ﬁapiﬂ specifications, but also many additional constraints or ﬁrules of the roadﬂ regarding protocols for interaction, preconditions on inputs, state constraints on objects, roles for threads, and so on. as we improve our ability to specify these constraints more completely, we become better able to separate the processes of developing separate components and assuring their compatibility. on the other hand, modern framework apis are much more complex than the simpler library application programming interfaces (apis) and protocol definitions of earlier systems. these are pervasive in web services, gui development, ajax rich clients, enterprise resource planning (erp) systems, mobile frameworks, and many other areas. the advance 32 john k. bergey, sholom cohen, patrick donohoe, matthew j. fisher, lawrence g. jones, and reed little, 2009, software product lines: report of the 2009 u.s. army software product line workshop, technical report, cmu/sei2009tr012 pittsburgh, pa: carnegie mellon university/sei. available at http://www.sei.cmu.edu/reports/09tr012.pdf. last accessed august 20, 2010.33 rick kazman, mark h. klein, and paul c. clements, 2000, atam: method for architecture evaluation, technical report, cmu/sei2000tr004, pittsburgh, pa: carnegie mellon university/sei. available at http://www.sei.cmu.edu/library/abstracts/reports/00tr004.cfm. last accessed august 20, 2010.34 for visualization of the gfs architecture and more discussion see sanjay ghemawat, howard gobioff, and shuntak leung, 2003, ﬁthe google file system,ﬂ acm sigops operating systems 37(5):2943. available online at http://labs.google.com/papers/gfssosp2003.pdf. last accessed august 20, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.assert dod architectural leadership for innovative systems 79of the underlying software technology both increases this complexity (as the power of frameworks increases) and also increases our ability to handle it using interface specification techniques. ł change impact analysis. artifacts such as modularity analyses and dependency matrices can be used to identify interdependencies among design decisions relating to separate components of a system.35 when there are design decisions that are expected to change over time, architectural structures can be developed to ﬁcontainﬂ or encapsulate those particular design decisions in an implementation such that anticipated subsequent changes influence relatively few other components. techniques related to dependency matrices are used to assess interdependencies and, based on models of potential changes to design decisions, assess the extent of impact of potential changes. when expectations regarding change rates are known early in the process, architectures can be structured to risks associated with change and to localize the cost impact of subsequent changes. looking down the road, a combination of change impact analysis and interfaces modeling can facilitate a more incremental approach to verification of new changes. ł architectural suitability measures. in addition to considerations of conway™s law, which observes the relationship between system structure and organizational/sourcing structure in large systems, there are also internal measures of quality for architectural designs. the most significant measures are (1) coupling among components, (2) cohesion within components, and (3) correspondence of changeability in requirements elements with encapsulation in architectural elements. the exact character of the measures depends highly on the specific nature of architectural models and code manifestations selected by a project. nonetheless, these overall measures can be significant indicators of the success of an architect in achieving modularity goals.ł crosscutting analyses. mechanisms such as architectural specification techniques, codequality specification fragments, compiletime ﬁpragmas,ﬂ and other declarations can be used to check that dependencies disallowed in the architecture are not added to the code. these techniques can enable developers and architects to monitor the consistency of an evolving code base with architectural intent (which may also be evolving, albeit at a slower pace). there are particular families of techniques, such as aspectoriented technologies, that, roughly speaking, facilitate better linkages and traceability between models and code. although there are many potential perspectives on the code base for a software system, certain crosscutting considerations, although completely precise and evident in models, cannot readily be made evident in code in a way that supports monitoring and analysis. aspectoriented and related technologies can provide a means to accomplish this for many kinds of models. ł assisted code generation. tools that support modeldriven engineering approaches can be used to assist developers in deriving implementations from models. in some cases, source code is generated directly from highlevel problemfocused specifications. in other cases, code templates and frameworks are used, which can be filled dynamically or at load time. this concept of domainspecific languages (dsls) is directly analogous to the generation of intermediate or machine code by compilers (e.g., the common intermediate language and associated infrastructure in microsoft™s .net, or the java virtual machine bytecode language in the java ecosystem from oracle/sun). in particular, if generated code is edited, then there is no longer an assurance (derived from trusting a compiler) of conformance with the highlevel intent. over the long haul, techniques for code generation are an intermediate step from routinized design toward configurable automation of capabilities and conventionalized interfaces in larger systems. indeed, there is no significant operational difference between fully automatic code generation and configurable componentsšboth lose traceability when results are directly modified, and both pose similar challenges to verification.35 carliss baldwin and kim clark, 1999, design rules: the power of modularity volume 1, cambridge, ma: mit press. see also carliss baldwin and kim clark, 2007, ﬁmodularity in the design of complex engineering systems,ﬂ pp. 175205 in complex engineered systems: science meets technology, dan braha, ali a. minai, and yaneer baryam, eds. berlin: springer berlin/heidelberg.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.80 critical code: software producibility for defensemany of these techniques are sufficiently well established that they can be adopted by conservative and prudent program managers. unfortunately, the upfront costs of adapting and using such techniques present an apparent budgetary risk that most program managers will not accept. in addition, in some cases these tools need to be matured and adapted for dod systems, and that level of investment is beyond the capability of individual program managers. the dod needs a systematic investment in identifying and maturing such tools and a means of encouraging their use.however, the extremely rapid pace of technology development mandates constant attention to the advancement of these techniques to ensure that capabilities continue to be applicable, especially in response to the enhanced architectural needs of more complex future systems. in particular, the dod needs to conduct the research necessary to understand the software architectural issues for dod applications (chapter 5). as previously observed, such research is unlikely to be supported at the program level. also as previously mentioned, neither will it emerge from industry research efforts, which are primarily product driven. architecture leadership is well established in commercial industry, as noted.36 it is also a specialty in aerospace firms. contractual and business incentives may sometimes conflict with goals in advancing underlying technological enablers for architectural leadership, in advancing reuse, and in creating architectureenabled mechanisms to support interlinking (interoperation across systems). in opensource projects, architectural innovation is less of a primary focus. the established successful opensource projects such as linux, apache, and firefox have historically tended to build on precedented architectural concepts. recommendation 31: initiate a targeted research program to provide software architects with better tools and techniques for dod systems.chapter 5 lays out a broad range of research that the dod must conduct to understand the software architectural issues for dod applications. but there are significant nearterm opportunities for the dod to invest in a systematic way to improve practice. specifically, each peo could be appropriated a budget to support: identification and analysis of existing software architectures and ecosystems for the application areas for which the peo is responsible; evaluation of the common features of those architectures leading to the definition of a productline approach for those systems and of common architectural elements and data models across systems; anddevelopment of improved architecturebased practices for future development.36 industry examples can be seen in giuseppe decandia, deniz hastorun, madan jampani, gunavardhan kakulapati, avinash lakshman, alex pilchin, swaminathan sivasubramanian, peter vosshall, and werner vogels, 2007, ﬁdynamo: amazon™s highly available keyvalue store,ﬂ 21st acm sigops symposium on operating systems principles, w.a. stevenson, ed., acm, pp. 205220. also see an example of interface specificationsšwsdl (web service description language, available online at http://www.w3.org/tr/wsdl and cutting analysis tools available at http://research.microsoft.com/apps/pubs/default.aspx?id=70226, and http://www.coverity.com/). last accessed august 20, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.assert dod architectural leadership for innovative systems 81strengthening dod capabilities with respect to architecturethe committee also notes that segments of the defense industry are capable of supporting software architecturedriven acquisition and productline strategy.37,38,39,40 despite a lack of financial incentives from the dod, a number of defense industry contractors have developed a cadre of software architects, supported by training and certification processes. they state that they expect it will enable them to do a better job for programs they win and will better position them to win similar programs in the future. also within the defense industry are corporate software productline initiatives and successful productline efforts that support dod acquisitions. this implies that segments of the defense industry are well positioned to support such a move on the part of the dod. if the dod decides to pursue a software architecturedriven acquisition strategy followed by a productline strategy for systems with consistent base requirements, the segments of the defense industry are equipped to respond. further, if the dod backs up the move to a software architecturedriven acquisition strategy with training of software architects, and supports research to develop and improve related supporting technology, the dod could assert leadership. (see chapter 2 for a discussion of the current state of dod software expertise and options for increasing expertise.)the office of the assistant secretary of the army for acquisition, logistics, and technology has recently issued a mandate that each program be staffed with a software architect.41 this is an important example of the kind of organic capability the dod can and should develop. these architects will neither develop software architectures nor design or implement code. however, they will be trained in software architecture practices and how that relates to acquisition of softwarereliant systems in the army. the skill set they will need includes: understanding how to evaluate software architectures, having analyses available to understand which architectural decisions will be appropriate for their requirements, employing tools to ensure that code conforms to the architecture, and building on experience to manage integrity of the software architecture during system evolution. an investment by the dod in practices and research that will support this army initiative can help it succeed.there are significant challenges to achieving success with an architectureled model. these derive from the difficulty of structuring incentives and allocating/sharing risks among the key stakeholders, including the development contractor, the dod program management organization, the ultimate operational users, and managers of related systems that might be potentially interlinked. the committee identifies here several of the challenges. one of the early issues that must be addressed involves the question of how the architecture is defined, as well as who owns the architecture. the options that have been considered42 include the dod separately contracting for the development and/or selection of the architecture and supporting tools through a competition, and then selecting the best bid. an issue with this approach is the sharing of risk and responsibility among the architecture developer, the prime, and the dod regarding architectural decisions. this is a significant challenge when the dod seeks to impose architectural constraints to enhance productline opportunities, foster interoperation, and manage the development of ultrascale systems where multiple prime contractors are involved. 37 lisa brownsword, paul c. clements, 1996, a case study in successful product line development, technical report, , cmu/sei96tr016, pittsburgh, pa: carnegie mellon university. available online at http://www.sei.cmu.edu/library/abstracts/reports/96tr016.cfm. last accessed august 20, 2010.38 david c. sharp, 1999, ﬁavionics product line software architecture flow policies,ﬂ proceedings of the 18th ieee/aiaa digital avionics systems conference (dasc), st. louis, mo.39 david kaslow, 2000, ﬁarchitecture based design applied to a remote sensing satellite planner,ﬂ incose 2000, minneapolis, mn. available online at http://www.incose.org/delvalley/343abd.pdf. last accessed august 20, 2010.40 bert schneider, dale anglin, erik baumgarten, john dinh, and mark hall, 2008, ﬁraytheon reference architecture (ra): enabling timely & affordable customer solutions,ﬂ 13th iccrts: c2 for complex endeavors. 41 see memo from ltg n. r. thompson dated may 26, 2009, and referenced in bill pollak, 2010, ﬁsoftware architects: are you losing ground if you are not credentialed?ﬂ saturn network blog, february 12, 2010. available online at http://saturnnetwork.wordpress.com/tag/architecturetradeoffanalysismethod/. last accessed august 20, 2010.42 adapted from john k. bergey and wolfhart b. goethert, 2001, developing a product line acquisitions strategy for a dod organization: a case study, sei technical report, pittsburgh, pa: carnegie mellon university.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.82 critical code: software producibility for defenseone idea is for contractors, or bidders, to first contribute to the architecture in the early phases of an incremental development, and then help to implement itšwith contract incentives for the implementation phase tied to the actual success of the architecture. this can be challenging in a competitive environment where contractors may derive differential advantage from particular architectural commitmentsšand where those commitments may conflict with other goals, such as interlinking of systems.another challenge is to develop a cadre of architects who have suitable engineering experiencešand have ongoing engineering engagement, to assure they maintain currency in ecosystems, programming technologies, tools, and architecturerelated assurance issues. this is related, also, to the expertise issue elaborated in chapter 2. competent software architects are rare. they cannot be created through shortterm training programs but must be grown through extensive experience with associated ecosystems. further, successful architects must be involved in design and implementation so that they do not promote obsolete technology and practice. they will exhibit creativity in those things that they specify to ensure a workable architecture emerges. additionally, they will avoid overspecification where it will inhibit creative opportunities for the developers. the arm™slength relationship of the dod with its contractorbased development teams creates challenges in structuring contractual relationships that facilitate the free exchange of information and feedback between developers and other stakeholdersšand in supporting the kind of adjustment and refactoring that is required to achieve early validation for crucial architectural commitments. it may be difficult for some stakeholders to ascertain which kinds of architectural commitments are most essential to success of a particular project. simple certification of evolving industrystandard ecosystems and apis, although important to an assurance process, does not necessarily constitute architectural commitment of the kind that is the principal subject of this chapter.finally, focus on any architecture should not be viewed as an invitation for the creation of compliancefocused bureaucracy. competent managers must, on an ongoing basis, assess the choice of architectural constraints for the intended benefits to quality attributes and functional capabilities. although architects will use standard ecosystems, protocols, and interfaces in defining an architecture, these choices are not equivalent to selection of standards.in developing a productline strategy, the peos need to consider the fact that the knowhow associated with the architecture, its constituent ecosystems, and the diverse related technical resources and tools are all critical factors in a selection. they must also factor into the strategy the cost of tool development and training. alternatively, they could provide financial incentives for contractors to develop those capabilities independently. recommendation 32: this committee reiterates the past defense science board recommendations that the dod follow an architecturedriven acquisition strategy, and, where appropriate, use the software architecture as the basis for a productline approach and for largerscale systems potentially involving multiple lead contractors.recommendation 33: the dod should enhance existing practices to afford better distinctions between precedented portions of systems and innovative portions of systems, wherein architectures are developed both to encapsulate the innovative elements and to afford maximum opportunity to build on experience and existing ecosystems for precedented elements. these overall architectures, and particularly the innovative elements, should be subject to early and continuous validation, especially in systems that have requirements for interoperation.the foregoing discussion, findings, and recommendations apply to both precedented and innovative (unprecedented) dod systems and subsystems. as the dod considers development of larger systems, including systems of systems, where some of the capabilities are precedented and others are innovative, the acquisition challenges become more difficult. in those cases, the development of software critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.assert dod architectural leadership for innovative systems 83architecture will be even more significant, in some cases requiring architectural innovation. indeed, in many cases of largescale interconnected systems (variously called ultrascale systems, systems of systems, netcentric systems, etc.), architectural considerations may even be a driver of choices regarding system functionality. that is, once the ﬁscopeﬂ of functional capability is identified, then architectural commitments may need to be contemplated before details are worked out regarding those functional capabilities. in this respect, quality attributes or ﬁnonfunctionalﬂ requirements (reliability, scalability, security, performance, etc.) and anticipated interoperation requirements both dominate, because, from a technological perspective, their potential for fulfillment is most directly predicted by architectural decisions. further, if the architecture effectively supports a defined ﬁscopeﬂ of functional capabilities, then many of the details regarding the particular manifestations of those capabilities can be worked out later in the processšwhen the engineering (and potentially operational) uncertainties regarding the downstream impacts of particular possible choices are reduced.43 finding 35: in systems with innovative functional or quality requirements, benefit is derived from an early focus on the most essential architectural commitments and quality attributes, with deferred commitment to specifics of functional characteristics. this approach can reduce the overall uncertainty of the engineering process and yield better outcomes. these more complex and interconnected systems consist of multiple components interacting, and include functionality that may cut across multiple traditional defense functional areas. future combat systems (fcs) is one such example. this means that building on existing, proven architectures can reduce the amount of innovation required and risk sustained in a project of this sort. because the power promised by these systems comes at a significant price in complexity (e.g., the multitude of sensors, weapons, and battle command centers), a greater focus is needed on engineering risk when planning the sequence of engineering commitments. in these cases, the biggest lever on engineering riskšand enabler of scale, interoperation, and other critical nonfunctional requirementsšis very often architecture. moreover, in many of these cases, the overall architecture is a composite of diverse precedented ecosystems structures combined with encapsulated innovative/unprecedented elements whose architecture, in the purely local context, may have associated design risks. in this manner, a massive global uncertainty is replaced by localized uncertainties, which, from a systems engineering perspective, means a consequent reduction in overall systems engineering risk. with prototyping and instrumentationšthe software analogs of the modeling and simulation practices pervasive in the development of physical systemsšthe engineering risks can be discharged through early validation, thus reducing the overall project risk even for highly innovative projects. as noted above, architecture is very often the fulcrum of potential for evolution and complexity. for example, how can architectures be developed and validated to support the kind of local autonomy necessary for diverse kinds of vehicles to navigate effectively over mixed terrain? how can software and systems architectures be evolved, for example, as algorithms and machinelearning capabilities improve? moreover, by specifying interfaces for which testing or measurement is possible, by defining reusable components, and by separating critical from noncritical parts of the system, architecture plays an essential role in localizing uncertainties regarding assurance and thus reducing overall risk related to assurance. an interesting case study of architecture and evolution in an environment with multiple competing organizations is the architecture of largescale web systems. this has been a topic of intense interest to startup and established companies for 15 years. one of the key early architectural ideas related to servers was the use of scalable networks of pc workstations and ﬁsharednothing computation.ﬂ this 43 barry boehm, ricardo valerdi, eric honour, 2008, ﬁthe roi of systems engineering: some quantitative results for softwareintensive systems,ﬂ systems engineering 11(3):221234.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.84 critical code: software producibility for defenseoriginated in academic research,44 and in turn was rapidly developed and proven in startup companies such as inktomi, google, and others. the academic research approach is quickly evolving into standard ﬁbest practiceﬂ supported by web development tools and web servers. google took several big jumps beyond this architecture to address issues related to much larger scale and the need for new computational abstractions suited to this new category of highperformance dataintensive computations. it shared its ideas through an influential series of papers on the google file system (gfs)45 and the mapreduce computational model.46 the mapreduce model, although seemingly quite radical, builds on ideas from functional programming that have their heritage in the 1960s. the architecture of these systems was replicated and adapted by others including amazon and yahoo!. indeed, yahoo! and the apache software foundation collaborated to host the opensource hadoop system, now widely adopted for applications that go well beyond text analysis.47 many of the infrastructurelevel ideas also fed the development of cloudcomputing architectures such as those supported by amazon, google, microsoft, and others.48 the point of all this is that each player incrementally adapted an existing, mostly proven architecture into a new model, with the result that the endstate (the key computational abstractions and their delivery in modern distributed data centers) appears singularly revolutionary, despite the reality of its evolutionary development.recommendation 34: the dod should learn from commercial experience and, in addition, sponsor diverse areas of technical research to help reduce the engineering risk in architecting systems that include unprecedented functional and quality attributes.some specific areas of research focus are given in the inventory of topics above, and these are further elaborated in chapter 5, which offers specific recommendations for addressing the complexity that the dod will face. a theme that cuts across many of these topics is the idea of developing modeling and simulation tools suitable to informing architectural decisions, analogous to the modeling and simulation done for physical elements of many different kinds of dod systems. this creates the possibility of a trybeforebuy approach to key architectural decisions, wherein architectural concepts are modeled using tools, and analysis and testing can be done to assess scalability, performance, robustness, and resiliency to failures and attacks. in other words, the techniques offer a kind of ﬁearly validationﬂ whereby engineering risks can be discharged earlier and with lower cost than if the uncertainties persisted until later implementation and test phases of development. by modeling and simulation, the committee means something broader than the current theory and practice of testing and analysis of software code, which focus on conformance of program behavior to specified behavior. the goal is to augment this with tests and analyses that provide information at the earliest possible stages of the process to support evaluation and validation of architecture concepts, interface and framework definitions, and other architectural elements. a second theme, also noted in the topic inventory, is to develop audit and instrumentation tools to provide early data once architectures are designed and initially populated. 44 armando fox, steven d. gribble, yatin chawathe, eric a. brewer, and paul gauthier, 1997, ﬁclusterbased scalable network services, proceedings of sosp ‚97, st. malo, france, october 1997. available online at http://www.cs.berkeley.edu/~brewer/papers/taccsosp.pdf. last accessed august 20, 2010.45 for more information, see sanjay ghemawat, howard gobioff, and shuntak leung, 2003, ﬁthe google file system,ﬂ acm sigops operating systems review 37(5):2943. available online at http://portal.acm.org/citation.cfm?id=1165389.945450&coll= guide&dl=guide&cfid=90089376&cftoken=82606234. last accessed august 20, 2010.46 for more information, see jeffrey dean and sanjay ghemawat, 2008, ﬁmapreduce: simplified data processing on large clusters,ﬂ communications of the acm 51(1):107113.47 for more information, see http://hadoop.apache.org/. last accessed august 20, 2010.48 werner vogels, 2007, ﬁenterprise scale and beyond,ﬂ presented at meeting #2 advancing softwareintensive systems producibility, january 1718, 2007, washington, dc. a summary of briefers™ presentations and the workshop discussion can be found in nrc, 2007, summary of a workshop on software intensive systems and uncertainty at scale, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=11936. last accessed august 20, 2010. critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.assert dod architectural leadership for innovative systems 85a third theme, relating to the idea of precedent and architectural risk management, is to develop and analyze a family of precedented ﬁscalable architectural patternsﬂ that could provide a wellunderstood infrastructure of building blocks out of which ultralargescale architectures could be designed. this could facilitate the use of multiple suppliers at the architectural and component levels. additionally, if tools are in place that can support more aggressive restructuring, then a more principled approach can be taken to architectural design that includes iterative development, currently very difficult at the architectural level. this could also enable constructive response even to relatively latebreaking news regarding the consequences of early architectural commitments. some combination of all these approaches will likely be necessary. critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.864adopt a strategic approach to software assurancesoftware assurance and evidenceone of the great challenges for both defense and civilian systems is software quality assurance. software assurance encompasses reliability, security, robustness, safety, and other qualityrelated attributes. diverse studies suggest that overall software assurance costs account for 30 to 50 percent of total project costs for most software projects.1 despite this cost, current approaches to software assurance, primarily testing and inspection, are inadequate to provide the levels of assurance required for many categories of both routine and critical systems.2 in major defense systems, the assurance process is heavily complicated by the arm™slength relationship that exists between a contractor development team and government stakeholders. this relation1  in ﬁsoftware debugging, testing, and verification,ﬂ ibm systems journal (41)1, 2002, b. hailpern and p. santhanam say, ﬁin a typical commercial development organization, the cost of providing this assurance via appropriate debugging, testing, and verification activities can easily range from 50 to 75 percent of the total development cost.ﬂ in estimating software costs (mcgrawhill, 1998), capers jones provides a table relating percentage of defects removed to percentage of development effort devoted to testing, with data points that include 90 to 39 percent, 96 to 48 percent, and 99.9 to 58 percent. in software cost estimation with cocomo ii (prentice hall, 2000), barry w. boehm, chris abts, a. winsor brown, sunita chulani, bradford k. clark, ellis horowitz, ray madachy, donald reifer, and bert steece indicate that the cost of test planning and running tests is typically 20 to 30 percent plus rework due to defects discovered. in balancing agility and discipline (addisonwesley, 2004), barry boehm and richard turner provide an analysis of the cocomo ii architecture and risk resolution scale factor, indicating that the increase in rework due to poor architecture and risk resolution is roughly 18 percent for typical 10ksloc (ksloc stands for thousand software lines of code) projects and roughly 91 percent for typical 10,000ksloc projects. (cocomo ii, or constructive cost model ii, is a software cost, effort, and schedule estimation model.) this analysis suggests that improvements are needed in upfront areas as well as in testing and supporting the importance of architecture research, especially for ultralarge systems. 2  the challenges relating to assurance were highlighted by several briefers to the committee. in addition, this issue is a core concern in the defense science board (dsb), september 2007, report of the defense science board task force on mission impact of foreign influence on dod software, washington, dc: office of the undersecretary of defense for acquisition, technology, and logistics, at pp. 3038. available online at http://stinet.dtic.mil/oai/oai?&verb=getrecord&metadataprefix=html&identifier=ada473661. the 2007 nrc report software for dependable systems also addressed the issue of testing and noted, ﬁtesting – will not in general suffice, because even the largest test suites typically used will not exercise enough paths to provide evidence that the software is correct nor will it have sufficient statistical significance for the levels of confidence usually desiredﬂ (p. 13). see nrc, daniel jackson, martyn thomas, and lynette i. millett, eds. 2007, software for dependable systems, national academies press, washington, dc. available online at http://www.nap.edu/catalog.php?recordid=11923. last accessed august 20, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.adopt a strategic approach to software assurance 87shipšin which sometimes even minor changes to upfront commitments may necessitate amendments to contracts and adjustments in costingšcan create barriers to the effective and timely sharing of information that can assist the customer in efficiently reaching accurate assurance judgments. additionally, it can be difficult to create incentives for the appropriate use of preventive measures such as those referenced in this chapter.in this chapter the committee first considers the trends related to the challenges of software assurance. it then offers a concise conceptual framework for certain software assurance issues. finally, it identifies significant technical opportunities and potential future challenges to improving our ability to provide assurance. (some of these are elaborated in chapter 5.)failures in software assurance can be of particularly high consequence for defense systems because of their roles in protecting human lives, in warfighting, in safeguarding national assets, and in other pivotal roles. the probability of failure can also be high, due to the frequent combination of scale, innovative character, and diversity of sourcing in defense systems. unless exceptional attention is devoted to assurance, a high level of risk derives from this combination of high consequence and high likelihood. assurance considerations also relate to progress tracking, as discussed in chapter 2šassessment of readiness for operational evaluation and release is based not just on progress in building a system, but also on progress in achieving developmental assurance. additionally, the technologies and practices used to achieve assurance may also contribute useful metrics to guide process decision making. assurance is a judgmentsoftware assurance is a human judgment of fitness for use. in practice, assurance judgments are based on application of a broad range of techniques that include both preventive and evaluative methods and that are applied throughout a software engineering process. indeed, for modern systems, and not just critical systems, the design of a software process is driven not only by issues related to engineering risk and uncertainty, but also, in a fundamental way, by quality considerations.3 these, in turn, are driven by systems risksšhazardsšas described in chapter 2 and also in box 4.1 (cybersecurity).an important reality of defense software assurance is the need to achieve safetyšthat is, in war, there are individual engagements where lives are at stake and where software is the deciding factor in the outcome. in many life and death situations, optimum performance may not be the proper overriding assurance criterion, but rather the ﬁminimization of maximum regret.ﬂ this is exacerbated by the fact that, while a fullscale operational test of many capabilities may not be feasible, assurance must nonetheless be achieved. this applies, for example, to certain systems that support strategic defense and disaster mitigation. the committee notes, however, that there are great benefits in architecting systems and structuring requirements such that many capabilities of systems that would otherwise be rarely used only for ﬁemergenciesﬂ are also used in an ongoing mode for more routine operations. this creates benefits from operational feedback and user familiarity. it also permits iterative development and deployment, such as is familiar to users of many evolving commercial online services.another reality of defense software that affects assurance is that it is developed by contractors working at arm™s length from the dod. this means, for example, that the information sharing necessary to assessing and achieving assurance must be negotiated explicitly.there are many wellpublicized examples of major defense systems exhibiting operational failures of various kinds that are, evidently, consequences of inadequate assurance practices. a recent example of this type of toplevel systems engineering issue was the failure of an f22 flight management system when it was flown across the international dateline for the first time en route from hawaii to japan. in a cnn interview, maj. gen. don sheppard (ret.) said, ﬁat the international date line, whoops, all systems dumped and when i say all systems, i mean all systems, their navigation, part of their communications, 3  michael howard and steve lipner, 2006, the security development lifecycle, redmond, wa: microsoft press. see also  box 2.3.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.88 critical code: software producibility for defensebox 4.1 assurance and cybersecurityša brief considerationcybersecurityalthough it is not a principal focus of this report, cybersecurity is an unavoidable and critical dimension of software assurance. it is rarely possible to contemplate software assurance without also giving major attention to security considerations. this is particularly challenging because security, like assurance, must be addressed at every phase of development and the software lifecycle overall.1 a system can only be assured if it is well understood. the main text elaborates the concept of a chain of evidence, which documents this understanding as traceability from intentions to outcomes, including functional requirements, quality attributes, and architectural constraints. security adds the additional dimension of threats and attacks. for software, these can occur not only during operations, but also at every stage of the lifecycle, from development through to ongoing evolution and update during operations. the most crude categorization of threats yields three different avenues of attack: (1) external attackersšadversaries gaining access from points external to the system, typically via network connections, (2) operational insidersšadversaries gaining access to a dod software system through inappropriate privileging, compromised physical access, or compromised personnel, and (3) engineering insidersšadversaries influencing or participating in the engineering process at some point in the supply chain for an overall system. attacks can have different goals, typically characterized as ﬁciaﬂšbreaching confidentiality of data, damaging the integrity of data, and disrupting availability of a computational service. the analysis of possible threats and attacks is a key element of secure software development. this analysis is strongly analogous to hazard analysis (as discussed elsewhere in this report), and it can lead to a host of security considerations to address in the development of systems, for example, relating to identity and attribution, network situational awareness, secure mobility, policy models and usability, forensics, etc. from the standpoint of secure software development, the committee highlights two principal policy considerations, chosen because they are most likely to significantly influence both software architecture and development practice. the first of these relates to separationšminimizing and managing the coupling among components in a way that reduces the overall extent of those most sensitive components in a system that require the highest levels of assurance as well as the ﬁattack surfaceﬂ of those components with respect to the various avenues of attack noted above. the second relates to configuration integrityšthe assurance that any deviations or dynamic alterations to an operational system are consistent with architectural intent.separationthe first example of a securityrelated chain is the separation chain. construction of this chain of evidence entails documenting relationships among critical shared resources and the software and system components that should, or should not, have access to or otherwise influence those resources.2 this chain documents the means by which access to resources is providedšor deniedšto the components of a software system that need to rely on those resources. a less trusted component, for example, may be excluded by policy from observing, changing, or influencing access by others to a critical resource such as a private key. the ability to construct chains of this kind is determined by architectural decisions and implementation practices. concepts from security architecture such as process separation, isolation, encapsulation, and secure communication architecture determine whether this kind of chain can be feasibly constructed, with minimal exposure of the most sensitive portions of a system. for example, modern commercial pc operating systems are designed to achieve security goals while offering tremendous generality and power  steve lipner and michael howard, 2006, the security development lifecycle, redmond, wa: microsoft press. see also gary mcgraw, 2006, software security: building security in, boston: addisonwesley. this documentation should be formal wherever possible, such as might be derived from code analysis, verification, and modeling.in their underlying services and resourcemanagement capabilities. operating systems more focused on media delivery may offer less generality and flexibility, but may do better in providing assurance relating to security because architectures are designed to more tightly regulate access to resources. research advances can expand architectural options for which assurance of this kind can be achieved. this is influenced both through enhancement of architectural sophistication and through the ability to model and assure policies. configurationthe second example of a securityrelated chain is the configuration chain. this chain documents the configuration integrity that is established when a system starts up and that is sustained through operations. the chain, in this case, typically links a known hardware configuration with the full complexity of an overall running system, including software code, firmware, and hardware operating within that configuration. loss of integrity can occur, for example, when malware arrives over a network and embeds itself within a system. it should be clear that this chain (like the other chain) is significant not only for networked systems but also for any system with a diverse supply chain, due to the differing trust levels conferred on system components. the assurance enabled by this chain is that the assumptions that underlie the construction of other kinds of chains (and the architectural, functional, and other decisions that enable that construction) are reflected in the reality of the code that executesšand so the conclusions can be trusted. put simply, this chain assures an absence of tampering. this has proven to be a singular challenge for commercial operating systems, as evidenced by the difficulty of detecting and eradicating rootkits, for example.documentation of this second kind of chain is complicated by a diversity of factors. one is the dynamism of modern architectures, which afford the flexibility and convenience of dynamically loading software components such as device drivers and libraries. another is the layered and modular structure that is the usual result of considerations related to development of the second kind of chain. a third factor is assuring configuration integrity of the hardware itself. including hardware in the chain can be much more challenging than the analogous process for software, because of the added need to ﬁreverse engineerﬂ physical hardware.3 a fourth factor is derived from the ﬁbootstrapﬂ process through which initial software configurations are loaded onto bare hardware, generally layer by layer. this affords the opportunity of an iterative and ongoing process of loading and integrity checking, such as has been envisioned in the development of the tpm chips that are present on the motherboards of most pcs and game platforms.4 in this model, the intent is to assure integrity through fingerprinting and monitoring the integrity of software components as they are loaded and configured both through the bootstrap process and during operations. these four factors, combined with a highly competitive environment that discourages compromise on systems functionality and performance, have proven highly challenging for dod in adopting commercial offtheshelf operating systems, for example.5a note on secrecysecurityrelated faults lead to hazards just when attackers are able to exploit those faults to create errors and failures. it may be tempting, therefore, to think that full secrecy of the software code base would preclude such possibilities. for defense systems there are many good reasons for secrecy, but, from the perspective of exploitation of vulnerabilities, overreliance on secrecy (ﬁsecurity through obscurityﬂ) is a 3 dsb, february 2005, report of the defense science board task force on high performance microchip supply, washington, dc: office of the under secretary of defense for acquisition, technology, and logistics, available online at http://stinet.dtic.mil/oai/oai?&verb=getrecord&metadataprefix=html&identifier=ada473661. last accessed august 20, 2010. 4 see http://www.trustedcomputinggroup.org/.  dsb, september 2007, report of the defense science board task force on mission impact of foreign influence on dod software, washington, dc: office of the under secretary of defense for acquisition, technology, and logistics. available online at http://stinet.dtic.mil/oai/oai?&verb=getrecord&metadataprefix=html&identifier=ada473661. last accessed august 20, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.adopt a strategic approach to software assurance 89box 4.1 assurance and cybersecurityša brief considerationcybersecurityalthough it is not a principal focus of this report, cybersecurity is an unavoidable and critical dimension of software assurance. it is rarely possible to contemplate software assurance without also giving major attention to security considerations. this is particularly challenging because security, like assurance, must be addressed at every phase of development and the software lifecycle overall.1 a system can only be assured if it is well understood. the main text elaborates the concept of a chain of evidence, which documents this understanding as traceability from intentions to outcomes, including functional requirements, quality attributes, and architectural constraints. security adds the additional dimension of threats and attacks. for software, these can occur not only during operations, but also at every stage of the lifecycle, from development through to ongoing evolution and update during operations. the most crude categorization of threats yields three different avenues of attack: (1) external attackersšadversaries gaining access from points external to the system, typically via network connections, (2) operational insidersšadversaries gaining access to a dod software system through inappropriate privileging, compromised physical access, or compromised personnel, and (3) engineering insidersšadversaries influencing or participating in the engineering process at some point in the supply chain for an overall system. attacks can have different goals, typically characterized as ﬁciaﬂšbreaching confidentiality of data, damaging the integrity of data, and disrupting availability of a computational service. the analysis of possible threats and attacks is a key element of secure software development. this analysis is strongly analogous to hazard analysis (as discussed elsewhere in this report), and it can lead to a host of security considerations to address in the development of systems, for example, relating to identity and attribution, network situational awareness, secure mobility, policy models and usability, forensics, etc. from the standpoint of secure software development, the committee highlights two principal policy considerations, chosen because they are most likely to significantly influence both software architecture and development practice. the first of these relates to separationšminimizing and managing the coupling among components in a way that reduces the overall extent of those most sensitive components in a system that require the highest levels of assurance as well as the ﬁattack surfaceﬂ of those components with respect to the various avenues of attack noted above. the second relates to configuration integrityšthe assurance that any deviations or dynamic alterations to an operational system are consistent with architectural intent.separationthe first example of a securityrelated chain is the separation chain. construction of this chain of evidence entails documenting relationships among critical shared resources and the software and system components that should, or should not, have access to or otherwise influence those resources.2 this chain documents the means by which access to resources is providedšor deniedšto the components of a software system that need to rely on those resources. a less trusted component, for example, may be excluded by policy from observing, changing, or influencing access by others to a critical resource such as a private key. the ability to construct chains of this kind is determined by architectural decisions and implementation practices. concepts from security architecture such as process separation, isolation, encapsulation, and secure communication architecture determine whether this kind of chain can be feasibly constructed, with minimal exposure of the most sensitive portions of a system. for example, modern commercial pc operating systems are designed to achieve security goals while offering tremendous generality and power  steve lipner and michael howard, 2006, the security development lifecycle, redmond, wa: microsoft press. see also gary mcgraw, 2006, software security: building security in, boston: addisonwesley. this documentation should be formal wherever possible, such as might be derived from code analysis, verification, and modeling.in their underlying services and resourcemanagement capabilities. operating systems more focused on media delivery may offer less generality and flexibility, but may do better in providing assurance relating to security because architectures are designed to more tightly regulate access to resources. research advances can expand architectural options for which assurance of this kind can be achieved. this is influenced both through enhancement of architectural sophistication and through the ability to model and assure policies. configurationthe second example of a securityrelated chain is the configuration chain. this chain documents the configuration integrity that is established when a system starts up and that is sustained through operations. the chain, in this case, typically links a known hardware configuration with the full complexity of an overall running system, including software code, firmware, and hardware operating within that configuration. loss of integrity can occur, for example, when malware arrives over a network and embeds itself within a system. it should be clear that this chain (like the other chain) is significant not only for networked systems but also for any system with a diverse supply chain, due to the differing trust levels conferred on system components. the assurance enabled by this chain is that the assumptions that underlie the construction of other kinds of chains (and the architectural, functional, and other decisions that enable that construction) are reflected in the reality of the code that executesšand so the conclusions can be trusted. put simply, this chain assures an absence of tampering. this has proven to be a singular challenge for commercial operating systems, as evidenced by the difficulty of detecting and eradicating rootkits, for example.documentation of this second kind of chain is complicated by a diversity of factors. one is the dynamism of modern architectures, which afford the flexibility and convenience of dynamically loading software components such as device drivers and libraries. another is the layered and modular structure that is the usual result of considerations related to development of the second kind of chain. a third factor is assuring configuration integrity of the hardware itself. including hardware in the chain can be much more challenging than the analogous process for software, because of the added need to ﬁreverse engineerﬂ physical hardware.3 a fourth factor is derived from the ﬁbootstrapﬂ process through which initial software configurations are loaded onto bare hardware, generally layer by layer. this affords the opportunity of an iterative and ongoing process of loading and integrity checking, such as has been envisioned in the development of the tpm chips that are present on the motherboards of most pcs and game platforms.4 in this model, the intent is to assure integrity through fingerprinting and monitoring the integrity of software components as they are loaded and configured both through the bootstrap process and during operations. these four factors, combined with a highly competitive environment that discourages compromise on systems functionality and performance, have proven highly challenging for dod in adopting commercial offtheshelf operating systems, for example.5a note on secrecysecurityrelated faults lead to hazards just when attackers are able to exploit those faults to create errors and failures. it may be tempting, therefore, to think that full secrecy of the software code base would preclude such possibilities. for defense systems there are many good reasons for secrecy, but, from the perspective of exploitation of vulnerabilities, overreliance on secrecy (ﬁsecurity through obscurityﬂ) is a 3 dsb, february 2005, report of the defense science board task force on high performance microchip supply, washington, dc: office of the under secretary of defense for acquisition, technology, and logistics, available online at http://stinet.dtic.mil/oai/oai?&verb=getrecord&metadataprefix=html&identifier=ada473661. last accessed august 20, 2010. 4 see http://www.trustedcomputinggroup.org/.  dsb, september 2007, report of the defense science board task force on mission impact of foreign influence on dod software, washington, dc: office of the under secretary of defense for acquisition, technology, and logistics. available online at http://stinet.dtic.mil/oai/oai?&verb=getrecord&metadataprefix=html&identifier=ada473661. last accessed august 20, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.90 critical code: software producibility for defensedangerous approach. there are two reasons. first, faults can very often be detected through sophisticated ﬁblackboxﬂ methods, in which attackers probe and poke a system based on hypotheses regarding its likely structure and functionšthese methods are analogous to those used in software development for operational and systemslevel testing. second, if secrecy enables developers to become complacent about fundamentals, such as appropriate security architectures (see below), then the overall risk can increase dramatically. a minor coding flaw may expose a vulnerability, but with good development and assurance practice that flaw can be readily eliminated either directly through analysis or indirectly through multilayer defense. an architectural flaw, on the other hand, may be much more difficult or even impossible to mitigate without taking the entire system offline and undertaking significant reengineering.opaque codeas noted in the main text, modern software systems often consist of components drawn from diverse sources. the gradients of trust among components are often complicated by the fact that many components are relatively opaque compared with othersšfor example, only executable code is available. there are several reasons for this opacity in dod systems, many of which are driven by commercial considerations related to the protection of intellectual property manifest in source code and design documentation. these considerations may apply both to commercial vendors and to subcontractors who may be potential competitors with their prime contractor on other projects. indeed, some development organizations may not want to share source code and design information with the government because they are concerned about potential public release or by the possibility of similar requests for access from other governments who they may seek as customers. this is a particular challenge for commercial vendors, who typically conduct business globally and so may face similar requirements from other governments. this risk of exposure may even deter some firms from conducting business in the u.s. government supply chain.this issue motivates technologies related to sandboxing and isolation, such as those used in web browsers for javascript and (as a research goal) technologies for ﬁevidencecarrying code,ﬂ where evidence of security or safety can be provided in a way that may nonetheless cloak vendor trade secrets.these considerations notwithstanding, a principal consideration in assurance is the reduction in the extent of code that, in the end, remains opaque to dod acceptance evaluators. one mechanism, embodied in the common criteria model, is the use of mutually trusted third parties to support assurance activities. a key issue is how that evaluation can be done such that two goals are addressed: (1) there is minimal added cost and delay, and (2) evidence can be produced that protects the interests of the developers and that manifests the necessary links in the various required chains of evidence. the first of these goals could be supported, for example, through the involvement of evaluation teams throughout development. but it could also be addressed through a consistent practice of ﬁevidence production,ﬂ whereby developers create links in the necessary chains of evidence that can support a more efficient thirdparty or government evaluation. one of the challenges in evidence production is achieving a returnoninvestment model for evidence production that has the characteristic of ﬁearly gratificationﬂ for development teams. this was considered unachievable for many years. but there is now evidence in modern team practice, with intensive use of tools for team coordination, defect/issue tracking, and software assurance (unit testing and analysis), that costly afterthefact practices are giving way to ongoing evidence production, in the same spirit as testdriven development. the second of these goals suggests a number of challenging research problems related to the production of evidence that supports assurance but may also cloak proprietary algorithms from other development teams working on the same system. both goals also suggest a research challenge related to enhancing the scope of specification of apis to facilitate demonstration of compliance with api rules of the road. this is significant from an architectural standpoint, because it enables development teams to work more independently of each other, given the added certainty regarding apimediated interactions.box 4.1 continuedcritical code: software producibility for defensecopyright national academy of sciences. all rights reserved.adopt a strategic approach to software assurance 91their fuel systems. they werešthey could have been in real trouble. they were with their tankers. . . . the [f22 crews] tried to reset their systems, couldn™t get them reset. the tankers brought them back to hawaii. this could have been real serious. it certainly could have been real serious if the weather had been bad. it turned out ok. it was fixed in 48 hours. it was a computer glitch in the millions of lines of code, somebody made an error in a couple lines of the code and everything goes.ﬂ the contact with the tankers was visual: ﬁhad they gotten separated from their tankers or had the weather been bad, they had no attitude reference. they had no communications or navigation. they would have turned around and probably could have found the hawaiian islands. but if the weather had been bad on approach, there could have been real trouble.ﬂ4there are diverse quality attributes and methodssoftware assurance encompasses a wide range of quality attributes. for defense systems, there is particular emphasis on addressing hazards related to security (primarily confidentiality, integrity, and access of service, see box 4.1), availability and responsiveness (up time and speed of response), safety (life and property), adherence to policy (rules of engagement), and diverse other attributes. there is a very broad range of kinds of failures, errors, and faults that can lead to such hazards (box 4.2). software assurance practices must therefore encompass a correspondingly broad range of techniques and practices.there is a false perception that assurance can be achieved entirely through acceptance evaluation such as that achieved through operational and systems test. systems test is certainly a necessary step in assuring functional properties and many performance properties. but it is by no means sufficient. assurance cannot be readily achieved from testing for many kinds of failures related to security, intermittent failures due to nondeterminism and concurrency, readiness for likely future evolution and interoperation requirements, readiness for infrastructure upgrades, highly complex state space, and other kinds of failures.a comprehensive assurance practice requires attention to quality issues throughout the development and operations lifecycle, at virtually every stage of the process and at all links in the supply chain supporting the overall system. the latter point is a consequence of the observation above regarding the fallacy of relying entirely on acceptance evaluation and operational testing. although the dod relies extensively on vendor software and undertakes considerable testing of that software, it also implicitly relies on a relationship founded in trust (rather than ﬁverifyﬂ) to assure many of the quality attributes (listed above) that are not effectively supported through this kind of testing. this issue is explored at length in a report by the defense science board on foreign software in defense systems.5it is now increasingly well understood by software engineers and managers that quality, including security, is not ﬁtested in,ﬂ but rather must be ﬁbuilt in.ﬂ6 but there are great challenges to succeeding in both ﬁbuilding in quality,ﬂ using preventive methods, and assuring that it is there, using evaluative methods. the nature of the challenge is determined by a combination of factors, including the potential operational hazards, the system requirements, infrastructure choices, and many other factors. 4  ﬁf22 squadron shot down by the international date line,ﬂ defense industry daily, march 1, 2007. available online at http://www.defenseindustrydaily.com/f22squadronshotdownbytheinternationaldateline03087/. august 10, 2010. there are also numerous public accounts of software failures of diverse kinds and consequences, such as those cited in the forum on risks to the public in computers and related systems, available online at http://www.risks.org. 5  defense science board (dsb), 2007, report of the defense science board task force on mission impact of foreign influence on dod software, office of the under secretary of defense for acquisition, technology, and logistics. available online at http://stinet.dtic.mil/oai/oai?&verb=getrecord&metadataprefix=html&identifier=ada473661. last accessed august 20, 2010.6  this is not a comment about testdriven development, which is an excellent way to transform the valuable evaluative practice of testing into a more valuable preventive practice of testdriven developmentšbuilding test cases and code simultaneously or even writing test cases before code is written. note here that ﬁtestﬂ should be broadly construed, encompassing quality techniques such as inspection, modeling, and analysis. there are benefits to writing code from the outset that more readily support, for example, modeling, sound analysis, and structured inspection.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.92 critical code: software producibility for defensebox 4.2 faults, errors, failures, and hazardsa failure is a manifestation of a system that is inconsistent with its functional or quality intentšit fails to perform to specification. a hazard is a consequence to an organization or its mission that is the result of a system manifesting a failure. that is, if a system has been placed in a critical role and a failure occurs, then the hazard is the consequence to that role. for example, if an aircraft navigation system delivers incorrect results, the hazard is the potential consequence to the aircraft, its occupants, its owner, and so on, of incorrect navigation. an error, like a failure, is a manifestation when a system is running. but an error can be contained entirely within a system, not necessarily leading to failures. for example, some database systems can detect and remediate ﬁlocal deadlocksﬂ that involve perhaps a pair of threads, and they can do this in a generally transparent manner. another example is an unexpected exception (such as might be raised when a null pointer is dereferenced) being handled locally within a component or subsystem. more broadly, architectures can be designed to detect errors, including security problems, within individual components and can reconfigure themselves to isolate or otherwise neutralize those errors.1 errors, in turn, are enabled by local faults in code. a fault is a static flaw in the code at a particular place or region or identifiable set of places. examples of faults include points in code where integrity tests are not made (leading to robustness errors), where locks are not acquired (leading to potential race conditions), where data is incorrectly interpreted (leading to erroneous output values), where program logic is flawed (leading to incorrect results), and so on. in systems that include hardware, probabilistic models are used to make predictions regarding when errors or failures are likely to occuršfor example, to compute mean time to failure or expected lifetimes of components. these models are the core of reliability theory, and they can involve complex relationships of conditional probability (i.e., faults that are more likely in the presence of other faults), coupled probability (e.g., when many faults are made more likely in adverse weather), and other complexities. with software, these probabilistic models are less useful, since the failures are caused by intrinsic design flaws that require implementation changes for correction. intermittent errors in software are thus ﬁdesigned into the codeﬂ (albeit unintentionally). repair thus means making changes in the flawed design. for embedded software, where the software includes faulttolerance roles, hybrid models are often most helpful.this model helps to highlight the challenges associated with effective software testing, inspection, and 1 of course, it is possible that the mechanism by which errors are contained results in a loss of information regarding both the errors and the fact that they were contained. this information loss can create dangerous situations. the well known case of the therac 25 failures (nancy g. leveson and clark s. turner, 1993, ﬁan investigation of the therac25 accidents,ﬂ ieee computer 26(7):1841) is a particularly compelling example of the consequences of inadequate information regarding actual error containment in operations. in this case, engineers acted on a false supposition regarding the extent of error containment by a hardware mechanism in operations, resulting in fatal xray doses being administered to cancer patients.static analysis. the results of tests that fail are manifestations of errors (unit tests) or failures (system tests). assuming the tests are valid, the engineer must then ascertain which faults may have led to the error or failure manifestations. this reverseengineering puzzle can be challenging, or not, depending on the scope of the tests and the complexity of the code. failures in system tests, for example, can derive from the full scope of the code, including incorporated vendor components and infrastructure. test results are generally of moderate to high value, because they reflect the priorities implicit in the test coverage strategy that guided their creation.2one of the pitfalls of late testing, as would be the case if unit testing were deferred, is that the faults identified may have become very expensive to repair, adding substantially to engineering risk. if the fault is fundamental to the design of a particular interface, then all clients and suppliers that share that interface may be affected as part of the repair process. if the fault is architectural, the costs may be greater, and there may be new engineering risks associated with exploration of alternative options. this suggests both that testing be done at the component level early in the process and that commitments related to architecture and interface design be evaluated through modeling, simulation, and analysis as early as possible in the lifecycle.the results of inspections, on the other hand, generally point to specific places in code or in models where there are problems of one kind of another. this, from a purely theoretical basis, may be why inspections are sometimes measured as being more effective than testing by a measure of defects found per hour. because inspections usually combine explicit targeting of issues and opportunistic exploration, the issues found are generally high value.static analysis results, including both sound analyses and heuristic analyses, generally point to faults in the code. they thus share with inspections the productivity advantage of avoiding the puzzlesolving inherent in the handling of adverse test results. additionally, static analysis results can highlight lowprobability intermittent errors that might routinely crash continuously operating servers but not be readily detectable using conventional testing. unlike validated tests, analysis results can include false positives, which are indications of possible faults when there are actually no faults. (unvalidated tests can also produce false positives in cases where the code is ﬁcorrect,ﬂ but the test case is not.) sound static analysis (i.e., static analysis with no false negatives) is used in compiler type checkers and some freestanding analysis tools. its results are usually tightly targeted to very particular attributes and can lead fairly directly to repairs. heuristic static analysis results, such as from opensource tools pmd and findbugs, have considerably broader coverage than targeted sound analysis. but the results are typically less exact, and include false negatives (faults not found) as well as false positives. additionally, there can be large numbers of results ranging from serious issues to code layout style suggestions. this necessitates an explicit process to set priorities among the results. an analysis of the opensource hadoop system, for example, can yield more than 10,000 findings. 2 test coverage metrics can be useful, but there are many kinds of coverage criteria. pure ﬁstatement coverageﬂ may be misleading, because it may indicate a prevalence of regression tests crafted in response to defects rather than of tests motivated by more ﬁproactiveﬂ criteria.underlying both preventive and evaluative methods are the two most critical broad influences on quality: judicious choice of process and practices, and the capability and training of the people involved in the process. process and practices can include techniques for measurement and feedback in process execution in support of iteration, progress and earned value tracking, and engineeringrisk management. indeed, a key feature of process design is the concept of feedback loops specifically creating opportunicritical code: software producibility for defensecopyright national academy of sciences. all rights reserved.adopt a strategic approach to software assurance 93box 4.2 faults, errors, failures, and hazardsa failure is a manifestation of a system that is inconsistent with its functional or quality intentšit fails to perform to specification. a hazard is a consequence to an organization or its mission that is the result of a system manifesting a failure. that is, if a system has been placed in a critical role and a failure occurs, then the hazard is the consequence to that role. for example, if an aircraft navigation system delivers incorrect results, the hazard is the potential consequence to the aircraft, its occupants, its owner, and so on, of incorrect navigation. an error, like a failure, is a manifestation when a system is running. but an error can be contained entirely within a system, not necessarily leading to failures. for example, some database systems can detect and remediate ﬁlocal deadlocksﬂ that involve perhaps a pair of threads, and they can do this in a generally transparent manner. another example is an unexpected exception (such as might be raised when a null pointer is dereferenced) being handled locally within a component or subsystem. more broadly, architectures can be designed to detect errors, including security problems, within individual components and can reconfigure themselves to isolate or otherwise neutralize those errors.1 errors, in turn, are enabled by local faults in code. a fault is a static flaw in the code at a particular place or region or identifiable set of places. examples of faults include points in code where integrity tests are not made (leading to robustness errors), where locks are not acquired (leading to potential race conditions), where data is incorrectly interpreted (leading to erroneous output values), where program logic is flawed (leading to incorrect results), and so on. in systems that include hardware, probabilistic models are used to make predictions regarding when errors or failures are likely to occuršfor example, to compute mean time to failure or expected lifetimes of components. these models are the core of reliability theory, and they can involve complex relationships of conditional probability (i.e., faults that are more likely in the presence of other faults), coupled probability (e.g., when many faults are made more likely in adverse weather), and other complexities. with software, these probabilistic models are less useful, since the failures are caused by intrinsic design flaws that require implementation changes for correction. intermittent errors in software are thus ﬁdesigned into the codeﬂ (albeit unintentionally). repair thus means making changes in the flawed design. for embedded software, where the software includes faulttolerance roles, hybrid models are often most helpful.this model helps to highlight the challenges associated with effective software testing, inspection, and 1 of course, it is possible that the mechanism by which errors are contained results in a loss of information regarding both the errors and the fact that they were contained. this information loss can create dangerous situations. the well known case of the therac 25 failures (nancy g. leveson and clark s. turner, 1993, ﬁan investigation of the therac25 accidents,ﬂ ieee computer 26(7):1841) is a particularly compelling example of the consequences of inadequate information regarding actual error containment in operations. in this case, engineers acted on a false supposition regarding the extent of error containment by a hardware mechanism in operations, resulting in fatal xray doses being administered to cancer patients.static analysis. the results of tests that fail are manifestations of errors (unit tests) or failures (system tests). assuming the tests are valid, the engineer must then ascertain which faults may have led to the error or failure manifestations. this reverseengineering puzzle can be challenging, or not, depending on the scope of the tests and the complexity of the code. failures in system tests, for example, can derive from the full scope of the code, including incorporated vendor components and infrastructure. test results are generally of moderate to high value, because they reflect the priorities implicit in the test coverage strategy that guided their creation.2one of the pitfalls of late testing, as would be the case if unit testing were deferred, is that the faults identified may have become very expensive to repair, adding substantially to engineering risk. if the fault is fundamental to the design of a particular interface, then all clients and suppliers that share that interface may be affected as part of the repair process. if the fault is architectural, the costs may be greater, and there may be new engineering risks associated with exploration of alternative options. this suggests both that testing be done at the component level early in the process and that commitments related to architecture and interface design be evaluated through modeling, simulation, and analysis as early as possible in the lifecycle.the results of inspections, on the other hand, generally point to specific places in code or in models where there are problems of one kind of another. this, from a purely theoretical basis, may be why inspections are sometimes measured as being more effective than testing by a measure of defects found per hour. because inspections usually combine explicit targeting of issues and opportunistic exploration, the issues found are generally high value.static analysis results, including both sound analyses and heuristic analyses, generally point to faults in the code. they thus share with inspections the productivity advantage of avoiding the puzzlesolving inherent in the handling of adverse test results. additionally, static analysis results can highlight lowprobability intermittent errors that might routinely crash continuously operating servers but not be readily detectable using conventional testing. unlike validated tests, analysis results can include false positives, which are indications of possible faults when there are actually no faults. (unvalidated tests can also produce false positives in cases where the code is ﬁcorrect,ﬂ but the test case is not.) sound static analysis (i.e., static analysis with no false negatives) is used in compiler type checkers and some freestanding analysis tools. its results are usually tightly targeted to very particular attributes and can lead fairly directly to repairs. heuristic static analysis results, such as from opensource tools pmd and findbugs, have considerably broader coverage than targeted sound analysis. but the results are typically less exact, and include false negatives (faults not found) as well as false positives. additionally, there can be large numbers of results ranging from serious issues to code layout style suggestions. this necessitates an explicit process to set priorities among the results. an analysis of the opensource hadoop system, for example, can yield more than 10,000 findings. 2 test coverage metrics can be useful, but there are many kinds of coverage criteria. pure ﬁstatement coverageﬂ may be misleading, because it may indicate a prevalence of regression tests crafted in response to defects rather than of tests motivated by more ﬁproactiveﬂ criteria.ties for feedback at low cost and with high benefit in terms of reducing engineering risk.7 practices can also include approaches to defect tracking, root cause analysis, and so on. there is overlap between preventive and evaluative methods because evaluative methods are most effective when applied throughout a development process and not just as part of a systemslevel acceptance evaluation activity. when used at the earliest stages in the process, evaluative methods shorten 7  these feedback loops may be conceptualized as ﬁooda loopsﬂšobserve, orient, decide, act. the ooda model for operational processes was articulated by col john boyd, usaf, and is widely used as a conceptual framework for iterative planning and replanning processes.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.94 critical code: software producibility for defensefeedback loops and guide development choices, thus lessening engineering risk. (to illustrate the range of methods and interventions related to quality in software, a summary is presented in box 4.3.)judgments are based on chains of evidencethe goal of assurance methods is to create connections, a set of ﬁchains of evidenceﬂ that ultimately connect the code that executes with architectural, functional, and quality requirements. the creation of these chains is necessarily an incremental process, with ﬁlinksﬂ in the chains being created and adapted as the development process proceeds. an example of a link is a test case that connects code with a particular expectation regarding behavior at an internal software interface. another link, perhaps crebox 4.3 examples of preventive and evaluative methodsbelow are several illustrative examples of preventive methods. underlying all of these particular methods is an emphasis on preventing the introduction of defects or finding them as soon as possible after they are introduced. ł requirements analysis. assess operational hazards derived from context of use, adjusting operational plans to the extent possible to minimize potential hazard. assess goals and limits with respect to quality attributes.ł architecture design. adopt structural approaches that enhance reliability, robustness, and security while also providing flexibility in areas of anticipated change.ł ecosystem choice. affiliate with ecosystems based on quality assessments of components and infrastructure derived from the associated supply chain. ł detail design. adopt software structures and patterns that enhance localization of data and control over access.ł specification and documentation. capture explicit formal and informal representations of functional and qualityattribute requirements, architecture description, detail design commitments, rationale, etc.ł modeling and simulation. many software projects fail because the consequences of early decisions are not understood until late in the process, when the costs of revising those decisions appear to be prohibitively high, leading to costly workarounds and acceptance of additional engineering risk. it may be perceived by project managers that evaluation cannot be done before code is written and can be run. in fact, a range of techniques related to modeling and simulation can be employed to achieve ﬁearly validationﬂ of critical upfront decisions. these techniques include prototyping, architectural simulation, model checking of specifications, and other kinds of analysis.1ł coding. adopt secure coding practices and more transparent structured coding styles that facilitate the various evaluative methods.ł programming language. select languages that provide firstclass encapsulation and controlled storage management.ł tooling. support traceability and logging structures in tooling, providing direct (and ideally semanticsbased) interlinking among related design artifacts such as architecture and design specifications, source code, functional specifications, qualityattribute specifications, test cases, etc. 1 daniel jackson™s alloy model checker is an example of early validation technique for specifications. daniel jackson and martin rinard, 2000, ﬁsoftware analysis: a roadmap,ﬂ in the future of software engineering, anthony finkelstein, ed., new york: acm, pp. 215224.here are several illustrative examples of evaluative methods. these are applied throughout a lifecycle to assess various kinds of software artifacts. ł inspection of the full range of softwarerelated artifacts, ranging from models and simulation results supporting requirements and architecture design to detailed design specifications, code, and test cases.ł testing of code with respect to function, performance, usability, integration, and other characteristics. test cases can be developed to operate at the system level, for example, simulating webbrowser clients in testing ecommerce or other web services systems, or they can operate on code ﬁunitsﬂ across software interfaces to test aspects of component behavior. test cases are selected according to a combination of coverage strategies determined by architecture and ecosystem, software design, programming language choice, potential operational risks, secure coding practices, and other considerations.ł direct analysis of source, intermediate, or binary code, using sound tools that target particular quality attributes and heuristic tools that address a broader range of quality attributes.ł monitoring of operational code and dynamic analysis of running code, focused on particular quality attributes. as with testing, monitoring can operate at the system level, including logging and event capture, as well as at the unit level, such as for transaction and other internally focused event logs. monitoring supports prevention, evaluation, and also forensics after failures occur. infrastructure for monitoring can support a range from realtime to shorttime delayed to forensic analyses of the collected event data. in the absence of other feedback loops, this can assist in focusing attention on making repairs and doing rework. ł verification of code against specifications. a number of formal ﬁpositive verificationﬂ capabilities have become practical in recent years for two reasons: first, scalability and usability are more readily achievable when verification is targeted to particular quality attributes.2 second, new techniques are emerging, based on model checking or sound analysis that support this more targeted verification without excessive requirements for writing formal specifications and assertions in code.various process models have been proposed that provide a framework within which these various preventive and evaluative methods can be applied in a systematic fashion, structured, as it were, within observeorientdecideact (ooda) loops of various durations. two of the most prominent are the lipnerhoward method (the sdc, or secure development lifecycle) and the method proposed by mcgraw.2 an example is the microsoft static driver verifier tool developed by tom ball for verifying protocol compliance of windows device driver code using model checking. see steve lipner and michael howard, 2006, the security development lifecycle: a process for developing demonstrably more secure software, redmond, wa: microsoft press.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.adopt a strategic approach to software assurance 95ated using modelbased analysis techniques, would connect this specific interface expectation with a more global architectural property. another link is the connection of a fragmentary program annotation (ﬁnot nullﬂ) with the code it decorates. a further link would connect that global architectural property with a required systemlevel quality attribute. validation of this small chain of links could come from systemlevel testing or monitoring that provides evidence to support presence of the systemlevel quality attribute.this metaphor is useful in highlighting several significant features that influence assurance practice and the cost and potential to achieve high levels of assurance. here are some examples of influences on the success of assurance practice:box 4.3 examples of preventive and evaluative methodsbelow are several illustrative examples of preventive methods. underlying all of these particular methods is an emphasis on preventing the introduction of defects or finding them as soon as possible after they are introduced. ł requirements analysis. assess operational hazards derived from context of use, adjusting operational plans to the extent possible to minimize potential hazard. assess goals and limits with respect to quality attributes.ł architecture design. adopt structural approaches that enhance reliability, robustness, and security while also providing flexibility in areas of anticipated change.ł ecosystem choice. affiliate with ecosystems based on quality assessments of components and infrastructure derived from the associated supply chain. ł detail design. adopt software structures and patterns that enhance localization of data and control over access.ł specification and documentation. capture explicit formal and informal representations of functional and qualityattribute requirements, architecture description, detail design commitments, rationale, etc.ł modeling and simulation. many software projects fail because the consequences of early decisions are not understood until late in the process, when the costs of revising those decisions appear to be prohibitively high, leading to costly workarounds and acceptance of additional engineering risk. it may be perceived by project managers that evaluation cannot be done before code is written and can be run. in fact, a range of techniques related to modeling and simulation can be employed to achieve ﬁearly validationﬂ of critical upfront decisions. these techniques include prototyping, architectural simulation, model checking of specifications, and other kinds of analysis.1ł coding. adopt secure coding practices and more transparent structured coding styles that facilitate the various evaluative methods.ł programming language. select languages that provide firstclass encapsulation and controlled storage management.ł tooling. support traceability and logging structures in tooling, providing direct (and ideally semanticsbased) interlinking among related design artifacts such as architecture and design specifications, source code, functional specifications, qualityattribute specifications, test cases, etc. 1 daniel jackson™s alloy model checker is an example of early validation technique for specifications. daniel jackson and martin rinard, 2000, ﬁsoftware analysis: a roadmap,ﬂ in the future of software engineering, anthony finkelstein, ed., new york: acm, pp. 215224.here are several illustrative examples of evaluative methods. these are applied throughout a lifecycle to assess various kinds of software artifacts. ł inspection of the full range of softwarerelated artifacts, ranging from models and simulation results supporting requirements and architecture design to detailed design specifications, code, and test cases.ł testing of code with respect to function, performance, usability, integration, and other characteristics. test cases can be developed to operate at the system level, for example, simulating webbrowser clients in testing ecommerce or other web services systems, or they can operate on code ﬁunitsﬂ across software interfaces to test aspects of component behavior. test cases are selected according to a combination of coverage strategies determined by architecture and ecosystem, software design, programming language choice, potential operational risks, secure coding practices, and other considerations.ł direct analysis of source, intermediate, or binary code, using sound tools that target particular quality attributes and heuristic tools that address a broader range of quality attributes.ł monitoring of operational code and dynamic analysis of running code, focused on particular quality attributes. as with testing, monitoring can operate at the system level, including logging and event capture, as well as at the unit level, such as for transaction and other internally focused event logs. monitoring supports prevention, evaluation, and also forensics after failures occur. infrastructure for monitoring can support a range from realtime to shorttime delayed to forensic analyses of the collected event data. in the absence of other feedback loops, this can assist in focusing attention on making repairs and doing rework. ł verification of code against specifications. a number of formal ﬁpositive verificationﬂ capabilities have become practical in recent years for two reasons: first, scalability and usability are more readily achievable when verification is targeted to particular quality attributes.2 second, new techniques are emerging, based on model checking or sound analysis that support this more targeted verification without excessive requirements for writing formal specifications and assertions in code.various process models have been proposed that provide a framework within which these various preventive and evaluative methods can be applied in a systematic fashion, structured, as it were, within observeorientdecideact (ooda) loops of various durations. two of the most prominent are the lipnerhoward method (the sdc, or secure development lifecycle) and the method proposed by mcgraw.2 an example is the microsoft static driver verifier tool developed by tom ball for verifying protocol compliance of windows device driver code using model checking. see steve lipner and michael howard, 2006, the security development lifecycle: a process for developing demonstrably more secure software, redmond, wa: microsoft press.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.96 critical code: software producibility for defenseł there is a great diversity of the particular kinds of attributes that are to be assured. these range from functional behavior, performance, and availability, to security, usability, and interface compliance for service application programming interface apis and frameworks. the mitre corporation maintains a catalog, the common weakness enumeration (cwe)8 that illustrates the diversity in its identification of more than 800 specific kinds of ﬁsoftware weaknesses.ﬂł there is also a great diversity of kinds of artifacts that must be linked in the chains. these include code, design models, architectural models, and specifications of functional and quality requirements. these also include more focused artifacts such as individual test cases, inspection results, analysis results, annotations and comments in code, and performance test results.ł there is a range of formality among these artifactsšsome have precise structure and meaning, and others are informal descriptions in natural language or presented as diagrams. (this issue is elaborated below.)ł components and services encompassed in a system may have diverse sources, with varying degrees of access to the artifacts and support/cooperation in an overall assurance process. identification and evaluation of sources in an overall supply chain is a significant issue for cybersecurity (see box 4.1), for which both provenance (trust) and direct evidence (verification) are considerations that influence the cost and effectiveness of an assurance process.ł many different kinds of techniques must be employed to assess consistency among artifacts and to build links in the chain. the most widely used are testing and inspection. other techniques that are increasing in importance include modeling and simulation (e.g., for potential architecture choices), static analysis, formal verification and model checking (for code, designs, specifications, and models), and dynamic analysis and monitoring (for code, design, and models).ł some techniques are based not on reasoning about an artifact or component, but on safely containing it to insulate system data and control flow from adverse actions of the component. techniques include sandboxing, process separation, virtual machines, etc.9ł different links in the chain may have different levels of ﬁconfidence,ﬂ with some providing (contingent) verification results and others providing a more probabilistic outcomes that may (or may not) increase confidence in consistency among artifacts. test coverage analysis, for example, can be used to assess the appropriate degree to which a particular set of test results may be generalized to give confidence with respect to some broad assurance criterion.ł methods or their implementations may be flawed or implemented in a heuristic way that may lead to false positives and/or false negatives in the process of building chains.perhaps most importantly, the costeffectiveness of activities related to software assurance is heavily influenced by particular choices made in development practicešfactors that are in the control of developers, managers, and program managers. here are examples of factors that influence the effectiveness and cost of both preventive and evaluative methods: ł in assurance activities, access is provided not only to source code, but also to specifications, models, and other documentation. without this information, evaluators must expend resources to ﬁreverse engineerﬂ design intent on code produced within their own organization and create these intermediate models. in the 1980s, a study suggested that, in fact, the dod spends almost half of its 8  the cwe inventory (available online at http://cwe.mitre.org/) focuses primarily on securityrelated attributes. see also, for example, robert c. seacord, 2005, secure coding in c and c++, boston: addisonwesley, for an inventory of potential issues related to not only secure, but also safe and highquality code. there is substantial overlap of attributes related to safe and quality coding, on the one hand, and security, on the other. 9  use of these containment or isolation techniques may create benefits for components that are opaque (some vendor executables, for example) or that are difficult to assure intrinsically (mobile code and scripts in a web services environment, for example). but there are also potential hazards associated with the containment infrastructure itself (such as virtual machine or a webclient sandbox), which must often also be assured to a high level of confidence.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.adopt a strategic approach to software assurance 97postdeployment cost (47%) reverse engineering its own code.10 of course, this reverse engineering was for diverse purposes, but it illustrates the failure of documentation and traceability. ł traceability exists among the diverse software artifacts including code and the various model and documentation components. the goal, as noted above, is to ultimately connect code with architectural, functional, and quality requirements. in some software engineering groups, evaluators ignore documentation on the premise that it is easier to reverse engineer the code being evaluated (but see above). that is, while the artifacts exist, traceability is lacking, making it difficult both to locate the correct document in a sea of documentation and to verify that the description in the document remains current with asbuilt code. modern teambased software tooling has presented a revolution in traceability and loggingšfor example, each line of code in modern toolenhanced code bases can have direct links to its complete history including which developers have ﬁtouchedﬂ that line of code and for what purpose. ł choices are made regarding architecture, design, and coding that facilitate more definitive evaluation outcomes. these choices relate to formality, explicit complexity in structure, and information hiding and modularity, as well as to the characteristics of possible executions of the code. for example, distributed and concurrent systems can, for an unchanging input, exhibit different behaviors with each run. this is due to the asynchrony often characteristic of concurrent execution. when errors are unlikely but possible, testing and even inspection may not offer sufficiently useful results.11ł productline and ecosystems choices can enable leveraging of assurance activity across multiple projects. this benefit is proportional, however, to the extent that assurance techniques can be composed, which in turn is enabled by our ability to model assurancerelated attributes at component or protocol interfaces. (this is a research issue identified in chapter 5.)ł choice of programming language (and coding style) can significantly influence ability to assure. highly complex ﬁtangled codeﬂ in a language such as c (which lacks firstclass encapsulation and controlled access to storage) may present formidable barriers to evaluative methods in achieving confident assurance judgments when compared, for example, with wellstructured programs in modern languages such as c#, java, and ada that have comparable functionality.12 in these latter cases, ﬁwellstructuredﬂ means two things: first, modular structures can be crafted using modern type systems to replace tangled complexity with organization. second, intrinsic support for information hiding and encapsulated data simplifies the structure of the various links in the chain of evidence that need to be constructed.all evaluative methods are challenged by the difficulty of defining the scope of the operating environment that may be delineated as the ﬁboundariesﬂ for evaluation.13 unanticipated features of the operational environment that affect system operation may influence not only hazard, but also the validity of requirements. an example of such a scoping error occurred during a test of an f22 that originated at edwards air force base and flew to an altitude where it became exposed to the many radio emitters in the los angeles basin. this was the first such intensive radio exposure in the test process for the jet, 10 see girish parikh and nicholas zvegintzov, eds., 1983, tutorial on softwaremmaintenance, silver spring, md: ieee computer society press. see also center for software engineering at the university of southern california (usc), 2000,ﬁcocomo ii,ﬂ los angeles: university of southern california. available online at http://csse.usc.edu/csse/research/cocomoii/cocomo2000.0/ciimodelman2000.0.pdf. last accessed august 20, 2010.11 an early example was the startup failure in establishing communications among the five computers on the nasa space shuttle on april 10, 1981. later investigation of the design showed that there had been a 1 in 67 chance that the computers would not synchronize. this meant that, in testing, there was a better than 98 percent chance that the error would not be observed. if there had been anticipation of stochastic phenomena, the error could have been found with more pervasive testing. but in practice this is infeasible for two reasons: (1) there are significant errors that might occur with much lower frequencies, and (2) there are too many different kinds of interactions that might prompt this kind of testing. 12 the performance gap between ﬁlower levelﬂ languages such as c and modern encapsulationbased languages has generally been closed and, indeed, modern languages may offer better performance in many cases since runtime checks can be eliminated when static verification is achieved by compilers for typing and encapsulation properties, for example. 13 michael jackson, 1995, software specifications and requirements: a lexicon of practice, principles and prejudices, boston: addisonwesley.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.98 critical code: software producibility for defensedespite much testing. unexpectedly, the software concluded that the jet was under attack, and it went into an electronic defensive mode. crew were forced to shut down all functions to prevent unintended consequences. this experience led the f35 joint strike fighter developers to test all their software in a fully realized flying testbed well before the actual fighter was flown. this flying testbed is now one of many steps in a highly comprehensive (and expensive) process of operational testing in support of acceptance.practices influence feasibility and cost of assurancethe examples above illustrate that development practices and technologies can profoundly influence the ability to achieve successful and costeffective evaluation outcomes. these development choices range from architectural choices to choices of programming language and coding style. as noted above, complex tangled code is more difficult to evaluate than structurally simpler code, regardless of whether the evaluation is done using testing, inspection, static analysis, or model checking. it may be, for example, that the 2 percent performance improvement that is created through the additional complexity may not be justified when the added evaluation costs are considered.14 one of the great benefits of modern tooling is that a much more comprehensive record of development can be created to facilitate evaluation. when more of the various developmentrelated artifacts are formal (i.e., have precise structure and meanings), then tooling can be used to greater advantage in both prevention and evaluation (as well as in prototyping and other analogs of the modeling and simulation common in the development of physical systems). degree of formality is an important characteristic of softwarerelated artifacts, discussed at greater length below. finding 41: the feasibility of achieving high assurance for a particular system is strongly influenced by early engineering choices, particularly architectural and tooling choices. assurance techniques and results can benefit developers directlybecause of recent advances in traceability, evaluative techniques, and expressiveness of models, this record of artifacts associated with development is gaining considerable value in contributing to the creation of chains of evidence. when development teams see immediate benefits from the evidentiary material, they are naturally led to adopt a broader range of preventive practices to create additional links in the chain of evidence. it is increasingly apparent that modern assurance techniques can provide immediate benefits in the form of direct feedback loops and greater transparency in the processes implemented by small teams and even by individual developers. the techniques and associated models are also enablers of flexibility and evolution, which are essential in longlived software systems of all kinds, because of the rapid changes in operational requirements, infrastructure, ecosystems, and underlying hardware capabilities.software assurance fundamentalssoftware reliability is differentunlike other engineering materials, software does not wear out or suffer transient faults. but it can suffer transient errors, for example, because of concurrency (see box 4.2). this is both an obvious and 14 even if choices related to architecture and language affect performance or code size by observable constant factors, there is a pareto principle that suggests that this can be mitigated through performancefocused tuning of a small number of ﬁhot spotsﬂ in code. this enables the benefits of superior structure to be realized without adverse performance cost. this point notwithstanding, the idea of a tradeoff of speed against structure and safety is not necessarily principled and may, in the long haul, be incorrect. critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.adopt a strategic approach to software assurance 99subtle point. it is obvious in the sense that there is no analog of metal fatigue, rust and oxidation, or other kinds of physical deterioration or environmentally induced change in physical properties. it is subtle because software is often the mechanism of choice for handling such faults in associated hardware, such as sensors and actuators in a robotic or cyberphysical system, or faults in underlying computing hardware such as processor chips, memory, and communication channels. when software delivers ﬁbad results,ﬂ including transient errors, these are due to ﬁpermanently faultyﬂ software design, which is addressed by changes in the software codešthat is, a ﬁnew software designﬂ in the sense of changing the mechanism that is implemented.despite these differences, the terminology of reliability is usefully applied to software.15 the core of the terminology is four words: fault, error, failure, and hazard. these are defined and illustrated in box 4.2. information loss and traceabilityas noted above, the software engineering process is almost always characterized by cycles of information loss and recovery. although code16 is all that is necessary for the software to operate, considerable additional information is needed to effectively support ongoing evolution of the software over its lifespan. some of this information is formalšthat is, its expressions are precisely structured and have exact meaningsšwhile other information is ﬁinformal,ﬂ which typically means expressed in the form of natural language text, presentation charts, sketches, and informal diagrams. examples of formal information are test cases, assertions in code, certain kinds of design models such as unified modeling language (uml) statecharts and formal structural architectural models (such as acme). examples of informal information include comments in code, design description and rationale, structured api documentation (such as javadoc), and architecture and design diagrams such as from uml. two small scenarios illustrate the value of this kind of information in the design process:1. a planning process for system enhancement leads to reconsideration of a principal architectural commitment such as choice of ecosystem, design of structural architecture, or choice of infrastructure components. original designers and developers are sought out to help a new team of planners to understand elements of decision rationale for the asbuilt system, including other alternatives that were considered and why those choices were made.2. an internal algorithmic enhancement is made in a module that connects to the rest of the system through a software interface or a network protocol. questions arise concerning particular ﬁrules of the roadﬂ for that interface or protocol, and they can be resolved only through an examination of other modules in the system that operate through that interface or protocol. other questions arise due to the possible dependency of client code on ﬁaccidental featuresﬂ visible through an interface or protocol but not intended to be promised.software producibility is directly influenced not only by the extent of designrelated information that is retained and managed, but also by the means by which this designrelated information is represented.17 there are four dimensions of representation that are most significant. these are formality, modeling, consistency, and usability. 15 daniel p. siewiorek and robert s. swarz, 1998, reliable computer systems: design and evaluation, natick, ma: ak peters, ltd.16 ﬁcode,ﬂ in this context, includes both executable files and associated declarative configuration files such as the xml files often used in .net and java ee web systems.17 the committee uses the phrase ﬁdesignrelated informationﬂ in a broad sense to include not only architectural and structural commitments, but also other commitments related to quality and functional attributes not otherwise explicit in the code itself.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.100 critical code: software producibility for defenseformalitywhen information is represented formally, tools not only can make maximum use of the meanings that are expressed but also can rely on those meanings as being exact. tools can also use informal information, of course, but the inexactness of meanings limits their abilityšand consequently the ability of software developersšto rely on any particular meaning as being correct. this suggests a strong bias for formality.18 the extent of formality (i.e., expressiveness of formal notations) is limited, however, by the state of practice regarding what we know how to express. much of the advancement in programming languages (assembly language to c to c++ to c# and java, for example) and design notations (informal ad hoc structural diagrams to the uml family, for example) is enabled by advancements in technical progress by the research community. one of the challenges is understanding what scope of the worldly context of operations must be modeled in order to support reasoning regarding the full range of functional and quality requirements.19 this is an area where there has been steady progress in research, along with significant influence of that research on practice. formal information can be very simple, such as references to version numbers, identifiers in defect databases, web links (urls), or the extensive structured metadata in a defect management database. this illustrates the notion of partial formality, sometimes called ﬁsemiformalﬂ or ﬁsemistructured,ﬂ wherein formal information (such as web links) is embedded in informal texts, or vice versa (e.g., textual comments embedded in code). another example, in the defect databases, is the fact that there is also considerable latitude for informal expression within the overall structure of the wealth of ﬁformalﬂ metadatašfor example the words used to describe the defect or the constituent messages in the ﬁblogﬂ record associated with the defect. formality can also be semantically very ﬁdeep,ﬂ such as the temporal logic specifications used to express models for modelchecking tools.20 a key insight is that any step from informal text to structured metadata facilitates traceability and analysis. these steps involve making structure more explicit and identifying precise meanings for the elements of the structure. this is not to say that all models should be formalšachieving formality can create constraints on flexibility and expressiveness. this is why there is so much partial formality. but it also reminds us that incremental steps can be made as research progresses.semantic expressiveness is a key distinguishing feature among programming languages, within which small steps can make a considerable difference. for example, the firstclass typing of ada, c#, and java creates significant advantages for development teams in managing structural aspects of largerscale systems, and particularly in ongoing assessment of consistency of asbuilt code with architectural specifications. the c language does not afford such advantages. although the c++ language gives some of the benefits, it is possible to ﬁbypassﬂ the protection mechanisms in c++ programs and thus lose some of the benefits. much of the subject of modern programming language research is how to increase the expressiveness of type systems and other structuring mechanisms to facilitate more modular management of large evolving code bases as they evolve and more concise expression of abstractions represented in the code and their relationships.18 this does not necessarily relate to ﬁformal methodsﬂ as traditionally construed. see footnote 20 below. the idea of ﬁformalityﬂ is about precision of structure and meaningšand even html tags confer a small increment of formality. this is distinct from many of the methodologically focused ideas proposed under the rubric of ﬁformal methodsﬂ over the past four decades. much of the recent success of mathematically based approaches that build on the tradition of formal methods has been in areas often called ﬁlightweight formal methodsﬂšapproaches that trade scope and generality for scalability and ease of use. these more scalable approaches include model checking, sound static analysis, and some approaches based on assertionpassing verification. because they focus more narrowly on particular quality or functional attributes, these approaches have achieved success in professional development practice. an example is microsoft™s use of diverse analysis tools such as slam, prefast, spec#, and others.19 this issue is explored at length in michael a. jackson, 2001, problem frames: analysing and structuring software development problems, boston: addisonwesley.20 the term ﬁformal methodsﬂ refers to techniques for reasoning about code or design models, generally focusing on logical relationships between specifications and the code or models. critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.adopt a strategic approach to software assurance 101modelingfrom the standpoint of assurance, models of all kindsšarchitecture, design, performance, structural, and semanticšform the intermediate waypoints that facilitate linking (in the chain of evidence) of executable code with requirements of various kinds. the waypoints include ﬁdomainorientedﬂ models related to requirements.21 the uml family of design models includes models that are more formal, such as statecharts, and others that are less formal, such as deployment diagrams. the advantage of the more formal models is that there is more that tools can do to support traceability and analysis. statecharts has a precise semantics rooted in state machines, which enables creation of a range of tools for analysis, simulation, consistency checking with code, and the like. there are benefits, of course, when models can not only support the software development process and management of engineering risks (e.g., through simulation and analysis), but also facilitate the activities related to assurance. many of the topics identified in chapter 6 relate to modeling and the use of models for various purposes. tools such as model checkers and static analysis tools are informed by formal specification fragments, which are a kind of model. these are sometimes expressed in selfcontained specifications (e.g., linear temporal logic specifications or alloy specifications for model checkers) and sometimes use fragmentary annotations associated with code or models. some verification tools make use of highly expressive specification languages for functional properties. in general there is an advancing frontier from informal to formal modelsšactually from less formal to more formal modelsšand modern tooling is creating momentum to push this frontier more rapidly and effectively. in chapter 5, there is discussion regarding research goals related to both advancing modeling and specification capability and also to improving techniques and tools for reasoning and analysis. examples include techniques ranging from theorem proving, model checking, and analysis to type modeling and checking, architectural and design analysis, and analyses related to concurrency and parallelism. much of the recent progress in program analysis, which is particularly evident in certain leading vendor development practices, is built on these ideas.consistencyinformation in a software development process is gathered incrementally over time. almost always, systems are evolving and so are detailed choices regarding architecture, requirements, and design. a seemingly unavoidable consequence is a loss of consistency within the database of information captured over time. indeed, developers often set aside documents and model descriptions, and resort to interviewing colleagues and doing reverse engineering of code in order to develop confidence in the models they are building or evolving. precision in models (formality) can be useful in achieving consistency when tools can be used to analyze consistency on an ongoing basis. tool use ranges from maintenance of batteries of regression tests to the use of verification and analysis tools to compare code with models. with both formal and informal information, explicit hyperlinking can expose interrelationships to developers and enable them to more readily sustain consistency among design artifacts. extensive hyperlinking is a feature of modern development tools, including team tools and developer tools. it is an essential feature, for example, of modern opensource development and build environments.22 with automated tools, a very fine granularity can be achieved without adding to developer effort. for example, an opensource developer can check in code by submitting a simple ﬁpatchﬂ file, 21 requirements always start with informal articulations that are made precise and potentially formal (in the sense of this chapter) through the development process. one of the great benefits of highquality models for requirements and associated domain concepts is the opportunity for early validation. these models can include scenarios, use cases, mockups, etc.22 linking and other kinds of support for traceability are supported in most commercial development tools and in highend opensource ecosystems. an example that can be readily explored is the mozilla development ecosystemšsee, for example, code and tools at https://hg.mozilla.org/mozillacentral. critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.102 critical code: software producibility for defenseand from this the tools can update the information database in a way that shows the identity of the developer who last changed every individual line of code, along with some informal and semiformal rationale information such as a reference to a file version number and an identifier from the issue/defect database.usabilityeven the highest quality information does not add value if it is not readily accessible and applicable by the key stakeholders in the software development processšdevelopers, managers, evaluators, and others. with respect to search, for example, there are enormous differences in efficiency between traditional paper documents and electronic records. augmenting search with linking and with direct support for anticipated workflows is another large step in efficiency. choice of representation for expressing design information and models can also make a significant differencešﬁdeveloperaccessibleﬂ notations can reduce training requirements and lower barriers to entry for developers to capture information that otherwise might not be expressed at all. indeed, we can contemplate a concept of ﬁdeveloper economicsﬂ that can be used as a guide for assessing potential motivation of individual developers in using assurancerelated tools. an example of bad developer economics is when a developer or team is asked to devote considerable time and effort to expressing design information when payback is uncertain, diffuse, or most likely far in the future. a goal in formulating incentive models that motivate developer effort (beyond management or contractual mandates) is to afford developers increments of value for increments of time invested in capturing design information, and to provide that value as soon as possible after the effort has been invested. thus, when a developer writes a singleunit test case, it becomes possible both to execute that test case right away on an existing small unit, and to validate the test case against other design information (and to capture links with that design information to support consistency). this ﬁearly gratification incrementalityﬂ can be a challenge to achieve for certain kinds of tools and formal documentation, however. success in achieving this ﬁearly gratificationﬂ is one of the reasons why unit testing has caught on, and model checking and analysis are also emerging into practice.23finding 42: assurance is facilitated by advances in diverse aspects of software engineering practice and technology, including modeling, analysis, tools and environments, traceability, programming languages, and process support. advances focused on simultaneous creation of assurancerelated evidence with ongoing development effort have high potential to improve the overall assurance of systems.challenges for defense and similar complex systemshazardsthe extent and rigor adopted for an evaluation process is most directly influenced by the potential hazards associated with the intended operational environment. missile launch control, cryptographic tools, infusion pumps for medication administration, automobile brake systems, and flybywire avionics are all ﬁcritical systemsﬂ whose design and construction are profoundly influenced by considerations of evaluation and assurance. for many critical systems, standards have been established that regulate various aspects of process, supplychain decisions, developer training and certification, and evaluation. these standards are ultimately directed toward assurances regarding quality attributes in running code. from the particular perspective of assurance, any focus on aspects other than the intended delivered 23 difficulty in achieving this kind of incrementality has been a challenge to the adoption of emerging prototype functional verification systems. critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.adopt a strategic approach to software assurance 103code (and its associated chains of evidence) is intended either as a predictor of ultimate code quality or, often, as a surrogate for direct evaluation of some critical quality of that running code. the latter approach is often used as a ﬁworkaroundﬂ when direct evaluation is thwarted by the raw complexity of the system or the inadequacy of methods and tools available for direct evaluation. indeed, system managers often feel that they face an uncomfortable tradeoff between enhancing the capability of a system and delivering a high level of assurance. this folkloric ﬁqualitycapability tradeoffﬂ is particularly challenging because it may be difficult to know exactly where on the quality axis a particular design is likely to reside. greater incentives for quality have had the effect of ﬁpushing outwardﬂ this tradeoff curve for both preventive and evaluative methods. this observation explains, for example, why vendors such as microsoft have made such a strong commitment to advancing in all areas of prevention and evaluation, because it enables them to offer simultaneous increases in quality and capability.capability and complexitya major complicating factor in software assurance for defense is the rapid growth in the scale, complexity, and criticality of software in systems of all kinds. (this is elaborated in chapter 1.) this growth adds to both factors in the risk product, including extent of consequence (hazard, due to the growing criticality of software systems, and cost of repair, due to the growing significance of early commitments) and potential for consequence (due to complexity and interlinking with other systems). the transition to flybywire aircraft, which was for many years loudly debated, is an example of the growing consequence of software. in the commercial world, we are now analogously moving to ﬁdrivebywireﬂ vehicles, where the connections between brake and accelerator pedals and the respective mechanical actuators are increasingly computer mediated. the benefits are significant, in the form of antilock braking, cruise control, fuel economy, gas/electric hybrid designs, and other factors. but so are the risks, as documented in recent cases regarding software upgrades for the brake mechanisms for certain toyota and ford vehicles. an example of the risks of flybywire were demonstrated when an f22 pilot had to eject from his aircraft (which eventually crashed) when he realized that, due to an unexpected gyro shutdown, he had no ability to control the aircraft from the cockpit. he realized this only after takeoff, when the aircraft initiated a series of uncommanded maneuvers. in modern fighters, if the vehicle management system computers (vms) are lost, so is the aircraft. as noted in national research council reports, more constrained domains such as medical devices and avionics benefit from rigorous standards of quality and practice such as do178b.24 these standards prescribe specific documents, process choices (including iterative models), consistency management and traceability practices, and assurance arguments (ﬁverificationﬂ) that include various links of the chain, as described earlier in this chapter. these approaches are extremely valuable, but they also appear to be more effective in domains with less diversity and scale than is experienced in dod critical systems.complexity and supply chainsan additional complicating factor in software assurance for defense is the changing character of the architecture and supply structure for software systems generally, including defense software systems. the changes, which are enabled by advances in the underlying software technologies, particularly related to languages, tools, and runtime architectures, allow for more complex architectures and richer and more diverse supply chains. even routine software for infrastructure users such as banks, for example, can involve dozens of major modules from a similar number of vendor and developer 24 nrc, daniel jackson, martyn thomas, and lynette i. millett, eds., 2007, software for dependable systems, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=11923. accessed august 20, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.104 critical code: software producibility for defenseorganizations, as well as custom software components developed by multiple independent inhouse development teams. this is in addition to the defense and government challenges of the customer and key stakeholders working at arm™s length from the development teams.when systems are modular and componentbased, there are sometimes opportunities to structure the assurance task in an analogously modular fashion. unfortunately, many critical software attributes do not ﬁcomposeﬂ in this fashion, but there are some that do. for example, type correctness of software in modern languages such as java, c#, and ada is composable, which permits separate compilation of distinct modules. but without composability, the problem of creating ﬁlinksﬂ in the assurance chain can rapidly become intractable. composability is therefore an important goal in the design of models, languages, and analysis capabilities. additionally, modern systems make greater use of complex software frameworks and libraries. this is a great success in reuse, but there is also great complexity. frameworks provide aggregate functionalities such as graphical user interaction, application server capability, web services support, mobile device capabilities, software development environments, enterprise resource planning (erp), and the like. these frameworks embody many of the technical commitments associated with the ecosystems described in chapter 1, and they now appear ubiquitously in largerscale commercial applications. a framework is different from a library, roughly, because it embodies greater architectural commitment, including the structure of its associated subsystems, patterns for the flow of control, and representations for key data structures. this approach, which is enabled by modern objectoriented technology and languages, greatly reduces engineering risk for framework users, because the established frameworks embody proven architectures. but it does create some assurance challenges due to the complexity of the relationships among the framework, its client code, and potentially framework addins that augment capability in various ways.frameworks and componentsthe success of componentbased architectures, libraries, and frameworks has led to larger and more capable software applications that draw from a much greater diversity of sources for code. this is a mixed blessing. on the one hand, highly capable and innovative applications can be created largely by selecting ecosystems and assembling components, with a relatively very small proportion of new custom design and code development. often the overall architecture can be highly innovative, even when it incorporates subsystems and components drawn from established ecosystems. this approach is particularly well suited to incremental methods that facilitate accommodation of the refresh cycles for the various constituent components. it also facilitates prototyping, because functional capabilities can often be approximated through the assembly process, with additional custom code added in later iterations to tailor to more detailed functional needs, as they become better understood. trustthis model, while attractive in many respects, poses significant challenges for assurance. because there are diverse components from diverse sources, there will necessarily be differences in the levels of trust conferred on both components and suppliers. this means that, in the parlance of cybersecurity, there are potential attack surfaces inside as well as outside the software application and that we must support rigorous defense at the interfaces within the application. in other words, the new perimeter is within the application rather than around it or its platform. this can imply, for example, that the kinds of architecture analyses alluded to in chapter 3 that relate to modularity and coupling may also be useful in assuring that among components in a system (e.g., involving access to data or control of resources) there is no ﬁconnectivityﬂ other than that which is intended by the architects. this new reality for large systems poses great challenges for assurance, because of the potentially reduced ability to influence the many sources in the supply chain and also because of the technical critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.adopt a strategic approach to software assurance 105challenges of composing assessment results for individual components and subsystems into aggregate conclusions that can support an assurance case.vendor components are very often accepted on the basis of trust and expectations rather than direct analysis. there are both technical and legal barriers to direct analysis that often thwart the ability of the dod to make sound assessments that can lead to reliable conclusions regarding assurance. there are several options in these cases. one is to employ a formal thirdparty assessment process such as common criteria (iso 15408), which is in fact derived from the old ﬁorange bookﬂ process defined in the early 1980s. these processes can be expensive and can create delay.25 additionally, results can be invalidated when components must be configured, plugins are added, or other small changes are made such as adding device drivers to an operating system configuration. there has been much consideration of alternate approaches to such assessments. (detailed consideration of this issue is beyond the scope of this report, but consideration is given in the referenced dsb report.26)two scenarios for software assuranceto illustrate evaluative techniques and the value of preventive techniques when software is developed at arm™s length, the committee presents two speculative scenarios for software assurance. in the first scenario, evaluators are given full access to an already existing software system that is proposed for operational release. the access includes source code for all custom development as well as all associated development documents. the evaluators also have access to threat experts, and they may have the opportunity to interview members of the development team. in the second scenario, a similar system is developed, but evaluators have access to the development team from the outset of the project, and the development team leaders have specific contractual incentives to obtain favorable judgments of high assurance. the first scenario, which is fully after the fact, may be read as a strawman for the second and more desirable scenario. unfortunately, an afterthefact response such as sketched in the first scenario is all too often called for in practicešand indeed in some cases may be optimistic due to the opacity of many code and service components.first scenariošafter the factin the informal narrative below, the committee starts with the first scenario and then (under the same paragraph headings) explores the potential benefits of the greater access in the second scenario.ł hazard and requirements analysis. the first step for the evaluators is to engage with the threat experts and the operational stakeholders for the purpose of identifying the key hazards. these could include hazards related to quality attributes: security hazards (e.g., confidentiality, integrity, and access in some combination), safety hazards (e.g., related to weapons release), and reliability and performance hazards. this will include identification of the principal hazards relating to functional attributesšcorrectness of operation, usability and ergonomic considerations, and compliance with interoperation requirements 25 the common criteria standard (iso 15408) is generally considered to be more successful for wellscoped categories of products such as firewalls and other selfcontained devicesšas contrasted with generalpurpose operating systems, for example. success with common criteria is also challenged by dynamic reconfiguration, such as through dynamically loaded libraries, device driver additions, and reconfiguration of system settings by users and administrators. additionally, much of the evaluation undertaken through the common criteria process is focused on design documents rather than on the code to be executed. there may be no full traceability of executing code corresponding to the evaluated design documents.26 dsb, 2007, report of the defense science board task force on mission impact of foreign influence on dod software, washington, dc: office of the under secretary of defense for acquisition, technology, and logistics. available online at http://stinet.dtic.mil/oai/oai?&verb=getrecord&metadataprefix=html&identifier=ada473661. last accessed august 20, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.106 critical code: software producibility for defenseand, more generally, with standards associated with interlinked systems (ultrascale, netcentric, system of systems, etc). ł architecture and component identification. the system and its associated documents are then analyzed to determine the overall intended and asbuilt system architectures. the intended architecture may not correspond exactly to the asbuilt, but it should be as close as possible, with deviations plausibly explainable as design or coding defects. as part of this process, the internal component structure of the system is modeled, including the adoption of offtheshelf components and frameworks from established ecosystems. for example, if the system uses web capabilities, then there will likely be major subsystems implemented as configured vendor frameworks. the result of this step is an architectural model, an identification of the principal internal interfaces that mediate interactions among components (frameworks, libraries, local services, networkaccessed services, custom components, etc.), and an identification of significant semantic invariants regarding shared data, critical process flows, timing and performance constraints, and other significant architectural features.27ł componentlevel error and failure modeling. if successful, the architectural analysis yields an understanding of principal constraints on the components of the system that relate to attributes such as timing, resource usage, data flows and access, user interaction constraints, and potentially many other attributes depending on the kind of system. this process, and also the architecture analysis process, is informed by documents and developer interviews.ł supplychain and development history appraisal. based on information regarding component sourcing and supplychain management practices, levels of trust are assigned to system components. this will inform priority setting in assessment of the individual components. custom components from lesstrusted sources may merit greater attention, for example, than offtheshelf commercial components from more trusted sources. a similar analysis should apply to services (e.g., cloud services, softwareasaservice capabilities, etc.). opensource components afford visibility into code, rationale, and history. they may also afford access to test cases, performance analyses, and other pertinent artifacts. it is also helpful, from the standpoint of security threats (see box 4.1), to assess detailed historical development data. this can include not only data regarding producer/consumer interfaces within the supply chain, but also, when possible, code checkin records from modern development databases (such as captured in opensource systems such as svn and cvs and similar commercial products and services).ł analysis of architecture and component models. proceeding on the (as yet unverified) assumption that component implementations are consistent with their constraints, the models at the granularity of architecture and component interactions can be subject to analysis. because of the diversity of attributes of the models that can trace to the identified failures and hazards, multiple modeling exercises are likely to be undertaken, each focusing on particular attributes. when the models can be rendered formally, then tools for semiautomated analysis can be used for model checking, theorem proving, static analysis (at model level), simulation, and other kinds of mathematically based analysis. if certain models can be formalized only partially or not at all, then a more manual approach must be adopted to undertake the analysis.ł identify highinterest components. component analyses can be prioritized on the basis of a combination of trust level (from the supplychain analysis) and potential role with respect to hazards, or ﬁarchitectural criticality.ﬂ greater attention, for example, would be devoted to a component that handles sensitive information and that is custom developed by an unknown or less trusted supplier.ł develop a component evaluation plan. the evaluation plan involves allocating resources, setting priorities, identifying assurance requirements, and establishing progress measures on the basis of the analyses above.ł assess individual components. this can involve a combination of evaluative techniques. ﬁstaticﬂ 27 this documentation, focused on succinct renderings of traceability and technical attributes, should not be confused with the ﬁfor the recordﬂ documentation often required with development contractsšwhich may be of limited value in an assurance exercise that relies on efficient toolassisted evaluation.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.adopt a strategic approach to software assurance 107techniques, which do not involve executing the code, include inspection (with design documents), sound static analysis, and heuristic static analysis. these analyses may involve the construction of various kinds of abstract models that can themselves be analyzed to assess various functional and quality attributes. this activity is facilitated when models can be made more formalšinformally expressed models necessarily require people to make interpretations and assessments. the analyses may also involve ﬁdynamicﬂ techniques, which involve execution of the code, either in situ in the running system (analogous to in vivo testing in life sciences) or in test scaffolds (analogous to in vitro testing in life sciences). if the project had used unit testing, then scaffold code would be included in the corpus, and this could be adapted and reused. dynamic methods also include dynamic analysis and monitoring and can be used to inform the development of static models to provide assurance in cases where this is significantšparticularly concurrent and performancesensitive code. the results of this assessment are in the form of an identification of areas of confidence and areas of remaining assessment risk with respect to the component interface specifications derived from the architecture analysis.ł select courses of action for custom components. on the basis of the identification of highinterest components and the component assessment results, specific options are identified for mitigation of the remaining assessment risks. these options could range from acceptance of the component (a positive assurance judgment) to wholesale replacement of the component. intermediate options include, for example, containment (ﬁsandboxingﬂ the component behind a façade that monitors and regulates control and data flows, either within the process or in a separate process or virtual machine), refactoring, and other kinds of rework that might lead to more definitive assessment results. for example, simplification of code control structure and localization of state (data) can greatly facilitate analyses of all kinds. on the other hand, if there are major issues that afflict multiple components and the value is deemed sufficient, then this kind of refactoring and rework could be done at the architectural level, facilitating assessment for multiple components. ł select courses of action for opaque components and services. for opaque components (typically products from vendors), the options are more constrained. in these cases, the extent of the intervention may be influenced by the extent of trust vested in the particular vendor in its supplychain role. when trust is relatively low, potential interventions include sandboxing (as noted above) and architectural intervention to assure that the untrusted component does not have access to the most sensitive data and control flows. outsourced services, for example, can also be sandboxed and monitored. an alternative is to replace the component or to rework the arm™slength contractual arrangements to facilitate access and evaluation.ł refine systemlevel assessment. on the basis of the results of the component assessments and interventions (where appropriate and practical), architecturelevel refactoring can sometimes be considered as a means to improve modularity, isolating components for which high levels of assurance cannot be achieved. most importantly, the architecturallevel models should be reconsidered in the light of the information acquired and verified in the foregoing steps. this reconsideration should focus on the hazards, quality attributes, and functional requirements as identified in the initial steps. if the component and architecturelevel assurances do not combine to yield sufficient assurances for the hazards identified, then more drastic options need to be contemplated, including canceling the project, redefining the mission context to reduce the unaddressed hazards, revising initial thresholds regarding system risks, or undertaking a more intensive reengineering process on the offending components of the system and/or its overall architecture. as noted in chapter 3, reworking architecture commitments at this late stage can be very costly, because there can be considerable consequent rework in many components.this scenario is intended to illustrate not only the potential challenges in an evaluation process, but also some of the added costs and risks that exist due to insufficiency either of effort in the ﬁpreventiveﬂ category or of evaluator involvement in the development phase. in the second scenario, the committee briefly considers how these steps might be different were the evaluators and developers to work in partnership during the development process rather than after the fact. critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.108 critical code: software producibility for defensesecond scenariošpreventive practicesthe steps are the same as those for the first scenario, but the descriptions focus on the essential differences with the afterthefact scenario above. this scenario should make evident the value of incentives in the development process for ﬁdesign for assurability.ﬂ ł hazard and requirements analysis. this step is similar, but performed as part of the overall scoping of the system. because architecture is such a primary driver of quality attributes and assurance (as illustrated above), in this preventive scenario, a savvy manager would couple the architecture definition with the hazard analysis and, if possible, limit early commitment regarding specific functional characteristics to broad definitions of the ﬁscopeﬂ of the system (see chapter 2). at this stage, the first set of overall progress metrics is defined, and these could include credit to be allocated for resolving engineering risks associated with assurance. these metrics can also relate to compliance with standards associated with interlinked systems, as noted in the first scenario.ł architecture and component identification. as noted earlier, the architecture definition is coupled with hazard identification and scope definition. the exceedingly high engineering risk for assurance and architecture in the afterthefact scenario (assuming innovative architectural elements are required) is replaced with an upfront process of architecture modeling, supported by various earlyvalidation techniques such as simulation, prototyping, and direct analysis (such as with model checking). certain detaillevel architectural commitments can be made incrementally. progress metrics related to assurancerelated engineering risk are refined and elaborated.ł componentlevel error and failure modeling. a key difference is that the componentlevel modeling, combined with the supplychain appraisal, provides an early feedback mechanism regarding engineering risks in the evolving architecture design. risks can be assessed related not only to quality attributes and technical feasibility, but also to sourcing costs and risks. for example, choices might be made regarding opaque commercial components from a trusted source, custom components, wrapped untrusted components, and opensource components that afford stakeholders both visibility and the possibility of useful intervention (e.g., adding test cases, adapting apis, adding features, etc.). this process can also lead to the early creation of unit test cases, analysis and instrumentation strategies, and other qualityrelated interventions in the component engineering process. process metrics defined in earlier stages can inform allocation of resources in this stage of the process. the metrics are also refined as part of the incremental development process.ł supplychain and development history appraisal. see above. the committee notes that it is sometimes asserted that offshore development is intrinsically too dangerous. however, one could argue that badly managed onshore development by cleared individuals may be more dangerous than offshore development with best practices and evidence creation along with coding. a wellmanaged offshore approach may be feasible for many kinds of components when elements of the evolving best practice are adopted, such as (1) highly modular architectures enabling simplicity in interface specifications and concurrent development, (2) unit testing, regression testing, and code analysis, with results (and tests) delivered as evidence along with the code, (3) frequent builds, (4) bestpractice configuration control, and (5) agilestyle gating and process management.28 metrics can relate to a combination of adoption of best practices and production of separately verifiable evidence to support any assurance claims. as noted above, full linebyline historical tracking of changes to a code base is now commonplace for development projects of all sizes. a key benefit of such tracking is that it provides full traceability not only among artifacts, but also to individual developers, which is useful for security and to assure that individual developers are fully uptodate with best practices.28 michael a. cusumano, alan maccormack, chris f. kemerer, and william crandall, 2009, critical decisions in software development: updating the state of the practice, ieee software 26(5):8487. see also alan maccormack, chris f. kemerer, michael cusumano, and bill crandall, 2003, ﬁtradeoffs between productivity and quality in selecting software development practices,ﬂ ieee software 20(5):7885. critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.adopt a strategic approach to software assurance 109ł analysis of architecture and component models. this becomes part of the iterative earlystage process of refining architecture, quality attribute goals, functional scoping, and sourcing. if there are portions of the configuration that may create downstream challenges for evaluators, this is the opportunity to revisit design decisions to facilitate evaluation. for example, an engineer might suggest a change in programming language for a component in order to get a 5 percent speed up. at this stage of the process, that proposal can be considered in the light of how it might influence assurance with respect to quality attributes, interface compliance, correct functionality, and other factors. the decision could be made not to change the programming language, but rather to incentivize the vendor to make the next set of improvements in its compiler technology. these decisions are made using a multicriteria metric approach, with criteria and weightings informed by the earlier stages.ł identify highinterest components. regardless of the front end of the process, there will be a set of highinterest components. ideally, however, as a result of architecture decisions, the components in this category are not also opaque and untrusted. regardless, components are prioritized on the basis of measured assurancerelated engineering risk, with metrics as set forth in the earlier stages. this assessment will account for ongoing improvements in development technologies (e.g., languages, environments, traceability and knowledge management), assurance tools (e.g., test, inspection, analysis, and monitoring support), and modeling (for various quality attributes including usability). ł develop a component evaluation plan. allocate resources, set priorities, and identify assurance requirements on the basis of the analyses above. in this preventive scenario, this plan is largely a consequence of the early decisions regarding architecture, sourcing, hazards, and functional scope. metrics are defined for resolution of engineering risk in all components (but particularly highinterest components), so progress can be assessed and credit assigned.ł assess individual components. as above, this involves a combination of many different kinds of techniques. in the preventive scenario, component development can be done in a way that delivers not only code, but also a body of evidence including test cases, analysis results, inplace instrumentation and probes, and possibly also proofs of the most critical properties. (these proofs are analogous to what is now possible for typesafety and encapsulation integrity, which is now a ubiquitous analysis that is composable and scalable.) this supporting body of evidence that is delivered with code enables acceptance evaluators to verify claims very efficiently regarding quality attributes, functionality, or other properties critical to assurance. metrics are developed to support coproduction of component code and supporting evidence.ł select courses of action for custom components. see above. ł select courses of action for opaque components and services. for existing vendor components, the same considerations apply as in the previous scenario. if new code is to be developed in a proprietary environment, then there is the challenge of how to make an objective case (not based purely on trust) that the critical properties hold. existing approaches rely on mutually trusted third parties (as in common criteria), but there may be other approaches whereby proof information is delivered in a semiopaque fashion with the code.29 additionally, the proprietary developer could develop the code in a way that is designed to operate within a sandbox, in a separate process, or in another containeršin this approach, the design is influenced by the need to tightly regulate control and data flows in and out of the contained component. metrics would weight various criteria, with a longterm goal of diminishing the extent of reliance on trust vested in commercial vendors in favor of evidence production in support of explicit ﬁassurabilityﬂ claims.ł refine systemlevel assessment. given the high risks and costs of architectural change, in a preventive scenario, any adjustments to architecture are done incrementally as part of the overall process. metrics would relate to the extent of architectural revisions necessary at each stage of the process.29 there is a wealth of literature on proofcarrying code and related techniques.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.110 critical code: software producibility for defenseconclusiona key conclusion from these scenarios is the high importance of three factors: (1) the extremely high value of incorporating assurance considerations (including security considerationsšsee box 4.1) into the full systems lifecycle starting with conceptualization, throughout development and acceptance evaluation, and into operations and evolution. (2) the strong influence of technology choices on the potential to succeed with assurance practices. (3) as a consequence, the value to dod software producibility that comes from enhancements to critical technologies related to assurance, including both what is delivered (programming languages, infrastructure) and what is used during development (models and analytics, measurement and process support, tools and environments).recommendation 41: effective incentives for preventive software assurance practices and production of evidence across the lifecycle should be instituted for prime contractors and throughout the supply chain. this includes consideration of incentives regarding assurance for commercial vendor components, services, and infrastructure included in a system.as illustrated in the scenario, when incentives are in place, there are emerging practices that can make significant differences in the outcomes, cost, and risk of assurance. the experience at microsoft with the lipnerhoward security development lifecycle (sdl)30 reinforces thisšthe lifecycle not only leads to better software but also incentivizes continuous improvement in assurance technologies and practices.when ecosystems, vendor components, opensource components, and other commerical offtheshelf (cots) elements are employed, assurance practices usually necessitate the dod to constantly revisit selection criteria and particular choices. the relative weighting among the various sourcing options, from an assurance standpoint, will differ from project to project, based on factors including transparency of the development process and of the product itself, either to the government or to thirdparties. this affords opportunity to create incentives for commercial vendor components to include packaged assurancerelated evidence somewhere between the two poles of ﬁas isﬂ and ﬁfully common criteria certified.ﬂ advancement in research and practice could build on ideas already nascent in the research community regarding ways that the evidence could be packaged to support quality claims and to protect trade secrets or other proprietary technology embodied in the components.recommendation 42: the dod should expand its research focus on and its investment in both fundamental and incremental advances in assurancerelated software engineering technologies and practices.this investment, if well managed, could have broad impact throughout the dod supply chain. when both recommendations are implemented, a demandpull is created for improved assurance practices and technologies. recommendation 43: the dod should examine commercial best practices for more rapidly transitioning assurancerelated best practices into development projects, including contracted custom development, supplychain practice, and inhouse development practice. 30 steve lipner and michael howard, 2006, the security development lifecycle: a process for developing demonstrably more secure software, redmond, wa: microsoft press.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.adopt a strategic approach to software assurance 111several leading vendors have developed explicit management models to accelerate the development of assurancerelated technologies and practices, to validate them on selected projects, and to transition them rapidly into broader use.3131 microsoft is well known for its aggressive use of development practices including process (the security development lifecycle (sdl) noted earlieršsee http://msdn.microsoft.com/enus/library/ms995349.aspx) and analysis tools (such as slam, prefast, and othersšsee, for example thomas ball, 2008, ﬁthe verified software challenge: a call for a holistic approach to reliability,ﬂ pp. 4248 in verified software: theories, tools, experiments, bertrand meye and jim woodcock, eds. berlin: springerverlag).critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.1125reinvigorate dod software engineering researchin this chapter, the committee summarizes and recommends seven technology research areas as critical to the advancement of defense software productibility. these seven areas were identified by the committee on the basis of the following considerations:ł priorities identified from the analysis reported in the foregoing chapters: architecture, incremental process, measurement, and assurance. this builds on extensive interviews with leaders from the dod and industry and research regarding both challenges and potential opportunities for the dod.ł areas of potential technology and practice that might not otherwise develop sufficiently rapidly without direct investment from the dod. although other agencies are investing in areas related to software producibility, the focus and approach to investment do not sufficiently address the priorities as identified above.ł potential for a fleshedout program proposal to satisfy research management ﬁfeasibilityﬂ criteria such as the heilmeier questions (see box 5.1), which identify a set of ﬁtestsﬂ for research program proposal1šthat is, areas where investment most likely leads to a return that benefits the dod.ł areas not sufficiently addressed by other major federal research sponsors, including the networking and information technology research and development (nitrd) agencies. prefacing this summary of areas recommended for future research investment is an exploration of the role of academic research in software producibility and a discussion of the impacts of past investments. the chapter also includes a brief discussion regarding effective practice for research program management to maximize impact while managing overall programmatic risk.2 1  there are many versions of the questions; one such version can be found in box 5.1.2  indeed, there is a parallel between programmatic risk in the development of innovative software and programmatic risk in research program management. more important, perhaps, is the analogy between engineering risk in innovative software development and management risk in research program management. several kinds of research management risk and various approaches to management risk mitigation are identified in chapter 4 of national research council (nrc), 2002, information technology research, innovation, and egovernment, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=10355. last accessed august 20, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.reinvigorate dod software engineering research 113the role of academic research in software producibilitythe academic research communityšalong with a small number of industry research groupsšhas traditionally addressed many of the core technical problems related to software producibility. the academic value proposition has several direct components: the first is workforce. university graduates are the core of the engineering workforce. the most talented and highly trained graduatesšthose who contribute to innovation in a primary wayštend to come from phd programs. more generally, the research community generates a steady supply of peoplešgraduates at all levelsšeducated at the frontiers of current knowledge in important areas of specialization. the economics of these programs depend on externally funded research projects. that is, unlike bachelor™s and master™s enrollments, the production of phd graduates by universities is in direct proportion to sponsored research. it is perhaps too obvious to point this out, but cleared individuals with top technical qualifications are most likely to be graduates of u.s. universities. the second component is new knowledge. the style of computer science and software research, historically, has focused on the creation of scientific understanding that is both fundamental and applicable. this is in keeping with the ﬁboundlessnessﬂ of software as described in chapter 1.3 although industry plays a limited role in performing research relevant to fundamental open problems, there is no institution in the united states other than the research community, located primarily at universities, that focuses on broad and often nonappropriable advancements to knowledge that are directly relevant to practice. indeed, major corporate labs that have historically supported nonappropriable and openpublication research as a significant part of their overall portfolios (such as bell labs and xerox parc) have been restructured or scaled back in recent years. this scaling back of privatesector research is due to numerous factors, including a loss by many players of safe monopoly status, analogous to that which enabled bell labs to thrive. this creates greater internal pressure on laboratory managers to create measurable return on investment (roi) cases for research projects. this is particularly challenging for software producibility research, which is often focused on creating new measures of ﬁreturnﬂ rather than on incremental advances according to readily measurable criteria. this increases the significance of the role of academic research, government laboratories, and federally funded research and developments centers (ffrdcs). this is not to say that major research effort in software producibility is not underway in industry. at microsoft and ibm, particularly, there is aggressive and forwardlooking work in this area that is having significant influence across the industry.academic research and development (r&d) is also a major generator of entrepreneurial activity in information technology (it).4 the small companies in that sector have an important role in developing and market testing new ideas. the infrastructure to support these ventures is an important differentiator of the u.s. innovation system. this infrastructure includes university intellectual property and people supported by university r&d projects. these companies may sometimes disrupt the comfortable market structures of incumbent firms, but arguably not in the same way as do competition or foreign innovation. regardless, weak incumbents tend to fall by the wayside when there is any disruption. strong incumbents become stronger. this constant disruption is a characteristic of the more than halfcentury of it innovation. it is essential that the dod itself be effective as a strong incumbent that is capable of gaining strength through disruptive innovations, rather than being a victim (see below). the intelligence community™s disruptive technology office (dto, now part of intelligence advanced projects research agency5) can be presumed to have been founded upon this model. a third area of value provided by universitybased r&d (and industrial lab r&d as well) is surprise reduction. computing technology is continuing to experience very rapid change, at a rate that has been 3  this is the fundamental yet eventually useful knowledge in what donald stokes has called pasteur™s quadrant. see donald e. stokes, 1997, pasteur™s quadrantšbasic science and technological innovation, washington, dc: brookings institution press.4 the committee uses ﬁinformation technologyﬂ or ﬁitﬂ to refer to the full range of computing and information technology areas in the scope of the nitrd multiagency coordination activity (see http://www.nitrd.gov/ last accessed august 20, 2010). 5  see http://www.iarpa.gov/. last accessed august 20, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.114 critical code: software producibility for defensebox 5.1  heilmeier criteriawhen george heilmeier was darpa director in the mid 1970s he developed a set of pithy questions to ask research program managers when they proposed new program ideas. that set of questions has persisted, and it continues to be applied in various forms by research managers everywhere. here is a composite rendering of the questions, along with some commentary regarding research program management.1. what are you trying to do? explain objectives using no jargon. the scope of the project must be defined, as well as the key stakeholders in the outcome. the purpose of ﬁno jargon,ﬂ in part, is to assure that the scope and value can be described in ways that individuals outside the immediate field can appreciate the context and value of what is proposed.2. how is it done today? what are the limits of current practice? this is an accounting of the baseline state, the value it delivers, the limits on what can be done in the present configuration, and, to some extent, the pain experience as a consequence of those limits.3. what™s new in your approach? why do you think it will be successful? often the novelty is less in the form of a dramatically ﬁnew idea,ﬂ but rather in the convergence of existing ideas and new developments elsewhere in the field. a cynical view of ﬁcloud computing,ﬂ for example, is that it is a delivery on the dream of ﬁutility computingﬂ articulated in the early 1960s at the dawn of the era of timesharing. cloud, of course, takes this idea many steps forward in scalability, capability, and other ways. in other words, it is less important that the idea be ﬁnovel,ﬂ but rather timely, potentially game changing, and feasible. feasibility, in this context, does not mean free of risk, but rather that the dependencies on infrastructure and other elements of the package are realistic. feasibility also means that there are potential research performers who have the means and motive to engage on the topic. for academic research, this means the ability to build a capable team of phd students, engineering staff as required, potential transition partners, collaborators at other institutions, etc.4. if you™re successful, what difference will it make? to whom? this is an identification of stakeholders, and in addition an indication of potential pathways from research results to impact. for many research projects related to computing and software, those pathways can be complex. these complexities are discussed in the nrc ﬁtire tracksﬂ reports.1 for software, the path often connects the research results to the dod through the development of commercial capabilities, where private investment takes a promising research idea and matures it to the point that it can be adopted by development teams. this adoption could be by software development teams in defense contractors or it could be by development teams creating commercial products or services. for example, the reliability of dod desktop computers undeniably was improved, quite dramatically, as a result of the improvements made by microsoft to the process of development and evaluation for device driver code enabled by the slam tool (described elsewhere in this chapter), which in turn were enabled by research sponsorship from darpa and nsf. in addition to defining the impact, there is value in understanding not only those stakeholders who will benefit, but also those who may be disrupted in other ways.5. what are the risks and the payoffs? this is not only an accounting of the familiar ﬁrisk/rewardﬂ model, but also an indication of what are the principal uncertainties, how (and when) they might be mitigated, and what are the rewards for success in resolving those uncertainties.2 6. how much will it cost? how long will it take? an important question is whether there are specific cost thresholds. for certain physics experiments, for example, either the apparatus can be built, or not. but for other kinds of research there may be more of a ﬁgentle slopeﬂ of payoff as a function of level of effort. the answer to the questions of cost and schedule, therefore, should not only be specific numbers, but also, in many cases, should provide a description of a function that maps resources to results.7. what are the midterm and final ﬁexamsﬂ to assess progress? it is essential that there be ways to assess progress, not only at the end of a project, but also at milestones along the way. (this is analogous to the idea of ﬁearly validationﬂ of requirements, architecture, design, etc., as a way to reduce engineering risk in software.) in many research areas, quantitative measures of progress are lacking or, indeed, their formulation is itself the subject of research. for this reason, in some challenging research areas the identification 1 see national research council (nrc), 1995, evolving the high performance computing and communications initiative, washington, dc: national academy press; and nrc, 2003, innovation in information technology, washington, dc: national academies press. an inventory of ﬁengineeringﬂ risks related to research program management is in the nrc report on egovernment national research council, 2002, information technology research, innovation, and egovernment, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=10355. last accessed august 3, 2010.undiminished for several decades and perhaps is accelerating because of a nowglobal involvement in advancing it. given the rapid change intrinsic to it, the research community (in academia and in industry, especially startup companies) serves not only as a source of solutions to the hardest problems, a source of new concepts and ideas, and a source of trained people with high levels of expertise, but also as a bellwether, in the sense that it anticipates and provides early warning of important technological changes. for software, the potential for surprise is heightened by a combination of the rapid growth of globalization, the concurrent movement up the value chain of places to which r&d has been outsourced, and the explicit investments from national governments and the european union in advancing national technological capability. given the role of externalities in it economics, it is not unreasonable to expect the innovation center of gravity to change rapidly in many key areas, which could shift control in critical areas of the technology ecosystems described above. this is already happening in several areas of it infrastructure, such as chip manufacturing. in this sense, the research community has a critical role in defensecritical areas that are experiencing rapid change. a consequence of this role is the availability of top talent to address critical softwarerelated defense problems as they arise.the fourth component of the academic r&d value proposition is nonappropriable invention, as described in chapter 1. this is one of the several forms of innovation carried out by the university critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.reinvigorate dod software engineering research 115box 5.1  heilmeier criteriawhen george heilmeier was darpa director in the mid 1970s he developed a set of pithy questions to ask research program managers when they proposed new program ideas. that set of questions has persisted, and it continues to be applied in various forms by research managers everywhere. here is a composite rendering of the questions, along with some commentary regarding research program management.1. what are you trying to do? explain objectives using no jargon. the scope of the project must be defined, as well as the key stakeholders in the outcome. the purpose of ﬁno jargon,ﬂ in part, is to assure that the scope and value can be described in ways that individuals outside the immediate field can appreciate the context and value of what is proposed.2. how is it done today? what are the limits of current practice? this is an accounting of the baseline state, the value it delivers, the limits on what can be done in the present configuration, and, to some extent, the pain experience as a consequence of those limits.3. what™s new in your approach? why do you think it will be successful? often the novelty is less in the form of a dramatically ﬁnew idea,ﬂ but rather in the convergence of existing ideas and new developments elsewhere in the field. a cynical view of ﬁcloud computing,ﬂ for example, is that it is a delivery on the dream of ﬁutility computingﬂ articulated in the early 1960s at the dawn of the era of timesharing. cloud, of course, takes this idea many steps forward in scalability, capability, and other ways. in other words, it is less important that the idea be ﬁnovel,ﬂ but rather timely, potentially game changing, and feasible. feasibility, in this context, does not mean free of risk, but rather that the dependencies on infrastructure and other elements of the package are realistic. feasibility also means that there are potential research performers who have the means and motive to engage on the topic. for academic research, this means the ability to build a capable team of phd students, engineering staff as required, potential transition partners, collaborators at other institutions, etc.4. if you™re successful, what difference will it make? to whom? this is an identification of stakeholders, and in addition an indication of potential pathways from research results to impact. for many research projects related to computing and software, those pathways can be complex. these complexities are discussed in the nrc ﬁtire tracksﬂ reports.1 for software, the path often connects the research results to the dod through the development of commercial capabilities, where private investment takes a promising research idea and matures it to the point that it can be adopted by development teams. this adoption could be by software development teams in defense contractors or it could be by development teams creating commercial products or services. for example, the reliability of dod desktop computers undeniably was improved, quite dramatically, as a result of the improvements made by microsoft to the process of development and evaluation for device driver code enabled by the slam tool (described elsewhere in this chapter), which in turn were enabled by research sponsorship from darpa and nsf. in addition to defining the impact, there is value in understanding not only those stakeholders who will benefit, but also those who may be disrupted in other ways.5. what are the risks and the payoffs? this is not only an accounting of the familiar ﬁrisk/rewardﬂ model, but also an indication of what are the principal uncertainties, how (and when) they might be mitigated, and what are the rewards for success in resolving those uncertainties.2 6. how much will it cost? how long will it take? an important question is whether there are specific cost thresholds. for certain physics experiments, for example, either the apparatus can be built, or not. but for other kinds of research there may be more of a ﬁgentle slopeﬂ of payoff as a function of level of effort. the answer to the questions of cost and schedule, therefore, should not only be specific numbers, but also, in many cases, should provide a description of a function that maps resources to results.7. what are the midterm and final ﬁexamsﬂ to assess progress? it is essential that there be ways to assess progress, not only at the end of a project, but also at milestones along the way. (this is analogous to the idea of ﬁearly validationﬂ of requirements, architecture, design, etc., as a way to reduce engineering risk in software.) in many research areas, quantitative measures of progress are lacking or, indeed, their formulation is itself the subject of research. for this reason, in some challenging research areas the identification 1 see national research council (nrc), 1995, evolving the high performance computing and communications initiative, washington, dc: national academy press; and nrc, 2003, innovation in information technology, washington, dc: national academies press. an inventory of ﬁengineeringﬂ risks related to research program management is in the nrc report on egovernment national research council, 2002, information technology research, innovation, and egovernment, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=10355. last accessed august 3, 2010.research community. in a market economy, with internal roi cases prerequisite for r&d investment inside firms, this is a role most appropriate to universities and similar institutionsšof course firms often carry out or sponsor such innovation for a variety of reasons, but it is not their core purpose. for it in particular, such r&d is essential to national competitiveness and to increases in marketwide value. although the openness of university research is sometimes considered a negative factor with respect to the advancement of technology for national security, it is also the case that universities have unique incentives, unlike industry, to advance the discipline even when the hardwon results are nonappropriable or difficult to fully appropriate. as noted above, it is evident from the history of the field that the advancement of it and software producibility disproportionately depends on this kind of technology advance. of course, universities also create an enormous body of appropriable intellectual property that has the potential to be transitioned into practice. finding 51: academic research and development continues to be the principal means for developing the most highly skilled members of the software workforce, including those who will train the next generation of leaders, and for stimulating the entrepreneurial activity that leads to disruptive innovation in the information technology industry. both academic and industry labs are creating critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.116 critical code: software producibility for defensethe fundamental advances in knowledge that are needed to drive innovation leadership in new technologies and to advance software technologies that are broadly applicable across industry and the dod supply chain.dod influence on academic r&dthe overall directions and priorities for sponsored research that leads to universityoriginated invention are greatly influenced by funding levels and agency priorities. for example, the defense advanced research project agency™s (darpa™s) deliberately strong relationship with the it research community, which began in the 1960s and endured for nearly 40 years, has had profound influence on it research priorities, the overall culture of computer science research, and the massive economic and national outcomes. this is documented in multiple nrc reports relating to the innovation pipeline for it, which trace the origins of a broad set of specific it innovations, each of which has led to a multibillion dollar market.6data available from nitrd and other sources indicate that there has been a significant reduction in federally sponsored research related to software producibility as well as to highconfidence software and systems (see box 1.5). furthermore, it is the committee™s impression that in recent years many of the researchers in these areas have moved into other fields or scaled down their research efforts as a result of, among other things, the dod™s having shifted funding away from softwarerelated r&d, apparently on the assumption that industry can address the problems without government intervention. as stated previously, industry generally has less incentive to produce the fundamental advances in knowledge that enable disruptive advances in practice, building on fundamental advances but less often creating them. the impact of r&d cutbacks generally (excluding healthrelated r&d) has been noted by the top officers of major it firms that depend on a flow of innovation and talent.academic r&d, looking forwardthere are some challenges to proceeding with a new program for academic r&d related to softwareintensive systems producibility. these challenges relate generally to saliency, realism, and risk. university researchers and faculty tend to be aware of broadly needed advances, but they do not always have adequate visibility into the full range of issues created by leading demands for largescale, complex industrial and military systems. this awareness is hindered by many things, including national security classification, restricted research constraints, professional connectivity, and cost, in the sense of time and effort required to move up the learning curve. in a different domain, darpa took a positive step in this regard by initiating the darpa computer science study group, wherein junior faculty are given clearances and so are able to gain direct exposure to military challenge problems. several specific dod programs have undertaken similar efforts to give faculty a domain exposure, often with great success. one example from the 1990s is the command and control university (c2u) created by the command post of the future (cpof) program, which not only gave researchers access to military challenges, but also led to collaborations yielding new innovation in system concepts.7 with respect to ensuring that researchers have access to problems at scale, companies such as google and yahoo!, and national laboratories such as los alamos, have developed collaborative programs to expose faculty and graduate students to highperformance computing systems, large datasets, and the software approaches being taken with those systems. these companies, like the dod, have worked out 6  see nrc, 2003, innovation in information technology, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=10795. last accessed august 20, 2010. also see the predecessor report nrc, 1995, evolving the high performance computing and communications initiative, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=4948. last accessed august 20, 2010.7  the committee understands that prototype systems from this program are now deployed in iraq.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.reinvigorate dod software engineering research 117a level of exposure that enables researchers to engage productively without compromising core intellectual property. the dod has a track record of success in this regard as well.for software producibility research, a different kind of access is needed. certainly, the success of largescale productionquality open source has afforded researchers great opportunity not only to experiment with large code bases, but also to undertake longitudinal and organizational analyses of larger projects. this has been enabled by the sophistication of the toolsšcode management systems, defect databases, designs and models, test cases. these projects are comparable in scale and functionality to commercial software and have greatly assisted the software engineering community in its research. additionally, commercial firms are affording researchers greater access to proprietary code bases for experimentation and analysis. an early and significant example is work by gail murphy in which she assessed consistency of an asbuilt code base with architectural intent.8 she studied both an open source project and a proprietary project. if security and commercial ownership issues could be resolved (perhaps by clearing selected researchers), members of the research community would benefit greatly from access to dodrelated artifacts, including surrogates and ﬁsanitizedﬂ artifacts that omit critical algorithms and/or data. regardless of access, the committee recommends improved data collection to support analysis (see recommendation 22). investing in research in software producibilitythe impact of past investmentssoftware development has changed and, for the most part, improved considerably during the past several decades. software systems have grown in size and complexity and are now an integrated component of every aspect of our society, including finance, transportation, communication, and health care. since the 1960s, moore™s law has correctly predicted the tremendous growth in the number of transistors on chips and, generally speaking, the extent of hardwaredelivered computing power. an analogous growth has occurred in the size and power of software systems if machinelevel instructions, rather than transistors, are the measure of growth.9,10,11 today™s systems are built using highlevel languages and numerous software library components, developed using sophisticated tools and frameworks, and executed with powerful runtime support capabilities.research in software engineering, programming technologies, and other areas of computer science has been a catalyst for many of these advances. nearly all of this research was undertaken at research universities as part of federal programs led by darpa, the national science foundation (nsf), and the service basic (category 6.1) research programs of the office of naval research, air force office of science research, and army research office. three illustrations of the impact of federal sponsorship (in academia and industry) that is specifically related to software engineering are presented in box 5.2. these illustrations, drawn from a study undertaken by osterweil et al.,12 complement the analyses of the nrc reports cited above relating to research impacts on practice and on the it economy. 8  gail murphy, 1995, ﬁsoftware reflexion models: bridging the gap between source and highlevel models,ﬂ proceedings of the third acm sigsoft symposium on foundations of software engineering, washington, dc, october 1013, pp. 1828.9  barry boehm, 1999, ﬁmanaging software productivity and reuse,ﬂ ieee computer september, 32(9):111113.10 mary shaw, 2002, ﬁthe tyranny of transistors: what counts about software?ﬂ proceedings of the fourth workshop on economicsdriven software engineering research, ieee computer society, orlando, fl, may 1925, pp. 4951.11 barry boehm, 2006, ﬁa view of 20th and 21st century software engineering,ﬂ proceedings of the 28th international conference on software engineering, acm, shanghai, china, may 2028, pp. 1229.12 leon j. osterweil, carlo ghezzi, jeff kramer, alexander l. wolf, 2008, ﬁdetermining the impact of software engineering research on practice,ﬂ ieee computer 41(3):3949.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.118 critical code: software producibility for defensechallenges and opportunities for investmentnotwithstanding the enormous payoffs from past investments in software research, making the case for future research investments in software producibility faces a number of challenges, rooted largely in the nature of software development as a field of study. all scientific research fields face challenges in justifying future investments, but the unique characteristics of software and the dynamics of knowledge creation in software producibility create particular challenges for this field. there are, however, opportunities based on developments in the technology, in the overall environment of practice, and in the improvement of scientific practice. these challenges and opportunities influence the application of the criteria summarized at the outset of this chapter. below are a few examples of influences, both positive and negative:ł maturation of the discipline. many researchers will agree that, as a discipline, software engineering research has matured considerably in the past decade. this is a consequence of both improved research methods and improved circumstances. the circumstances include a vast improvement in access to large bodies of code, both through largescale opensource projects and through improvement in researcher access to proprietary code bases. an additional circumstance is the emergence of highly capable tools, including sourcecode management systems, development environments, analysis frameworks, etc., that afford researchers opportunity to conduct experiments at meaningful levels of scale. the effect is that it is more often possible for software engineering researchers to give satisfactory responses to the heilmeier questions (see box 5.1). at the same time, software engineering practice remains behind the state of the art in research. as discussed in chapter 1, software development remains more akin to a craft than to an engineering discipline, in which the productivity and trustworthiness of system development rest on fundamental and wellvalidated principles, practices, and technologies. and it is still the case that even sanitized representative software artifacts are not available for academic analysis in many defense areas.ł diffusion pathways and timescale. many of the results of software research are broadly applicable and provide for enabling technologies and methods useful in a range of specific application domains. breadth of applicability is valued in research, but it is also doubleedged from the standpoint of sponsors. first, there is a greater chance that results may diffuse to adversaries as well as to collaborators. second, there is a commons problem: because the benefits are broad, no particular stakeholder can justify the investments needed to produce them. thus, for example, dod service r&d programs tend to focus much more on servicespecific technologies than on commonbenefit software technology. twenty years ago, the service laboratories played a significant part in maturing and transitioning software producibility technology, but the ﬁtragedy of the commonsﬂ has virtually dried up this key channel. moreover, advances in software producibility very often are enabling advances rather than being advances of immediate use in particular products. better techniques for identifying, diagnosing, and repairing software faults, for example, enable production of better systems but are not directly used in particular software products. the value of such advances is thus often hard to quantify precisely for any single advance, or from the perspective of any single program. yet when integrated over longer periods of time and in terms of impacts on many engineering products, the benefits of the stream of advances emerging from software research are very clear (as summarized above). in the case of defense software producibility, there are clear drivers of defense software ﬁleading demand,ﬂ and there are ways that the dod can invest in and realize benefits earlier and more effectively than can potential adversaries. moreover the dod remains a major beneficiary of the longerterm production of software producibility knowledge. ł novelty of ideas. it is noted earlier in this chapter that cloud computing, taken broadly, is really a manifestation of a halfcenturyold idea of ﬁutility computingﬂ that has just now become feasible due to the positions of the various exponential curves that model processor, storage, and communications capabilities and costsšas well as enabling engineering, management, and business innovation. this account is a bit simplistic, obviously, but it makes an essential point: the specific novelty of an idea critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.reinvigorate dod software engineering research 119box 5.2  three examples of the impact of past investments1. from bug detection to lightweight formal methods. bugs have plagued software since before there were computers,1 and researchers have been actively working on developing tools to help detect and prevent errors in software systems for at least half a century. early compilers focused on syntactic errors and simple debugging support, but soon tools were developed to detect more complex semantic errors. simple definitionreference bug detection techniques2,3 were followed by more sophisticated approaches.4,5,6 programming languages such as ada, java, and c# incorporated some of these concepts directly into the language, and thus, for example, checked for array indexes being out of bounds during compilation and added runtime checking only when necessary. this work laid the foundation for a range of model checking and program analysis tools that are now emerging at companies like microsoft and google as these companies increase their concern for secure, highquality systems. systems such as microsoft™s slam and prefast are based upon the research advances funded by the federal government. for example, a report on slam states, ﬁthe project used and extended ideas from symbolic model checking, program analysis and theorem proving.ﬂ7 those ideas emerged from academic research performed years earlier related to model checking and binary decision diagrams, and indeed edmund clarke won the 2008 turing award for his work on model checking. the authors of this tool, which has been is credited with significantly reducing the incidence of ﬁblue screenﬂ system crashes, were awarded the 2009 microsoft engineering excellence, a success that represents the culmination of federally funded research from the 1970s through the 1990s. early research on software testing advocated for coverage measures, such as statement and branch coverage, and tools were developed for symbolically executing paths in programs and automatically generating test cases to satisfy such measures8,9,10 the storage and speed of the machines at that time made this approach impractical, but advances in hardware combined with continued research advances in lightweight reasoning engines and higherlevel languages have now made coverage monitoring a 1 letters from ada lovelace to charles babbage discussing programming errors are mentioned in grady booch and doug bryan, 1993, software engineering with ada, 3rd ed., boston: addisonwesley professional. also see grace murray hopper™s note in the log for the aiken mark ii in 1947 in grace murray hopper, 1981, ﬁthe first bug,ﬂ annals of the history of computing 3(3):285286, 1981.2 leon j. osterweil and lloyd d. fosdick, 1976, ﬁsome experience with dave: a fortran program analyzer,ﬂ in proceedings of the national computer conference and exposition, acm, new york, ny, june 710, pp. 909915.3 barabara g. ryder, 1974, ﬁthe pfort verifier,ﬂ software: practice and experience 4(4):359377.4 kurt m. olender and leon j. osterweil, 1990,"cecil: a sequencing constraint language for automatic static analysis generation," ieee transactions on software engineering 16(3):268280. 5 edmund m. clarke and e. allen emerson, 1981, ﬁsynthesis of synchronization skeletons for branching time temporal logic.ﬂ pp. 5271 in logic of programs: workshop lecture notes in computer science 131, berlin: springer.6 gerard j. holzmann, 1997, ﬁthe model checker spin,ﬂ ieee transactions on software engineering 23(5): 279295. 7 thomas ball, byron cook, vladimir levin, and sriram k. rajamani, 2004, ﬁslam and static driver verifier: technology transfer of formal methods inside microsoft,ﬂ lecture notes in computer science (lncs) 2999:120; eerke a. boiten, john, derrick, and graeme, smith, eds., 2004, fourth international conference on integrated formal methods (ifm 2004), canterbury, kent, england, april 47. researchers at microsoft have stated that the majority of the ﬁblue screen of deathﬂ errors evident in the 1990s were attributed to problems that could have been prevented with this analysis tool.8 lori a. clarke, 1976, ﬁa program testing system,ﬂ in proceedings of the 1976 acm annual conference, acm, houston, tx, october 2022, pp. 488491.9 james c. king, 1975, ﬂa new approach to program testing,ﬂ in proceedings of the international conference on reliable software, acm, los angeles, ca, april 2123, pp. 228233.10 robert s. boyer, bernard elspas, and karl n. levitt, 1975, ﬁselectša formal system for testing and debugging programs by symbolic execution,ﬂ in proceedings of the international conference on reliable software, acm, los angeles, ca, april 2123, pp. 234245. continuedcritical code: software producibility for defensecopyright national academy of sciences. all rights reserved.120 critical code: software producibility for defensecommon industrial practice, along with sophisticated support for test case generation.11 similarly, current trends in testing, such as the ﬁtest firstﬂ approach widely adopted by agile software development teams (and tools such as the junit unittesting framework) owe their foundation to early work on test case descriptions and automated execution,12,13 again based on u.s. governmentfunded research. programming language development has also been strongly influenced by work in analysis of software systems, as noted above with ada and its support for type safety and automated bounds checking. although ada was not a broad commercial success for various political, programmatic, and socialeconomic reasons, it is recognized as the direct ancestor of java, which is widely adopted partly because of its embodiment of lessons from type theory, program analysis, and programming environment research. these lessons enabled java to support richly capable libraries and software frameworks (as noted in chapter 1). the c# language from microsoft builds on similar foundations, and all three languages provide a stronger foundation for writing secure and highquality code. 2. from development environments to software architectures to domainspecific frameworks. the success of java is also partly due to the recognition of the importance of an interactive development environment (ide). early development environments were language centric, such as interlisp14 from 1981, but continued governmentsupported research, such as field15 and arcadia,16 advocated for looser interaction models and broad support for interoperability. this led to work on common data interchange models,17the forerunners to xml and all its variants, multilanguage virtual machine models such as the java virtual machine, and common interoperability protocols, such as java™s remote method invocation (rmi) and certain features of microsoft™s .net framework. these advances, combined with the language principles, enabled the development of modern integrated development environments (ides) such as microsoft™s visual studio and eclipse, originally developed by ibm but later released to open source. as software systems continued to grow in size and complexity, software engineering research broadened from algorithm and data structure design to include software architecture issues18,19 and the recog dorota huizinga and adam kolawa, 2007, automated defect prevention: best practices in software management, hoboken, nj: wileyieee computer society press.12 phyllis g. frankl, richard g. hamlet, bev littlewood, and lorenzo strigini, 1998, ﬁevaluating testing methods by delivered reliability,ﬂ ieee transactions on software engineering 24(8):586601. phyllis g. frankl, richard g. hamlet, bev littlewood, and lorenzo strigini, 1997, ﬁchoosing a testing method to deliver reliability,ﬂ in proceedings of the 19th international conference on software engineering, acm, boston, ma, may 1723, 1997, pp. 6878.14 warren teitelman and larry masinter, 1981,ﬁthe interlisp programming environment,ﬂ computer 14(4):2533. steven p. reiss, 1990, ﬁconnecting tools using message passing in the field environment,ﬂ ieee software 7(4):5766.16 richard n. taylor, frank c. belz, lori a. clarke, leon osterweil, richard w. selby, jack c. wileden, alexander l. wolf, and michael young, 1989, ﬁfoundations for the arcadia environment architecture,ﬂ acm sigsoft software engineering notes 24(2):113.17 david alex lamb, 1987, ﬁidl: sharing intermediate representations,ﬂ acm transactions on programming languages and systems 9(3):297318. 18 mary shaw and david garlan, 1996, software architecture perspectives on an emerging discipline, upper saddle river, nj: prentice hall. 19 dewayne e. perry and alexander l. wolf, 1992, ﬁfoundations for the study of software architecture,ﬂ acm sigsoft software engineering notes 17(4):4052.nition of common styles and design patterns.20 work in software architecture was also an enabler of the development of highlevel frameworks, such as service oriented architectures21 electronic enterprise systems, the backbone of current ebusiness. commercial architecture standards such as rest22 derive from governmentsupported software architecture research. 3. from the waterfall to an agile compromise. early software developers often viewed themselves as independent artisans because they worked individually or in very small groups. the reality of the complexity of the systems that were being developed, the longterm duration, the vast resources required, and the large percentage of unsuccessful projects, led to the realization that large software system development needed to be supported by a carefully managed process. early process models, and particularly the waterfall model,23 were developed as organizing frameworks to help organize the considerable preimplementation and modeling work, and within them were identified the major software development phases. the actual flow from phase to phase was sometimes interpreted overly simplistically, leading to process models (e.g., the dod 2167a standard) that are now considered cumbersome and overly rigid. software leaders in academia and industry, such as belady, lehman, mills, boehm, and others, argued for more reasoned development models that incorporated risk assessment and incremental, evolutionary development.24,25,26 these models contained the seeds of the iterative ideas that now are nearly ubiquitously adopted by small development teams throughout industry. these were documented in the case of microsoft by cusumano and selby27 and in the now extensive literature of smallteam iterative methods under rubrics such as extreme, agile, scrum, tsp, and others. these methods are quite aggressively driving the development of tools to better support team activity including coordination across teams to support larger projects. concepts including code refactoring, short development sprints, and continuous integration are now accepted practices. however, most agile practices have serious assurance and scalability problems,28 and need to be used selectively in large missioncritical systems or systems of systems. 20 martin fowler, 2002, patterns of enterprise application architecture, boston: addisonwesley longman publishing. 21 michael bell, 2008, ﬁintroduction to serviceoriented modeling,ﬂ serviceoriented modeling: service analysis, design, and architecture, hoboken, nj: wiley & sons. 22 roy t. fielding and richard n. taylor, 2002, ﬁprincipled design of the modern web architecture,ﬂ acm transactions on internet technology 2(2):115150. 23 winston w. royce, 1970, ﬁmanaging the development of large software systems: concepts and techniques,ﬂ technical papers of western electronic show and convention (wescon), august 2528, los angeles, ca. 24 laszlo belady and meir m. lehman, 1985, program evolution processes of software change, london, uk: academic press. 25 barry boehm, 1986, ﬁa spiral model of software development and enhancement,ﬂ acm sigsoft software engineering notes 11(4):1424. 26 harlan mills, 1991, ﬁcleanroom engineering,ﬂ american programmer, may, pp. 3137. 27 michael a. cusumano and richard w. selby, 1995, microsoft secrets: how the world™s most powerful software company creates technology, shapes markets, and manages people, new york: harper collins business. 28 barry boehm and richard turner, 2004, balancing agility and discipline, boston: addisonwesley.box 5.2 continuedcritical code: software producibility for defensecopyright national academy of sciences. all rights reserved.reinvigorate dod software engineering research 121common industrial practice, along with sophisticated support for test case generation.11 similarly, current trends in testing, such as the ﬁtest firstﬂ approach widely adopted by agile software development teams (and tools such as the junit unittesting framework) owe their foundation to early work on test case descriptions and automated execution,12,13 again based on u.s. governmentfunded research. programming language development has also been strongly influenced by work in analysis of software systems, as noted above with ada and its support for type safety and automated bounds checking. although ada was not a broad commercial success for various political, programmatic, and socialeconomic reasons, it is recognized as the direct ancestor of java, which is widely adopted partly because of its embodiment of lessons from type theory, program analysis, and programming environment research. these lessons enabled java to support richly capable libraries and software frameworks (as noted in chapter 1). the c# language from microsoft builds on similar foundations, and all three languages provide a stronger foundation for writing secure and highquality code. 2. from development environments to software architectures to domainspecific frameworks. the success of java is also partly due to the recognition of the importance of an interactive development environment (ide). early development environments were language centric, such as interlisp14 from 1981, but continued governmentsupported research, such as field15 and arcadia,16 advocated for looser interaction models and broad support for interoperability. this led to work on common data interchange models,17the forerunners to xml and all its variants, multilanguage virtual machine models such as the java virtual machine, and common interoperability protocols, such as java™s remote method invocation (rmi) and certain features of microsoft™s .net framework. these advances, combined with the language principles, enabled the development of modern integrated development environments (ides) such as microsoft™s visual studio and eclipse, originally developed by ibm but later released to open source. as software systems continued to grow in size and complexity, software engineering research broadened from algorithm and data structure design to include software architecture issues18,19 and the recog dorota huizinga and adam kolawa, 2007, automated defect prevention: best practices in software management, hoboken, nj: wileyieee computer society press.12 phyllis g. frankl, richard g. hamlet, bev littlewood, and lorenzo strigini, 1998, ﬁevaluating testing methods by delivered reliability,ﬂ ieee transactions on software engineering 24(8):586601. phyllis g. frankl, richard g. hamlet, bev littlewood, and lorenzo strigini, 1997, ﬁchoosing a testing method to deliver reliability,ﬂ in proceedings of the 19th international conference on software engineering, acm, boston, ma, may 1723, 1997, pp. 6878.14 warren teitelman and larry masinter, 1981,ﬁthe interlisp programming environment,ﬂ computer 14(4):2533. steven p. reiss, 1990, ﬁconnecting tools using message passing in the field environment,ﬂ ieee software 7(4):5766.16 richard n. taylor, frank c. belz, lori a. clarke, leon osterweil, richard w. selby, jack c. wileden, alexander l. wolf, and michael young, 1989, ﬁfoundations for the arcadia environment architecture,ﬂ acm sigsoft software engineering notes 24(2):113.17 david alex lamb, 1987, ﬁidl: sharing intermediate representations,ﬂ acm transactions on programming languages and systems 9(3):297318. 18 mary shaw and david garlan, 1996, software architecture perspectives on an emerging discipline, upper saddle river, nj: prentice hall. 19 dewayne e. perry and alexander l. wolf, 1992, ﬁfoundations for the study of software architecture,ﬂ acm sigsoft software engineering notes 17(4):4052.nition of common styles and design patterns.20 work in software architecture was also an enabler of the development of highlevel frameworks, such as service oriented architectures21 electronic enterprise systems, the backbone of current ebusiness. commercial architecture standards such as rest22 derive from governmentsupported software architecture research. 3. from the waterfall to an agile compromise. early software developers often viewed themselves as independent artisans because they worked individually or in very small groups. the reality of the complexity of the systems that were being developed, the longterm duration, the vast resources required, and the large percentage of unsuccessful projects, led to the realization that large software system development needed to be supported by a carefully managed process. early process models, and particularly the waterfall model,23 were developed as organizing frameworks to help organize the considerable preimplementation and modeling work, and within them were identified the major software development phases. the actual flow from phase to phase was sometimes interpreted overly simplistically, leading to process models (e.g., the dod 2167a standard) that are now considered cumbersome and overly rigid. software leaders in academia and industry, such as belady, lehman, mills, boehm, and others, argued for more reasoned development models that incorporated risk assessment and incremental, evolutionary development.24,25,26 these models contained the seeds of the iterative ideas that now are nearly ubiquitously adopted by small development teams throughout industry. these were documented in the case of microsoft by cusumano and selby27 and in the now extensive literature of smallteam iterative methods under rubrics such as extreme, agile, scrum, tsp, and others. these methods are quite aggressively driving the development of tools to better support team activity including coordination across teams to support larger projects. concepts including code refactoring, short development sprints, and continuous integration are now accepted practices. however, most agile practices have serious assurance and scalability problems,28 and need to be used selectively in large missioncritical systems or systems of systems. 20 martin fowler, 2002, patterns of enterprise application architecture, boston: addisonwesley longman publishing. 21 michael bell, 2008, ﬁintroduction to serviceoriented modeling,ﬂ serviceoriented modeling: service analysis, design, and architecture, hoboken, nj: wiley & sons. 22 roy t. fielding and richard n. taylor, 2002, ﬁprincipled design of the modern web architecture,ﬂ acm transactions on internet technology 2(2):115150. 23 winston w. royce, 1970, ﬁmanaging the development of large software systems: concepts and techniques,ﬂ technical papers of western electronic show and convention (wescon), august 2528, los angeles, ca. 24 laszlo belady and meir m. lehman, 1985, program evolution processes of software change, london, uk: academic press. 25 barry boehm, 1986, ﬁa spiral model of software development and enhancement,ﬂ acm sigsoft software engineering notes 11(4):1424. 26 harlan mills, 1991, ﬁcleanroom engineering,ﬂ american programmer, may, pp. 3137. 27 michael a. cusumano and richard w. selby, 1995, microsoft secrets: how the world™s most powerful software company creates technology, shapes markets, and manages people, new york: harper collins business. 28 barry boehm and richard turner, 2004, balancing agility and discipline, boston: addisonwesley.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.122 critical code: software producibility for defensemay matter much less than the timeliness of the idea and the readiness of the environment to address it in a successful way. many old ideas, considered as failing concepts, resurfaced years later at the ﬁright timeﬂ and made a significant difference. in other words, the key question is not so much, what are the new ideas? but rather, what are the ideas whose time has come?ł measurement of effectiveness and performance. the challenges of software measurement as discussed in the previous chaptersšwith respect to process measures, architecture evaluation, evidence to support assurance, and overall extent of system capabilityšapply also to software engineering research. we lack, for example, good ways to measure the impact of any specific research result on software quality, which stems in part from the lack of good measures of software quality. without reliable, validated measures it is hard to quantify the impact of innovations in software producibility, even those that are widely credited with improving quality, such as the introduction of strong typing into programming languages or traceability in softwaredevelopment databases. this is analogous to the productivity paradox, recently resolved.13 because software is an enabling technologyša building material rather than a built structurešit may not fit with research program management models that focus on production of artifacts with immediately, clearly, and decisively measurable value. ł timescale for impact. frequently, it is only after a significant research investment has been made and proof of concept demonstrated that industry has stepped in to transition a new concept into a commercial or inhouse product. also, there are many novel products/services that result from multiple, independent research results, none of which is decisive in isolation, but which when creatively combined lead to breakthroughs. although it may appear that a new development emerged overnight, further inspection usually reveals decades of breakthroughs and incremental advances and insights, primarily funded from federal grants, before a new approach becomes commonly accepted and widely available. cstb™s 2003 report innovation in information technology reinforces this point. it states, ﬁone of the most important messages – is the long, unpredictable incubation periodšrequiring steady work and fundingšbetween initial exploration and commercial deployment. starting a project that requires considerable time often seems risky, but the payoff from successes justifies backing researchers who have vision.ﬂareas for future research investmentin this section, the committee identifies seven areas for potential future research investment and, for each area, a set of specific topics that the committee identifies as both promising and especially relevant to defense software producibility. these selections are made on the basis of the criteria outlined at the beginning of this chapter. the descriptions summarize scope, challenges, ideas, and pathways to impact. but, obviously, these descriptions are not (even summary) program plansšthe development of program plans from technical descriptions requires consideration of the various program management risk issues,14 development of management processes and plans on the basis of the risk identification, identification of collaborating stakeholders, and other program management functions. in the development of program plans, choices must be made regarding scale of the research endeavor and the extent of prototype engineering, field validation, and other activities that are required to assess the value of emerging research results. in some areas, a larger number of smaller projects may be most effective, while in other areas more experimental engineering is required and the research goals may be best addressed 13 this is analogous to the socalled ﬁproductivity paradox,ﬂ according to which economists struggled to account for the productivity benefits that accrued from investments made by firms in it. the productivity improvements due to it are now identified, but for a long time there was speculation regarding whether the issue was productivity or the ability to measure particular influences on productivity. (this issue is also taken up in chapter 1.)14 an inventory of risk issues for research program management appears in chapter 4 of nrc, 2002, information technology research, innovation, and egovernment, washington, dc: national academy press. available online at http://www.nap.edu/catalog.php?recordid=10355. last accessed august 20, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.reinvigorate dod software engineering research 123through a small set of larger and more integrated projects.15 also in the development of program plans, choices must be made regarding the degree to which an agency program focuses on a particular solution strategyšrather than posing a problem and soliciting a diversity of potential solution approaches, many of which may not have been anticipated when the problem was posed and the program formulated. particularly in software research, where the development of new metaphors and models is essential to progress, this latter approach can be very valuable.16the descriptions, rather, serve primarily as a summary of points made in earlier chapters relating to technology advances that would ﬁmake a differenceﬂ in software producibility (and that meet the criteria). the committee offers them as recommended focal points for renewed investment in defense software producibility.area 1. architecture modeling and architectural analysisas noted throughout this report, improvements in the ability of the dod to manage system design, evaluation, development, and evolution at the architectural level are a key to improved software producibility. for precedented systems, such advances would mean having and using documented, validated architectures and making good ecosystems choices. improvements here can increase the value and flexibility of libraries and frameworks, and can facilitate their use through modeling and validation, for example. for innovative systems (this report™s principal focus), good architecture choices are often the keys to successful development and are significant to the scaling up and interlinking of systems, process management, enabling incremental practices, assurance, and reduction of diverse kinds of engineering risks related to design, interoperation, and supplychain choices. because the dod benefits greatly from interlinked systems (netcentric, ultrascale, systems of systems), advances in architecturerelated capabilities make a greater difference both in potential to achieve systems capability and in ability to effectively manage architecturerelated engineering risks. yet, despite major advances in knowledge of software and system architecture, the state of knowledge and certainly the state of technology and practice today are inadequate to support dod needs in this area, even for precedented systems. dod success in softwareintensive systems producibility depends on future research results in this area, and the transitioning of such results into useful notations, technologies, practices, and rules. the committee identifies three principal goals for architecture research. goal 1.1: facilitate missionoriented modular architecturesa good example of missionoriented modular architecture is the decoupling of sensors, battle command, and weapons release. these functions, colocated in a tank, battleship, or fighter aircraft for example, not only can be separated geographically, but also can be shared across multiple battlefield functions. this has a nearirresistible value, analogous to metcalfe™s law for networkstructured systems.17 this is part of the compelling rationale for goals associated with the army future combat systems (fcs) and theater ballistic missile defense (bmd) models with netcentric approaches, intelligence linking, and the like. in this model, a shooter can be guided by a multitude of geographically dispersed sensors, and unmanned sensors and shooters can be positioned at dangerous locations 15 darpa, for example, has used both approaches to advantage over the years. 16 this is ﬁsolution riskﬂ as described in chapter 4 of nrc, 2002, information technology research, innovation, and egovernment, washington, dc: national academy press. available online at http://www.nap.edu/catalog.php?recordid=10355. last accessed august 20, 2010. 17 metcalfe™s law asserts that the aggregate value of a network to its members grows with the square of the number n of membersšproportional to the number of edges in a complete graph of size n. this is a folkloric explanation of why the pressure to combine networks (as in the original internet, but also for instant message interoperation, convergence of fax standards, etc.) is so difficult for operators to resist, even when it creates business risks through loss of lockin.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.124 critical code: software producibility for defensethrough the use of autonomous and teleoperated vehicles. the model thus affords tremendous power and agility to theater commanders. with respect to this research issue: because the architecture is fundamentally driven by interoperability and integration requirements, effective management of architecture can be a great enabler for joint (multiple military services, including air, land, sea, space, and cyber) and combined (international and coalition) warfare. but from the standpoint of systems engineering, the power comes at a significant price, which is the high level of complexity and engineering risk that comes from the extent of coupling and operational flexibility required among the multitude of sensors, weapons, and battle command centers. for example, how can architectures be developed and validated to support the kind of local autonomy necessary for a vehicle to navigate effectively over mixed terrain? how can ﬁunanticipated requirements be anticipatedﬂ such as command and control for rapidly assembled coalitions, for example, to address a natural disaster? how can software and systems architectures be evolved, for example, as algorithms and machinelearning capabilities improve? moreover, by specifying interfaces where testing or measurement is possible, by defining reusable components, and by separating critical from noncritical parts of the system, architecture plays an essential role in assurance. what happens when a vehicle or platform is compromised? how is resiliency built into the architecture to avoid a deliberately stimulated cascading failure?architecture is more than a ﬁtop downﬂ laying out of systems structure or theoretical contemplation of design possibilities. the skills of a software architect in trading off diverse considerations to fix on essential design commitments is described by the roman architect vitruvius (ca. 15 bc):the architect should be equipped with knowledge of many branches of study and varied kinds of learning, for it is by his judgment that all work done by the other arts is put to the test. this service of his is the child of theory and practice. practice is the continuous and regular exercise of employment where manual work is done with any necessary material according to the design of the drawing. theory, on the other hand is the ability to demonstrate and explain things wrought in accordance with technical skills and method. it follows, therefore, that architects who have aimed at acquiring manual skills without theory have not been able to reach a position of authority to correspond with their pain, while those who relied only on theories and learning were obviously hunting the shadow, not the substance. but those who have mastered both, like men equipped in full armor, soon acquire influence and attain their purpose.there are several specific challenges associated with this goal:ł architectural decisions. architectural decision making is driven by the combined consideration of multiple interacting factors. some factors derive from stakeholder needsšthese are functional scope and quality attributes such as degree of assurance needed, operational safety and security, design evolvability, online adaptability, performance, cost, etc. other factors are internal factors, reflecting the interdependency of the various dimensions of architectural decision making. for today™s major applications, for example, a diversity of architectural styles is induced by sets of interrelated decisions concerning the combination of frameworks, platforms, and middleware to be adopted. advancing architecture into a more scientific activity requires improvement in our understanding of architectures as sets of critical and dynamic (and internal and external) parameter values subject to complex constraints and dependences.ł architecture scalability and evolvability. current architecture capabilities do not scale up to representing and evolving architecture models across multiple systems, multiple subcontractor levels, and multiple increments. they do not do well at such needed functions as change impact analysis or multiversion change propagation for largescale systems or systems of systems.ł architectural measures. in return for investments in architecture, one expects to gain predictable, quantifiable advantages in both system development and operation. this is particularly significant, as cost statistics show that architecture decisions account for greater proportions of overall cost as systems scale up in size and complexity. as architecture scales up, modularity becomes an increasingly crucial issue, for example. decisions in this area are among the most consequential yet least well understood in critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.reinvigorate dod software engineering research 125any major project. there are wellunderstood consequences for system trustworthiness (e.g., through the isolation of critical elements), producibility, flexibility, and adaptability. less modularity makes assurance more elusive, and it makes changes more costly and risky. the research challenge is to develop new techniques for architectural modeling and analysis that focus on various measures of modularity and interlinking among system elements. ł architectural modeling and evaluation. how can architectural models be expressed to support such diverse architecturelevel analyses prior to the full development of code? what kinds of analytics can be developed, including simulation, static analyses of various kinds, model checking, and other analyses. what kind of traceability support can be created to connect architectural representations to representations of requirements and other stakeholder concerns, on one hand, and to the more detailed concerns of system design, construction, and governance of development and change, on the other?ł architecture compliance. how can tools be developed (for increasingly complex architecture models and styles) to assist designers, developers, and requirements engineers in assessing, on an ongoing basis, the consistency of their models with architectural models? this is complicated by issues related to framework design, concurrency, and other issues. for example, a framework or application programming interface (api) may expect to receive an object not only of a particular type (e.g., ﬁfile handleﬂ) but also in a particular state (ﬁopenﬂ). this is not well addressed in current programming languages or architectural models.goal 1.2: facilitate architectureaware systems managementmanagement of architecture aligns with management of sourcing of components and infrastructure, with system development and evolution, and also with definition of mission processes (or business processes). such alignment, or congruence (which refers specifically to the relationship of architecture structure with organization structure),18 is essential to managing the coordinated scaling up and evolution of systems, organizations, and the mission processes supported. it is the itbusiness convergence that is a consideration for many corporate chief information officer (cio) organizations and that is also a key to success for many itenabled firms.19challenges associated with this goal are as follows:ł models of congruence. as architecture models are enriched, models for modeling and managing congruence become more complex and technically involved. ł enriched software supply chains. supplychain structure is only increasing in richness and complexity, and it is further complicated by the greater extent of intertwining of iterative processes across producer/consumer boundaries. what architecturelevel interventions could facilitate assessment, across a supply chain, of consistency of an evolving system with its defined architectural intent?ł ecosystems and infrastructure. the dod is unavoidably a participant in diverse commercial ecosystems. what architectural practices can assist in lessening the engineering risks associated with this involvement? for example, how can notions of technical software and system architecture be extended, adapted, or improved to enable better design and performance of the sociotechnical ecosystems that surround, develop, and use complex systems? ł incompatible hardware and software architectural relationships. as discussed in chapter 2, many systems architectures are organized into functionalhierarchy hardware relationships (also reinforced by 18 marcelo cataldo, james d. herbsleb, kathleen m. carley, 2008, sociotechnical congruence: a framework for assessing the impact of technical and work dependencies on software development productivity. proceedings of the second acmieee symposium on empirical software engineering and measurement, acm, kaiserslautern, germany, october 910, pp. 211.19 for examples at amazon and boeing, see nrc, 2007, summary of a workshop on softwareintensive systems and uncertainty at scale, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=11936. last accessed august 20, 2010. critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.126 critical code: software producibility for defensethe current revision of milstd881 on work breakdown structures) that are incompatible with layered serviceoriented software architectures. research is needed on how better to reconcile these.goal 1.3: facilitate architecturedriven developmentthe core practice of architecture depends on our ability to take conceptual structures and manifest them concretely as architectural designs before systems are actually constructed. this is the essential feedback loop to reduce the most fundamental of engineering risks in innovative software engineering. as noted in chapter 1, there is no physical limit regarding what can be accomplished at the architecture level to facilitate componentbased developmentšin a way that addresses concerns over modularity, assurance, measurement, and other considerations. challenges associated with this goal are as follows:ł architecture designs for particular domains. it is sometimes asserted that there are relatively few fundamental ﬁphylaﬂ of software, such as web services stacks, control systems of various kinds, distributed dataintensive systems, graphical userinteraction systems, etc. within each of these phyla are various established ecosystems and also more advanced custom designs. the dod can derive great benefits when it leads the advancement of ecosystem development for areas critical to its missionšit can directly assure attention to issues related to defense needs, rather than having to find ways to work around deficiencies in ecosystems established by others. ł emerging architectural concepts. software architecture capability continues to be enriched beyond the old model of static structural connections. recent developments include frameworks and plugins, dynamic and adaptive models, serviceoriented models, application frameworks, cloud and utility computing, virtualization, dataintensive models, and others. there continue to be emerging concepts that can be of benefit to complex dod quality attribute requirements. goal 1.4: facilitate architecture recoverymany dod systems do not have the benefit (and risk) of developing completely new architectures, but must find ways to provide continuity of service from legacy systems whose software is not well structured or documented (a different kind of risk). some initial approaches for recovering serviceoriented architectures for such legacy systems are emerging.20 further research and experience on such approaches would strengthen software producibility for the increasing number of dod brownfield software development situations.area 2. assurance: validation, verification, analysis of design and codechapter 4 elaborates the significance, role, and practice of software assurance. it also identifies a number of capabilities that, if better applied and/or augmented, could greatly enhance the ability of the dod to develop systems that are both highly capable and highly assuredšand to do so with acceptable costs and programmatic risk. as noted in chapter 1, the broadening role of systems and the consequent increase in hazards associated with very large systems combine to enhance the significance of assurance, while the challenge of assurance is increased due to the complexity of modern architectures and supply chains. on the other hand, the capacity to achieve assurance is enhanced by the recent important progress in modern programming languages, tools, modeling, and analysis capability. 20 two examples are the ibm vita approach (hopkins and jenkins, 2008, eating the it elephant: moving from greenfield development to brownfield, upper saddle river, nj: ibm press) and the cmusei smart approach (edwin j. morris, dennis b. smith, and soumya simanta, 2008, smart: analyzing the reuse potential of legacy components on a serviceoriented architecture environment, cmu/seitr2008tn008, pittsburgh, pa: carnegie mellon university). critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.reinvigorate dod software engineering research 127for new assurance technologies and practices, critical acceptance criteria must include scalability, which for many attributes (such as security and safety) usually also means composability, and usability by developers with minimal training. this greatly facilitates preventive use on a routine basis and thus enhances the ability of the dod to structure incentives back into the supply chain for developers to create evidence along with code products. as in the case of security, many interventions in technology and practice that relate to assurance are not in the form of separate tools, but rather in the form of enhancements to tools and practices already in place for other purposes. for example, assurance considerations affect architecture modeling (e.g., to detect information paths that are not supposed to be present), requirementsrelated models, traceability and team information management tooling, programming language design, runtime infrastructure design, and many other areas. goal 2.1: effective evaluation for critical quality attributesthis includes a wide range of technologies related to modeling, reverse engineering (ﬁprogram understandingﬂ), analysis, testing, inspection support, verification, and model checking, as well as support for managing the associated collected information and proof structures. this goal is addressed not only through the development of new techniques, but, as noted, also through the enhancement of practices and tools related to a diverse set of software engineering activities. in general, a mature software development shop will employ multiple techniques to support assurance and evaluation. this is based on the fact that there are many different quality attributes and kinds of defects.21 at a mature industry development organization, many different kinds of techniques and tools are used, including test frameworks, analyses with respect to different kinds of quality attributes, binary and source analysis, inspection support, metric tracking, and many others. this means that improvements in particular capabilities, when structured appropriately, can gracefully be inserted into practice.considerable further research is needed, however, to ensure scalability of such tradeoff analysis capabilitiesšthat optimizing on one assurance aspect does not overly penalize other quality attributes. for example, optimizing on security has been seen to adversely affect performance (via system overhead), reliability (via single points of failure), adaptability (via recertification delays), or usability (via authentication constraints and delays), particularly for complex netcentric systems of systems.goal 2.2: assurance for components in large heterogeneous systemsthe goal of composable assurance for largerscale systems is broad and complex. on the one hand, there are already a small number of composable analyses already in use (typing being a principal example). but, on the other hand, composable analyses have not yet emerged for critical security, performance, and other attributes. the pathway to such capability can include model design, theoretical and semantic research, programming language improvement (as is routinely done with major languages such as java, fortran, c++, c, and others), tool development, and so on. a research program that focuses on the goal would thus benefit by encompassing research approaches that address primarily a quality objective and feasibility criterion for potential adoption, but are not overly constrained with respect to specific manifestation in the process. one of the challenges is to improve assurance for data containment in componentoriented systems. this derives from the observation (in chapter 4) that in many large and heterogeneous software systems containing diversely sourced components (with corresponding diversity in levels of trust), the attack surface is ﬁat the api.ﬂ a particular concern is assuring that flows of data are as intended in the 21 see comments in chapter 4 regarding mitre™s common weakness enumeration (cwe) inventory for security and codesafety attributes. there are also diverse attributes related to adaptability and flexibility, for example, modularity measures, coupling, pattern compliance, interface attributes, etc.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.128 critical code: software producibility for defensearchitectural models. this is a deeply technical challenge, as are many of the other challenges related to assurance.goal 2.3: enhance the portfolio of preventive methods to achieve assurancein addition to the primarily evaluative techniques, interventions in development activities can greatly enhance the potential for accreting, on an ongoing basis in development, a body of evidence in support of assurance cases. for example, assurance considerations affect architecture modeling, requirementsrelated models, traceability and team information management tooling, programming language design, the design of runtime infrastructure, and many other areas.if research in this area is successful, the difference it will make will be evident in two ways. first, less work will produce higher assurance, in the form of stronger claims with respect to critical quality attributes, and, second, the balancing of effort in evidence production will shift from acceptance evaluation toward development, thus reducing engineering risk with respect to assurance. a wide range of technical ideas have emerged over the years in support of this concept, and this has also influenced language design. a crude way to think about this is that an existing language, together with additional specification information (e.g., types) and analysis capability (e.g., a type checker), can lead naturally to the nextgeneration programming of language in which the specification information becomes intrinsic and the analysis capability is integrated with the compiler, loader, and runtime system. additional specific challenges include the following:ł preventive methods also include ideas building on the concept of ﬁproofcarrying codeﬂ or more generally ﬁevidencecarrying code.ﬂ22ł a significant enabler of preventive techniques in development activity is the adoption of processes and practices that enhance assurance. examples include the lipner/howard security development lifecycle and gary mcgraw™s process.23 these processes can continue to be enhanced and refined as new practices, tools, and languages emerge.ł architectural building blocks can be enhanced to facilitate instrumentation and logging in systems to support realtime, nearrealtime, and forensic checking of consistency with models. it is important to note that not all significant attributes can be checked in this way, although sometimes modifications to architecture can expand the scope of what can be checked dynamically. ł develop architectures for containment such as sandboxing, process separation, virtual machines, and abstract machines. there is great opportunity to rethink basic concepts in systems software support, with a focus on achieving the simplifications that can lead to greater assurances regarding regulation of control and data flows among major components. the success of restricted ecosystems such as those evident on iphones and other restricted platforms suggests the possibility of progress in this area.ł employ development techniques including codevelopment of software, selective specifications (for functional and quality attributes), and evidence of verification (consistency) of the software code with the specifications and associated models. different techniques apply to different propertiesš what may be workable for particular quality attributes may not be useful for functional, performance, or deadline properties. most of these techniques rely on some use of explicit specifications. a goal is to reduce the extent of specification required, ultimately to fragmentary specifications that enable designers and developers to distinguish what is an intended truth from what may be an accidental truth. the intended truth may be a design commitment that can be relied upon. the accidental truth may be a consequence of a particular algorithm or infrastructure choice that needs to be subject to revision as 22 george c. necula and peter lee, 1998, safe, untrusted agents using proofcarrying code. lecture notes in computer sciencešmobile agents and security, london, uk: springerverlag, pp. 6191.23 see michael howard and steve lipner, 2006, the security development lifecycle, redmond, wa: microsoft press; also grady mcgraw, software security: building security in, boston: addisonwesley.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.reinvigorate dod software engineering research 129technology evolves. this codevelopment approach is intended to facilitate incremental and iterative development practices because it simultaneously creates software and assurancerelated evidence. ł the reality of enriched and diversified supply chains for software systems suggests that pervasive acceptance of preventive methods may not be fully achievable. for this reason, it is important to also address the challenge of improving a posteriori methods, including not only evaluative techniques, but also other approaches based on obfuscation and dynamic techniques.ł develop and use programming languages that enhance assurance. the experience of software developers is that language shifts occur at unpredictable times and for unpredictable reasons. nonetheless, these shifts are generally extensively influenced by research. for example, ada95, java, and c# were all influenced by the same set of ideas regarding types, safe storage management, concurrency, name space management, access management, and many other languages elements. the emerging generation of domainspecific languages and dynamic languages is now well established, providing developers with greater flexibility in development practice but also less safety than the established languages. research work could be accelerated to augment these languages with features that preserve the usability and flexibility while enhancing the potential for assurance. area 3. process support and economic models for assurance and adaptability chapters 2 and 4 both address issues related to process and assurance and suggest the following as research goals.goal 3.1: enhance process support for both agile and assured software developmentthis includes both product and process architectures based on identifying the parts of the product and process most needing agility or assurance, and organizing the architectures around them. for products, one way to do this is by encapsulating the major sources of change into modules to be handled by agile methods.24 examples of such sources of change are user interfaces, interfaces to independently evolving systems, or device drivers. for projects, one way to do this is to partition evolutionary development around stabilized highassurance development increments, while a parallel team is handling the change traffic and developing the specifications and plans for the next increment. it also includes further improvements in information management for teams and larger development organizations. areas of focus could beneficially include improved traceability particularly for formal and ﬁsemiformalﬂ information items, integration of models and analyses and simulation, and measurement support to facilitate iteration and evaluation (e.g., to dynamically identify and adapt to new sources of rapid change). goal 3.2: address supplychain challenges and opportunitiesas supply chains are enriched and diversified, there is an increasing potential benefit from tools that can manage a joint corpus of information and whose content and sharing is regulated according to a contractual relationship. enhancements of this kind can better support evidence production by producers to accelerate client acceptance evaluation. the enhancements can also better support intertwined iterations. such tools need to be reinforced by contractual provisions enabling visibility and measurability of development and risk management plans and progress vs. plans, both along a supply chain, and up and down the subcontractor chains.24 david parnas, 1978, ﬁdesigning software for ease of extension and contraction,ﬂ proceedings of the 3rd international conference on software engineering, ieee, atlanta, ga, may 1012, pp. 264277.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.130 critical code: software producibility for defensegoal 3.3: facilitate application of economic principles to decision makingan additional area of potential significance is the development of applicable economic models to guide decision making, for example, related to the interplay of architecture choices, component and ecosystems choices, supplychain choices, and attributes of cost, risk, schedule, and quality. as discussed in chapter 2, prioritizing features to enable timecertain development provides a strong proxy for economic valuebased management and decision making.goal 3.4: develop and apply policy guidance and infrastructure for conducting evidencebased dod milestone reviewsas also discussed in chapter 2, this task includes establishing the evidence of solution feasibility as a firstclass deliverable, reviewing evidencedevelopment plans, and tracking evidence development progress vs. plans via earned value management. it also requires research into which classes of processfocused evidence development (models, simulations, prototypes, benchmarks, exercises, instrumentation, etc.) are best suited for which classes of system elements.goal 3.5: enhance process support for integrated definition and development of system hardware, software, and human factors requirements and architectural solutionstoo often, system architectures are driven by hardware relationships that overly constrain software and human factors solutions. examples of approaches are ﬁsoft systems engineering,ﬂ systems architecting, coevolution, incremental iterative development (iid) models based on spiral development, and brooks™s design processes and patterns.25area 4. requirements the challenges for requirements are, in many respects, similar to those of architecture. how to achieve early validation? how to express the information that is gathered from stakeholders concerning both functional requirements and quality attributes? how to achieve traceability and model consistency that effectively links requirements with architecture and assurance?as noted in the previous chapters, requirements are only occasionally fully established at the outset of the development of an innovative software system. more often, there are early constraints on quality attributes, definitions of the overall scope of function and interlinking, and a few other ﬁshallﬂ or ﬁmusthaveﬂ constraints. many of the other elements that eventually become manifest as features or quality attributes are in fact the result of early iterations with stakeholders, and many of these are informed by the improved understanding of both the technological and operational environments as they evolve. in other words, requirements engineering is an ongoing activity throughout development. for longlived systems, as noted in the 2006 software engineering institute (sei) report ultralargescale systems, requirements engineering is ongoing throughout the lifetime of the system. 25 soft systems engineering (see peter checkland, 1981, systems thinking, systems practice, hoboken, nj: wiley); systems  architecting (see eberhardt rechtin, 1991, systems architecting: creating & building complex systems, englewood cliffs, nj:  prentice hall), coevolution (see mary lou maher, josiah poon, and sylvie boulanger, 1996, ﬁformalizing design exploration as coevolution: a combined gene approach,ﬂ pp. 330 in advances in formal design methods for cad, john s. gero and fay sudweeks, eds., london, uk: chapman and hall), the incremental commitment model upgrade of spiral development (nrc, richard w. pew and anne s. mavor, eds., 2007, humansystem integration in the system development process: a new look, washington, dc: national academies press, available online at http://books.nap.edu/catalog.php?recordid=11893), and brooks™s design processes and patterns (see fred brooks, 2010, the design of design: essays from a computer scientist, new york, ny: addisonwesley).critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.reinvigorate dod software engineering research 131goal 4.1: expressive models and supporting toolsa feature of modern requirements methodology is the capture of scenarios and use cases and the expression of these using effective but mostly informal notations. for agile or featuredriven developments, attention is addressed to the granularity of featuring, so to speak, because that becomes both the basis of priority setting (ﬁabove the lineﬂ) and the metric of progress (ﬁvelocityﬂ or ﬁburn downﬂ). for innovative large systems, there is more focus on capturing the model in a sufficiently precise form to support progress measurement and acceptance evaluation. regardless of the approach, however, there are common core technical challenges, which are to improve our ability to express requirementsrelated models (in the sense of unified modeling language (uml) scenarios and use cases), to reason about those models (in the sense of the massachusetts institute of technology™s alloy), and to facilitate traceability with respect to architecture and implementation (correspondence measures). requirements engineering is fundamentally about the transition from informal human expression to explicit structured representations. any incremental improvement in formality that doesn™t compromise overall expressiveness or efficiency of operation has the potential to make a big difference with respect to these goals.related to this goal is the development of improved domainspecific models and methods that pertain to critical defense domains such as control systems, command and control, largescale information management, and many others.goal 4.2: support traceability and early validationtraceability is more readily achieved when the featuredriven model is adopted, but this is not always readily applicable to defense systems. research on requirements expression will result in improvements to models, tooling, and early validation practices (e.g., prototyping and simulation). as part of this effort, it is essential to also address traceability issues, because these have a profound influence on assurance and validation generally. goal 4.3: process support for stakeholder engagement and model developmentstakeholders in large projects may come from diverse perspectives and may have diverse interests. the requirements can often appear to be a negotiation among stakeholders regarding the significance of various functional features and quality attributes. this creates a challenge of avoiding both overcommitment (e.g., through negotiation) to particular characteristics as well as undercommitment. what modeling mechanisms, processes, and tools can be developed to assist stakeholders in identifying goals and models, and in managing not just what is committed to, but also how much commitment is made? this is particularly critical in incremental and iterative development projects.area 5. language, modeling, coding, and toolsas noted in the previous chapters, programming languages and associated capabilities have a considerable influence on the major factors identified in this reportšarchitecture, assurance, process, and measurement. for example, programming language improvements have influence on the ability of architects to achieve goals related to system structure and modularity. more generally, programming languages are the medium by which human developers convey their intent both to the computer and to other developers. as such, a programming language both constrains what a developer can say and at the same time encourages particular styles of expression. as noted in the previous chapters, programming language design has considerable influence on the major factors identified in this reportšarchitecture, assurance, process, and measurement. for example, programming language improvements have influence on the ability of architects to enforce goals related to system structure and modularity. modularity is much more than a matter of control and data flow. there are abstractions related to objects, types, and critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.132 critical code: software producibility for defenseactions that are increasingly supported in modern languages, and these enable developers to express domain concepts more directly in program text. they also enable architects to render their abstract models for system modular structures more directly into the explicit structure of programs.modularity is much more than a matter of control and data flow; there are abstractions related to objects, types, and actions that are increasingly supported in modern languages, and these not only enable developers to express domain concepts more directly in program text26 but also enable architects to render their abstract models for system modular structures more directly into the explicit structure of programs. goal 5.1: enhance the expressiveness of programming language to address  current and emerging challengesdespite many declarations of success, the evolution of programming languages continues, and it is driven by strong demand for improvements from developers seeking greater levels of expressiveness (e.g., through direct expression of concepts such as higherorder functions,27 deterministic parallelism, atomicity, data permissions, and so on), improved ability to support particular domains (either through direct expression as intrinsics or through the ability to provision appropriate libraries and frameworks), improved flexibility for developers (e.g., dynamic languages that compromise less static checking for a more rapid iterative development model, but with more risk of unwanted runtime errors), improved a priori assurance (e.g., through the simultaneous development of code, specifications, and associated proofs for assurance), and improved access to scalable performance (e.g., through intrinsics such as generate/mapreduce that support dataintensive computing in microprocessor clusters). goal 5.2: enhance ability to exploit modern concurrency, including shared memory multicore and scalable distributed memoryfor the past 30 years, as a consequence of the steady improvements in processor design, software developers have been given a doubling in performance every year and a half, adding up to a millionfold improvement in three decades. over that period, the same code ran faster on the new chips. in the past few years, processor clock speeds have topped out; there are now multiple processors on a chip, and chip designers continue to provide the expected performance improvement, but only in a potential way and accessible only to those software developers who can harness the power of multiple processors. suddenly, everything has to be ﬁdone by committeeﬂšby multiple threads of control coordinating together to get the work done. it is said that moore™s law has given way to amdahl™s law. to make matters more difficult, the ability of multiple threads to access shared state in memory does not scale 26 in the early days of fortran, for example, the only data types in the language were numbers and arrays of various dimensionalities. any program that manipulated textual data, for example, needed to encode the text characters, textual strings, and any overarching paragraph and document structure very explicitly into numbers and arrays. a person reading program text would see only numerical and array operations, because that was the limit of what could be expressed in the notation. this meant that programmers needed to keep track, in their heads or in documentation, of the nature of this representational encoding. it also meant that testers and evaluators needed to assess programs through this (hopefully) same layer of interpretation. with modern languages (including more modern fortran versions), these structures can be much more directly expressedšcharacters and strings are intrinsic in nearly all modern languages. this is a simple illustrative example, but the point remains: there are concepts and structures in domains significant to defense that, in modern languages, must be addressed through similar representational machinations. this is a part of the ﬁendless value spiralﬂ argument of chapter 1, and it explains why we should not expect any plateau in the evolution of programming languages, models, and other problemrelevant expressive notations. indeed, it is why language names such as ﬁfortranﬂ and ﬁadaﬂ have the staying power of strong brands, even when the specific languages to which they refer are evolving quite rapidly (for example, ada83 to ada95 and thence to ada 2005). 27 an example is microsoft™s f#, which builds on two decades of work on advanced functional languages such as standard ml and haskell. another example is sun™s fortress language, which builds on a combined heritage of functional programming, deterministic parallelism, and numerical computation.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.reinvigorate dod software engineering research 133upšit must eventually be supplanted by distributed models, with information shared using message passing. this hybrid approach, combined with a distributed approach to scalable storage, is the reality of many modern highperformance data centers.28software developers, language designers, and tool developers are still struggling to figure out how to harness the concurrency in a way that works well for software development. what are the correct abstractions? what are suitable concepts for data structures? how can assurance be achieved when programs operate in nondeterministic fashion? this provisioning of modern computing power is a major challenge for language designers and tool designers.goal 5.3: enhance developer productivity for new development and evolutionas noted above, languages enhanced with models and tools often merge into new languages that incorporate the model concepts directly in the language design. but there is a growing suite of tool capabilities that are conceptually separate from language, and the delivery of these capabilities is a significant influence on developer and team productivity and on software producibility generally. modern tools such as the open source eclipse (created by ibm29) and microsoft™s visual studio environment for ﬁmanaged codeﬂ provide rich features to support application development generally. they also have tailored support for development within certain ecosystems, such as the visual studio support for web applications developed within the microsoft asp.net framework. individual developer tools are often linked with team capabilities, which include configuration management of code and related artifacts, defect and issue tracking and linking, build and test support, and management of team measures and processes. this linkage greatly empowers small teams and, increasingly, larger development organizations.area 6. cyberphysical systemsdod systems are increasingly operating in largescale, networkcentric configurations that take input from many remote sensors and provide geographically dispersed operators with the ability to interact with the collected information and to control remote effectors. in circumstances where the presence of humans in the loop is too expensive or their responses are too slow, these socalled cyberphysical  systems must respond autonomously and flexibly to both anticipated and unanticipated combinations of events during execution. moreover, cyberphysical systems are increasingly being networked to form longlived systems of systemsšand even ultralargescale systems30šthat must run unobtrusively and largely autonomously, shielding operators from unnecessary details (but keeping them apprised so they can react during emergencies), while simultaneously communicating and responding to missioncritical information at heretofore infeasible rates.cyberphysical systems are increasingly critical in defense applications of all kinds and at all levels of scale, including distributed resource management in shipboard defense systems, coordinating groups of unmanned air vehicles, and controlling lowpower sensors in tactical urban environments. these are systems with very close linkage of hardware sensors and effectors with software control. they are often structured as control systems, but also can involve multiple complex interacting control systems, such as in deconflicting multiple callforfire requests in a crowded battlespace consisting of joint services and coalition partners.one critical area of concern is the creation and validation of the cyberphysical stack. for example, 28 these issues are the focus of a forthcoming report from the national research council, the future of computing performance: game over or next level?, samuel fuller and lynette millett, eds., washington, dc: national academies press, forthcoming.29 siobhan o™mahony, fernando cela diaz, and evan mamas, 2005, ﬁibm and eclipse (a),ﬂ harvard business school case 906007, cambridge, ma: harvard university press.30 software engineering institute, 2006, ultralargescale systems: the software challenge of the future, pittsburgh, pa: carnegie mellon university. available online at http://www.sei.cmu.edu/library/assets/ulsbook20062.pdf. last accessed august 20, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.134 critical code: software producibility for defensehow to evolve the development of distributed realtime and/or embedded systems from a cottage craft that does not generally yield scalable or readily assurance solutions to a more robust approach guided by modelintegrated computing, domainspecific languages and analysis tools, and controltheoretic adaptation techniques. this is a significant challenge for language and platform design, ecosystem development, tool design, and practices.31 another challenge facing the dod is how to routinize and automate more of the development of embedded cyberphysical control systems. there are particular challenges related to scalability, predictability, and evolvability of systems. assurance is also a major issue, and it is exacerbated by the lack of ability to reliably connect models with code and with the various components in the current generation of embedded software stack, which are typically optimized for time/space utilization and predictability, rather than ease of understanding, analysis, composition, scalability, and validation.yet another challenge facing dod cyberphysical systemsšparticularly netcentric cyberphysical systemsšis how to handle variability and control adaptively and robustly. cyberphysical systems today often work well as long as they receive all the resources for which they were designed in a timely fashion, but fail completely under the slightest anomaly. there is little flexibility in their behavior, that is, most of the adaptation is pushed to end users or administrators. instead of hard failure or indefinite waiting, what netcentric cyberphysical systems require is either reconfiguration to reacquire the needed resources automatically or graceful degradation if they are not available.goal 6.1: accelerate ecosystem development for cyberphysical systemstoday, it is too often the case that substantial effort expended to develop cyberphysical systems focuses on either (1) building ad hoc solutions based on tedious and errorprone lowlevel platforms and tools or (2) cobbling together functionality missing in offtheshelf realtime and embedded operating systems and middleware. as a result, subsequent composition and validation of these ad hoc capabilities is either infeasible or prohibitively expensive. one reason why redevelopment persists is that it is still often relatively easy to pull together a minimalist ad hoc solution, which remains largely invisible to all except the developers and testers. unfortunately, this approach yields brittle, errorprone systems and substantial recurring downstream ownership costs, particularly for complex and longlived networkcentric dod systems and largerscale systemsofsystems.one of the most immediate goals is therefore to accelerate ecosystem development for cyberphysical systems. there has been considerable exploration of this area in a multiagency setting under the auspices of the nitrd coordination activity (see box 1.5), and there are benefits to linking it with other efforts related to software producibility. there are opportunities to exploit and advance modern language concepts, innovative operating system and middleware ideas, scheduling and resource management techniques, and code generation capabilities. achieving this goal will require new cyberphysical system software architectures whose component functional and qualityofservice (qos) properties can be expressed with sufficient precision (e.g., via the use of modelintegrated computing techniques and domainspecific languages and tools) that they can be predictably assembled with each other, leaving less lowerlevel complexity for application developers to address and thereby reducing system development and ownership costs. in particular, cyberphysical system ecosystems must not simply build better device drivers, operating system schedulers, 31 this challenge was discussed in the committee™s 2007 workshop report. see nrc, 2007, summary of a workshop on softwareintensive systems and uncertainty at scale, washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=11936. last accessed august 20, 2010. it has also been explored in the nrc report software for dependable systems: sufficient evidence? see nrc, daniel jackson, martyn thomas, and lynette i. millett, eds., 2007, software for dependable systems, sufficient evidence? washington, dc: national academies press. available online at http://www.nap.edu/catalog.php?recordid=11923. last accessed august 20, 2010. it has been the subject of a series of workshops under the auspices of the nitrd hcss area sponsored by nsf and other agencies. for more information see http://www.nitrd.gov/subcommittee/hcss.aspx. last accessed august 20, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.reinvigorate dod software engineering research 135or middleware brokers in isolation, but rather integrate these capabilities together and deliver them to applications in ways that enable them to achieve finegrained tradeoffs between key qos properties, such as throughout, latency, jitter, scalability, security, and reliability. key r&d breakthroughs needed to meet the goal of accelerating ecosystem development for cyberphysical systems involve devising new languages and platforms that enable users and operators to clearly understand the qos requirements and usage patterns of software components so it becomes possible to analyze whether or not these requirements are being (or even can be) met and to aggregate these requirements, making it possible to form decisions, policies, and mechanisms that can support effective global management in netcentric environments. meeting these needs will require flexibility on the parts of both the application components and the cyberphysical system infrastructure ecosystem used throughout dod systems. goal 6.2: develop architectures and software frameworks to support embedded applicationsembedded cyberphysical systems can operate robustly in harsh environments through careful coordination of a complex network of sensors and effectors. given the increasing complexity of emerging dod embedded cyberphysical systems, such finetuned coordination is ordinarily a nearly impossible task, both conceptually and as a software engineering undertaking. modelbased software development uses models of a system to capture and track system requirements, automatically generate code, and semiautomatically provide tests or proofs of correctness. models can also be used to build validation proofs or test suites for the generated code. modelbased software development removes much of the need for finetuned coordination, by allowing programmers to read and set the evolution of abstract state variables hidden within the physical system. for example, a program might state, ﬁproduce 10.3 seconds of 35% thrust,ﬂ rather than specify the details of actuating and sensing the hardware (e.g., ﬁsignal controller 1 to open valve 12,ﬂ and ﬁcheck pressure and acceleration to confirm that valve 12 is openﬂ). hence a modelbased program constitutes a highlevel specification of intended state evolutions. to execute a modelbased program an interpreter could use a model of a controlled plant to continuously deduce the plant™s state from observations and to generate control actions that move the plant to specified states.achieving the goal of modelbased embedded software development requires new expressive languages for specifying intended state evolutions and plant behavior, automated execution methods for performing all aspects of finegrained coordination, and software architectures and frameworks for pervasive/immersive sensor networks. key r&d breakthroughs needed to meet the goal of developing architectures and software frameworks to support embedded applications include closing the consistency gap between model and code, preserving structural design features in code, translating informal requirements into formal requirements, tracing requirements into implementation, integrating disparately modeled submodels, and enriching formalisms that support qos properties, as well as techniques that support rapid reconfiguration and reliability with unreliable components.goal 6.3: develop and validate technologies that support both variability and control in netcentric cyberphysical systemsas dod cyberphysical systems become increasingly interconnected to form netcentric systems of systems it is becoming clear that (1) different levels of service are possible and desirable under different conditions and costs and (2) the level of service in one property must be coordinated with and/or traded off against the level of service in others to achieve the intended mission results. to date, little work has focused on techniques for controlling and trading off the overall behavior of these integrated netcentric cyberphysical systems. another key goal is therefore to develop and validate new technologies that support both variability and control in netcentric cyberphysical systems.achieving this goal will require devising new adaptive and reflective software technologies, recogcritical code: software producibility for defensecopyright national academy of sciences. all rights reserved.136 critical code: software producibility for defensenizing that not all requirements can be met all of the time, yet still ensuring predictable and controllable endtoend behavior. in adaptive software technologies, the functional and qosrelated properties of cyberphysical software can be modified either statically (e.g., to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and minimize hardware/software infrastructure dependencies) or dynamically (e.g., to optimize system responses to changing environments or requirements, such as changing component interconnections, power levels, cpu/network bandwidth, latency/jitter, and dependability needs). reflective software technologies go further to permit automated examination of the capabilities they offer and automated adjustment to optimize those capabilities. reflective techniques make the internal organization of systemsšas well as the mechanisms used in their constructionšboth visible and manipulable for application and infrastructure programs to inspect and modify at runtime. reflective technologies thus support more advanced adaptive behavior and more dynamic strategies keyed to current circumstances, that is, necessary software adaptations can be performed autonomously based on conditions within the system, in the system™s environment, or in system qos policies defined by operators. key r&d breakthroughs needed to meet the goal of developing and validating adaptive and reflective software for netcentric cyberphysical systems involve investigating ways to make such modifications dependably (e.g., while meeting stringentšoften conflictingšendtoend qos requirements) while simultaneously ensuring that the system functional requirements are met.area 7. humansystems integrationit is significant that most largescale complex enterprise systems include fallible humans as constituent elements, but there has been a lack of design practices, including architecture concepts and development processes, that account for the ways in which humans integrate into systems as participants. humansystems integration (hsi) is about much more than the colors of pixels and the design of graphical user integration frameworks. the presence of humans in a system, such as pilots in an airplane, fundamentally affects the design and architecture of that system.this issue was the subject of a separate nrc report32 and is not elaborated upon here except to emphasize some of its softwarerelated recommendations:ł conduct a research program with the goal of revolutionizing the role of end users in designing the system they will use.ł conduct research to understand the factors that contribute to system resilience, the role of people in resilient systems, and how to design more resilient systems.ł refine and coordinate the definition of a systems development process that concurrently engineers the system™s hardware, software, and human factors aspects, and accommodates the emergence of hsi requirements, such as the incremental commitment model.ł research and develop shared representations to facilitate communication across different disciplines and lifecycle phases.ł research and develop improved methods and testbeds for systemsofsystems hsi.ł research and develop improved methods and tools for integrating incompatible legacy and externalsystem user interfaces.32 see nrc, 2007, humansystem integration in the system development process: a new look, washington, dc: national academies press, available online at http://www.nap.edu/openbook.php?recordid=11893. last accessed august 20, 2010.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.reinvigorate dod software engineering research 137summary findings and recommendationsfinding 52: technology has a significant role in enabling modern incremental and iterative software development practices at levels of scale ranging from small teams to large distributed development organizations.recommendation 51: the dod should take immediate action to reinvigorate its investment in software producibility research. this investment should be undertaken through a diversity of research programs across the dod and should include academia, industry labs, and collaborations.recommendation 52: the dod should take action to undertake dodsponsored research programs in the following areas identified as critical to the advancement of defense software producibility: (1) architecture modeling and architectural analysis; (2) assurance: validation, verification, analysis of design and code; (3) process support and economic models for assurance and adaptability; (4) requirements; (5) language, modeling, coding, and tools; (6) cyberphysical systems; and (7) humansystems integration. critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.appendixescritical code: software producibility for defensecopyright national academy of sciences. all rights reserved.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.141appendix abriefers to the committeeseptember 2728, 2006, first committee meetingannmarie bunts, lockheed martin systems integrationgrady campbell, software engineering institutelarry druffel, scra (retired)robert gold, office of the deputy under secretary for science and technology/information systemsronald t. kadish, booz allen hamiltonjames larus, microsoft researchrobert nesbit, mitre center for integrated intelligence systemslinda northrop, software engineering institutetom rodgers, lockheed martin walker royce, ibmandre van tilborg, office of the deputy under secretary for science and technology/information systemsjanuary 17, 2007, workshop on uncertainty at scalecynthia andres, three rivers institutekristen j. baldwin, office of the under secretary of defense, acquisition, technology, and logistics kent beck, three rivers institutekris britton, national security agency, center for assured softwaremary ann davidson, oracle corporationjoe jarzombek, department of homeland securitypatrick lardieri, lockheed martingary mcgraw, cigital, inc.richard w. selby, northrop grummanalfred spector,1 google, inc.1as of november 2007. at the time of the workshop, dr. spector was an independent consultant.critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.142 critical code: software producibility for defensejohn vu, boeingwerner vogels, amazon.comapril 24, 2007, third committee meetingthomas blann, office of the director of operational test and evaluationseptember 1617, 2008, fourth committee meetingkristen baldwin, acting director, systems and software engineering, odusd(a&t)dan reed, director of scalable and multicore computing strategy, microsoftcritical code: software producibility for defensecopyright national academy of sciences. all rights reserved.143appendix bbiosketches of members of the committeewilliam l. scherlis, chair, is a professor in the school of computer science at carnegie mellon university (cmu). he is the founding director of cmu™s phd program in software engineering and director of cmu™s institute for software research (isr). his research relates to software assurance, software evolution, and technology to support software teams. dr. scherlis joined the cmu faculty after completing a phd in computer science at stanford university, a year at the university of edinburgh (scotland) as a john knox fellow, and an a.b. at harvard university. he was the lead principal investigator of the 4year high dependability computing project (hdcp), in which cmu led a collaboration of five universities to help nasa address longterm software dependability challenges. dr. scherlis is involved in a number of activities related to technology and policy, recently testifying before congress on innovation and information technology, and, previously, on roles for a federal chief information officer (cio). he interrupted his career at cmu to serve at the defense advanced research projects agency (darpa) for 6 years, departing in 1993 as senior executive responsible for coordination of software research. while at darpa he had responsibility for research and strategy in computer security, aspects of highperformance computing, information infrastructure, and other topics. dr. scherlis was a member of the national research council (nrc) study committee on cybersecurity and the darpa information science and technology study group (isat). he recently completed chairing an nrc study on information technology, innovation, and egovernment. he has led or participated in national studies related to cybersecurity, crisis response, analyst information management, department of defense software management, and health care informatics infrastructure. he has been an advisor to major information technology (it) companies. he has served as program chair for a number of technical conferences, including the acm foundations of software engineering (fse) symposium. he has more than 75 scientific publications.robert f. behler is a senior vice president and general manager in the mitre corporation command and control center. the center serves mitre™s department of defense sponsors and focuses on creating a joint command, control, and communications system. mr. behler leads the center™s work for department of defense sponsors. before joining mitre in april 2006, mr. behler was general manager of precision engagement at johns hopkins university™s applied physics laboratory. in this position he supervised more than 250 scientists and engineers working on advanced command, control, intelligence, surveillance, and reconnaissance (c2isr) programs for the department of defense. under mr. critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.144 critical code: software producibility for defensebehler™s leadership, the precision engagement organization turned new and emerging technologies into transformational operational capabilities. mr. behler retired from the air force as a major general in 2003. during his distinguished 31year career, he accumulated extensive experience managing and developing advanced command, control, communications, computers, intelligence, surveillance, and reconnaissance (c4isr) technologies at all levels. before retiring, mr. behler was commander of the air force c2isr center at langley air force base, where he was principal c2isr advisor to the secretary and chief of staff of the air force. prior to that, he served as deputy commander of nato joint headquarters north in stavanger, norway, and was the senior u.s. military officer in scandinavia. he has also served as director of command, control, communication, computers, and intelligence at the u.s. strategic command at offutt air force base and as chief of the u.s. air force senate liaison office. mr. behler entered the air force in 1972 as a distinguished graduate of the air force reserve officer training corps program at the university of oklahoma. mr. behler received his bachelor™s and master™s degrees in aerospace engineering from the university of oklahoma in 1970 and 1972, respectively. he is a graduate of the u.s. air force test pilot school at edwards air force base and was a national security fellow at harvard university™s john f. kennedy school of government in 1990. he received a master™s degree in business administration from marymount university in 1991. he is an associate fellow of the society of experimental test pilots and a member of the armed forces communications and electronics association.barry w. boehm is trw professor of software engineering and founding director emeritus of the center for systems and software engineering at the university of southern california. he is also director of research of the dodstevensusc systems engineering research center and codirector of the uscchinese academy of sciences joint laboratory for software engineering. his contributions to the field include the constructive cost model (cocomo); the spiral model of the software process; the theory w (winwin) approach to and tools for software management and requirements determination. between 1989 and 1992, he served within the u.s. department of defense as director of the darpa information science and technology office and as director of the ddr&e software and computer technology office. he worked at trw from 1973 to 1989, culminating as chief scientist of the defense systems group, and at the rand corporation from 1959 to 1973, culminating as head of the information sciences department. he was a programmeranalyst at general dynamics between 1955 and 1959. he has served on the board of several scientific journals, including the ieee transactions on software engineering, ieee computer, ieee software, acm computing reviews, automated software engineering, software process, and information and software technology. he has served as chair of the aiaa technical committee on computer systems, chair of the ieee technical committee on software engineering, and as a member of the governing board of the ieee computer society. he has served as chair of the air force scientific advisory board™s information technology panel and chair of the board of visitors for the cmu software engineering institute. he is a fellow of the leading professional societies in computing (acm), aerospace (aiaa), electronics (ieee), and systems engineering (incose), and a member of the national academy of engineering. dr. boehm received his b.a. degree from harvard in 1957; his m.s. and ph.d. degrees from the university of california, los angeles, in 1961 and 1964, all in mathematics; and an honorary sc.d. degree from the university of massachusetts in 2000 in computer science. lori a. clarke is a professor of computer science at the university of massachusetts, amherst, and codirector of the laboratory for advanced software engineering research. she is an acm fellow and a board member of craw. she is a former ieee distinguished visitor, acm national lecturer, ieee publication board member, associate editor of acm toplas and ieee tse, member of the ccr nsf advisory board, acm sigsoft secretary/treasurer, vicechair and chair, vicechair of cra, and cochair of craw, as well as a 1990 recipient of the university of massachusetts chancellor™s medal and a 1993 recipient of a university faculty fellowship. dr. clarke has worked in the area of software engineering, particularly on software analysis and testing for many years. she was one of the primary developers of symbolic execution, a technique used to reason about the behavior of software systems and critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.appendix b 145for selecting test data, and she has made contributions in the areas of software architecture and object management. recently her work has focused on analysis of concurrent systems. with colleagues, she developed flavers, a static analysis tool that uses dataflow analysis to verify userspecified properties of concurrent systems, and propel, a system that complements flavers and other model checking systems by helping users elucidate the details of the properties to be proven. she received her b.a. in mathematics (1969) from the university of rochester and her ph.d. degree in computer science (1976) from the university of colorado.michael a. cusumano is the sloan management review distinguished professor of management at the massachusetts institute of technology™s sloan school of management, with a joint appointment in mit™s engineering systems division. he received a b.a. degree from princeton in 1976 and a ph.d. from  harvard in 1984, and completed a postdoctoral fellowship in production and operations management at the harvard business school during 19841986. he has received two fulbright fellowships as well as a japan foundation fellowship for study at the university of tokyo. he is currently a director of patni computer systems, one of the largest it services and custom software development firms based in india (nyse: pti), and eliza corporation, a specialist in speech recognition software applications, focused on healthcare. he is on the advisory board of fixstars corp., a japanese developer of highperformance computing applications. professor cusumano was named one of the most influential people in technology and it by silicon.com in 2009. he has consulted for approximately 100 firms and organizations around the world and is the author or coauthor of 9 books. his newest book, staying power: six enduring principles for managing strategy and innovation in an uncertain world (2010), is based on the 2009 clarendon lectures in management studies at oxford university. the software business (2004) was named one of the top business books of the year by steve lohr of the new york times. the international bestseller microsoft secrets (1995, with richard selby) has been translated into 14 languages. competing on internet time: lessons from netscape and its battle with microsoft (1998, with david yoffie) was named a top10 book of the year by business week. in addition, he has published platform leadership: how intel, microsoft, and cisco drive industry innovation (2002, with annabelle gawer); thinking beyond lean: multiproject management at toyota and other companies (1998, with kentaro nobeoka); strategic thinking for the next economy (2001, with costas markides); japan™s software factories (1991); and the japanese automobile industry (1985).mary ann davidson is the chief security officer at oracle corporation, responsible for oracle product security, as well as security evaluations, assessments, and incident handling. she represents oracle on the board of directors of the information technology information security analysis center (itisac), and the editorial advisory board of sc magazine. she was named one of information security™s top five ﬁwomen of visionﬂ and is a 2004 fed100 award recipient from federal computer week. she has served on the defense science board and is a member of the center for strategic and international studies cyber commission for the 44th president. she was recently named to the information systems security association hall of fame. she has also testified on the issue of cybersecurity to the u.s. house of representatives (energy and commerce committee, armed services committee, and homeland security subcommittee on cybersecurity, emerging threats and science and technology) and the u.s. senate (commerce, science and technology committee). ms. davidson has a b.s.m.e. from the university of virginia and an m.b.a. from the wharton school of the university of pennsylvania. she has also served as a commissioned officer in the u.s. navy civil engineer corps, during which she was awarded the navy achievement medal.larry druffel is director emeritus and visiting scientist at the software engineering institute at carnegie mellon university, where he was the director from 1986 to 1996.  from 1996 to 2006, he was president and ceo of scra, a public, nonprofit research and development corporation engaged in the application of advanced technology. he is a member of the board of directors of teknowledge corporation. he was vice president for business development at rational software from 1983 to 1986 and served on the board of directors of rational from 1986 to 1995. dr. druffel was on the faculty at the usaf academy. critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.146 critical code: software producibility for defensehe later managed research programs in advanced software technology at darpa. he was founding director of the ada joint program office, and then served as director of computer systems and software (research and advanced technology) in the office of the secretary of defense. he is the coauthor of a computer science textbook and over 35 professional papers, including the chapter titled ﬁinformation warfareﬂ for the acm fiftieth anniversary book beyond computing. he has a b.s. in electrical engineering from the university of illinois, an m.sc. in computer science from the university of london, and a ph.d. in computer science from vanderbilt university. dr. druffel is a fellow of the ieee, and a fellow of the acm. he has served on engineering advisory boards of the university of south carolina, clemson, and embry riddle university.  dr. druffel chaired the af science advisory board study on information architecture and cochaired the defense science board study on acquiring defense software commercially. he led the defensive information warfare panel for the afsab ﬁnew world vistas.ﬂ he has served on numerous afsab, dsb, and nrc studies dealing with the use of information technology, including the national research council study engineering challenges to the longterm operation of the international space station.russell frew is the vice president, cto in the $17 billion lockheed martin, electronic systems business unit (es). in this capacity he oversees both technology development and the program performance of over 18,000 engineers and 1400 programs. he is frequently called upon to lead engineering assistance teams that engage major programs across the corporation. in his capacity as the chief technical officer, he is also responsible for technology strategy and the investment plan. additionally, mr. frew has executive responsibility for the lm advanced technology laboratories in cherry hill, nj. from 1999 to late 2003, mr. frew was on special assignment for the corporation. his duties made him the focal point between es and aeronautics business areas. in this capacity he led major program teams working issues on the f22™s avionics, the f35 joint strike fighter™s mission system, and the f16 advanced mission computer. as part of the cots revolution, mr. frew authored and led the lockheed martin proven path electronics program. originally conceived as an lm strategy for jsf, proven path evolved into an engineering discipline now being widely applied across fighter aircraft, army missiles, and navy ships. prior to his appointment as vice president, advanced technology for ms2 in 1999, frew spent 18 months as vice president, technology for government electronics systems (ges) in moorestown, nj. while with ges he managed technology programs such as combats, which successfully introduced modular, objectoriented software for modern ship combat systems. from june 1996 to march 1997, frew was the managing director of the lockheed martin corp. advanced technology laboratoriesšan applied research facility that develops advanced technology hardware and software solutions for varied defense applications. prior to 1996, mr. frew managed the general electric aerospace, artificial intelligence lab for 8 years. there he oversaw activities in antisubmarine warfare, attack helicopter sensorbased reasoning, expert systems, and realtime embedded architectures. he succeeded in getting the sea shadow prototype stealth ship operational and then used this platform to test numerous technology concepts in a fully operational environment at sea with the u.s. navy. in 1985 the defense advanced research projects agency (darpa) selected him as one of the original program managers on the national strategic computing program darpa initiated to meet japan™s fifth generation challenge. mr. frew holds graduate and undergraduate degrees. he has served as a study panel member at the national academy of sciences and on the university of pennsylvania school of engineering and applied science advisory board. he additionally spent 4 years as an isat board member and study lead for the director of darpa. mr. frew currently serves as the chairman of the board for technology ventures corp. (tvc) and formerly served as a director on the board of the isx corporation. a lifelong pilot, mr. frew holds a commercial pilot™s license with ratings in numerous single and multiengine aircraft. james larus, director of the extreme computing group (xcg) in microsoft research, has been an active contributor to the programming languages, compiler, and computer architecture communities. he has published many papers and served on numerous program committees and nsf and nrc panels. dr. larus became an acm fellow in 2006. he joined microsoft research as a senior researcher in 1998 critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.appendix b 147to start and, for 5 years, led the software productivity tools (spt) group, which developed and applied a variety of innovative techniques in static program analysis and constructed tools that found defects (bugs) in software. this group™s research has had considerable impact on the research community, as well as being shipped in microsoft products such as the static driver verifier and fx/cop and other, widely used internal software development tools. dr. larus then became the research area manager for programming languages and tools and started the singularity research project, which demonstrated that modern programming languages and software engineering techniques could fundamentally improve software architectures. subsequently, he helped start xcg, which is developing the hardware and software to support cloud computing. before joining microsoft, larus was an assistant and associate professor of computer science at the university of wisconsinmadison, where he published approximately 60 research papers and coled the wisconsin wind tunnel (wwt) research project with professors mark hill and david wood. wwt was a darpa and nsffunded project that investigated new approaches to simulating, building, and programming parallel sharedmemory computers. larus™s research spanned a number of areas, including new and efficient techniques for measuring and recording executing programs™ behavior, tools for analyzing and manipulating compiled and linked programs, programming languages for parallel computing, tools for verifying program correctness, and techniques for compiler analysis and optimization. larus received his m.s. and ph.d. in computer science from the university of california, berkeley in 1989, and an a.b. in applied mathematics from harvard in 1980. at berkeley, larus developed one of the first systems to analyze lisp programs and determine how to best execute them on a parallel computer.greg morrisett is the allen b. cutting professor of computer science at harvard university. his current research interests are in the applications of programming language technology for building secure and reliable systems. in particular, he is interested in applications of advanced type systems, model checkers, certifying compilers, proofcarrying code, and inline reference monitors for building efficient and provably secure systems. he is also interested in the design and application of highlevel languages for new or emerging domains, such as sensor networks. dr. morrisett received his b.s. degree in mathematics and computer science from the university of richmond (1989) and his ph.d. degree in computer science from carnegie mellon university (1995). he spent about 7 years on the faculty of the computer science department at cornell university. in the 20022003 academic year, he took a sabbatical at microsoft™s cambridge research laboratory. in january of 2004, he moved to harvard university.walker royce is vice president and chief software economist at ibm software group. mr. royce has managed large software engineering projects, consulted with a broad spectrum of ibm™s worldwide customer base, and developed software management approaches that exploit an iterative lifecycle, industry best practices, and architecturefirst priorities. he is the author of two books: software project management, a unified framework (addison wesley, 1998) and the economics of software development (addison wesley, 2009). from 1994 through 2009, mr. royce was the vice president and general manager of ibm™s worldwide rational services organization and led a team of 500 technical specialists in software delivery best practices and $100 million in consulting services. before joining rational/ibm, mr. royce spent 16 years in software project development, software technology development, and software management roles at trw electronics & defense. he was a recipient of trw™s chairman™s award for innovation for his contributions in distributed architecture middleware and iterative software processes in 1990 and was named a trw technical fellow in 1992. he received his b.a. in physics from the university of california and his m.s. in computer information and control engineering from the university of michigan, and he completed 3 years of further study in computer science at ucla.doug c. schmidt is the deputy director, research, and chief technology officer at carnegie mellon university™s software engineering institute. he was previously a professor at vanderbilt university, university of california, irvine, and washington university st. louis. he also served as chief technology officer for zircon computing and prism technologies, where he was responsible for the companies™ critical code: software producibility for defensecopyright national academy of sciences. all rights reserved.148 critical code: software producibility for defensetechnical vision, strategic directions, and growth. in addition, dr. schmidt served as a deputy office director and a program manager at darpa, where he led the national r&d effort on middleware for dre systems and was the cochair for the software design and productivity (sdp) coordinating group of the u.s. government™s multiagency information technology research and development (it r&d) program, which formulated the multiagency software research agenda. dr. schmidt has published 9 books and over 450 technical papers that cover a range of research topics, including patterns, optimization techniques, and empirical analyses of software frameworks and domainspecific modeling environments that facilitate the development of distributed realtime and embedded (dre) middleware and applications running over highspeed networks and embedded system interconnects. in addition to his government service, academic research, and commercial experience, dr. schmidt has two decades of experience leading the development of ace, tao, ciao, and cosmic, which are widely used, opensource dre middleware frameworks and modeldriven tools that contain a rich set of components and domainspecific languages that implement patterns and productline architectures for highperformance dre systems. these technologies have been used successfully by thousands of developers at hundreds of companies worldwide on projects involving medical engineering systems, financial services, datacom/telecom systems, national defense and security systems, and online gaming. dr. schmidt has ph.d. and m.s. degrees in computer science from the university of california, irvine, and m.a. and b.a degrees in sociology from the college of william and mary, williamsburg, va.john p. stenbit is an independent consultant. he recently served as assistant secretary of defense for networks and information integration and as the dod™s chief information officer. mr. stenbit has had a career that spans more than 30 years of public and privatesector service in telecommunications and command and control. in addition to his recent service, his public service includes 2 years as principal deputy director of telecommunications and command and control systems, and 2 years as staff specialist for worldwide command and control systems, both in the office of the secretary of defense. mr. stenbit previously was executive vice president at trw, retiring in may 2001. he joined trw in 1968 and was responsible for the planning and analysis of advanced satellite surveillance systems. prior to joining trw, he held a position with the aerospace corporation involving commandandcontrol systems for missiles and satellites, and satellite data compression and pattern recognition. during this time, he was a fulbright fellow and aerospace corporation fellow at the technische hogeschool, einhoven, the netherlands, concentrating on coding theory and data compression. he has served on numerous scientific boards and advisory committees, including as chair of the science and technology advisory panel to the director of central intelligence and as a member of the science advisory group to the directors of naval intelligence and the defense communications agency. he is a member of the national academy of engineering.kevin j. sullivan is an associate professor and a virginia engineering foundation (vef) endowed faculty fellow in computer science at the university of virginia, where he has worked since 1994. his research interests are mainly in software engineering and languages. he has served as associate editor for the journal of empirical software engineering and the acm transactions on software engineering and methodology and on the program and executive committees of conferences including the acm sigsoft symposium on the foundations of software engineering (fse), the international conference on software engineering (icse), aspectoriented software development (aosd), and the acm sigplansigact symposium on principles of programming languages (popl). he and his students are broadly interested in the design and engineering of softwareintensive systems, with an emphasis on the need for a valuebased theory and practice of system design. dr. sullivan received his undergraduate degree from tufts university in 1987 and m.s. and ph.d. degrees in computer science and engineering from the university of washington in 1994.